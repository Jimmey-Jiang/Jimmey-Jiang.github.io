<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luuman&#39;s Blog</title>
  <subtitle>城已成，兵不封，鼓不停，志不移，行不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://luuman.github.io/"/>
  <updated>2017-08-01T08:13:53.000Z</updated>
  <id>http://luuman.github.io/</id>
  
  <author>
    <name>Jimmey-Jiang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git Workflows</title>
    <link href="http://luuman.github.io/2017/08/29/Tool/GitWorkflows/"/>
    <id>http://luuman.github.io/2017/08/29/Tool/GitWorkflows/</id>
    <published>2017-08-29T06:11:20.000Z</published>
    <updated>2017-08-01T08:13:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>随着团队不断的壮大，业务流程迭代。代码工作流的规范是显而易见的。为了保证开发速度，我们不断改进完善这个发布流程，让这个过程更简单、高效。<br>这篇指南以大家在SVN中已经广为熟悉使用的集中式工作流作为起点，循序渐进地演进到其它高效的分布式工作流，还介绍了如何配合使用便利的Pull Request功能，体系地讲解了各种工作流的应用。<br>在阅读过程中，请记住这些工作流是指导原则，而不是具体规则。我们想向您展示什么是可能的，因此您可以混合和匹配来自不同工作流的方面，以满足您的个人需求。</p>
<p>常见问题：</p>
<ol>
<li>我们以使用SVN的工作流来使用Git有什么不妥？</li>
<li>如何控制开发版本？</li>
<li>Git方便的branch在哪里，团队多人如何协作？冲突了怎么办？如何进行发布控制？</li>
<li>经典的master-发布、develop-主开发、hotfix-bug修复如何避免代码不经过验证上线？</li>
<li>如何在GitHub上面与他人一起协作，star-fork-pull request是怎样的流程？<a id="more"></a>
</li>
</ol>
<h1 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h1><p>集中式工作流以中央仓库作为项目所有修改的单点实体。相比 SVN 缺省的开发分支 trunk ，Git 叫做master，所有修改提交到这个分支上。本工作流只用到 master 这一个分支。<br><img src="http://wiki.jikexueyuan.com/project/git-workflow-tutorial/images/git-workflow-svn.png" alt="集中式工作流"></p>
<h2 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h2><p>要发布修改到正式项目中，开发者要把本地 master 分支的修改『推』到中央仓库中。这相当于 svn commit 操作，但 push 操作会把所有还不在中央仓库的本地提交都推上去。</p>
<p><img src="http://wiki.jikexueyuan.com/project/git-workflow-tutorial/images/git-workflow-svn-push-local.png" alt="push"></p>
<h1 id="Gitflow工作流"><a href="#Gitflow工作流" class="headerlink" title="Gitflow工作流"></a>Gitflow工作流</h1><!-- ![Git Workflows](http://nvie.com/img/git-model@2x.png) -->
<p>Gitflow工作流通过为功能开发、发布准备和维护分配独立的分支，让发布迭代过程更流畅。严格的分支模型也为大型项目提供了一些非常必要的结构。<br><!-- ![Gitflow](http://wiki.jikexueyuan.com/project/git-workflow-tutorial/images/git-workflows-gitflow.png) --></p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>健壮的用于管理大型项目的框架</li>
<li>分支分配明确</li>
<li>功能分支，在做准备、维护和记录发布也使用各自的分支</li>
</ol>
<h2 id="工作方式-1"><a href="#工作方式-1" class="headerlink" title="工作方式"></a>工作方式</h2><p>Gitflow工作流仍然用中央仓库作为所有开发者的交互中心。和其它的工作流一样，开发者在本地工作并push分支到要中央仓库中。</p>
<p>分支命名：<code>master</code>版本、<code>develop</code>开发、<code>release-*</code>发布、<code>feature-*</code>功能、<code>hotfix-*</code>修复</p>
<blockquote>
<p>特点</p>
</blockquote>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── <span class="keyword">master</span></div><div class="line">	<span class="title">├── hotfix-</span>*</div><div class="line">	├── release-*</div><div class="line">	├── develop</div><div class="line">		├── hotfix-*</div><div class="line">		├── release-*</div><div class="line">		├── feature-*</div></pre></td></tr></table></figure>
<p><img src="https://wac-cdn.atlassian.com/dam/jcr:21cf772d-2ba5-4686-8259-fcd6fd2311df/05.svg?cdnVersion=fn" alt="维护分支"></p>
<h3 id="master版本分支"><a href="#master版本分支" class="headerlink" title="master版本分支"></a>master版本分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:e3bd4199-27ac-4bac-a5d2-3ff0fdb112d3/01.svg?cdnVersion=fn" alt=""><br>正式发布历史分支：用于管理发布的版本，发布Tag</p>
<h3 id="develop开发分支"><a href="#develop开发分支" class="headerlink" title="develop开发分支"></a>develop开发分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:2e2315b0-d79a-403f-a981-4cb94599df1f/02.svg?cdnVersion=fn" alt=""><br>功能的集成分支：用于开发项目</p>
<h3 id="feature功能分支"><a href="#feature功能分支" class="headerlink" title="feature功能分支"></a>feature功能分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:9f149cef-f784-43de-8207-3e7968789a1f/03.svg?cdnVersion=fn" alt=""><br>功能分支：每个新功能位于一个自己的分支，这样可以push到中央仓库以备份和协作。<br>新功能提交应该从不直接与master分支交互，</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>小红和小明开始各自的功能开发。他们需要为各自的功能创建相应的分支。新分支不是基于master分支，而是应该基于develop分支进行开发<br><img src="https://wac-cdn.atlassian.com/dam/jcr:57829b6b-1e6d-40ea-a15a-1a2fe6bf80f6/07.svg?cdnVersion=fn" alt=""></p>
<h5 id="创建feature分支"><a href="#创建feature分支" class="headerlink" title="创建feature分支"></a>创建feature分支</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- develop分支 --&gt;</span></div><div class="line">$ git checkout develop</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 创建dev分支并切换 --&gt;</span></div><div class="line">$ git checkout -b feature-dev</div><div class="line">Switched to branch 'feature-dev'</div><div class="line"></div><div class="line">=&gt;</div><div class="line"><span class="comment">&lt;!-- 以develop创建dev分支并切换 --&gt;</span></div><div class="line">git checkout -b feature-dev develop</div></pre></td></tr></table></figure>
<h5 id="编辑、暂存、提交"><a href="#编辑、暂存、提交" class="headerlink" title="编辑、暂存、提交"></a>编辑、暂存、提交</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git status</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"branch"</span></span></div><div class="line">[feature-dev fec145a] branch</div><div class="line"> 1 file changed, 1 insertion(+)</div><div class="line"><span class="meta">$</span><span class="bash"> git push</span></div></pre></td></tr></table></figure>
<h5 id="完成合并"><a href="#完成合并" class="headerlink" title="完成合并"></a>完成合并</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 拉取develop代码并合并 --&gt;</span></div><div class="line">$ git pull origin develop</div><div class="line">$ git checkout develop</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 合并指定分支到feature-dev分支 --&gt;</span></div><div class="line">$ git merge feature-dev</div><div class="line">$ git push</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除分支 --&gt;</span></div><div class="line">$ git branch -d feature-dev</div></pre></td></tr></table></figure>
<h3 id="release发布分支"><a href="#release发布分支" class="headerlink" title="release发布分支"></a>release发布分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:3555a856-675e-453a-b49d-ba60667809e1/04.svg?cdnVersion=fn" alt=""><br>发布分支：用于发布准备的专门分支。<br>一旦develop分支上有了做一次发布（或者说快到了既定的发布日）的足够功能，就从develop分支上fork一个发布分支。新建的分支用于开始发布循环，所以从这个时间点开始之后新的功能不能再加到这个分支上 —— 这个分支只应该做Bug修复、文档生成和其它面向发布任务。<br>一旦对外发布的工作都完成了，发布分支合并到master分支并分配一个版本号打好Tag。另外，这些从新建发布分支以来的做的修改要合并回develop分支。</p>
<h3 id="hotfixes修复分支"><a href="#hotfixes修复分支" class="headerlink" title="hotfixes修复分支"></a>hotfixes修复分支</h3><p><img src="https://wac-cdn.atlassian.com/dam/jcr:21cf772d-2ba5-4686-8259-fcd6fd2311df/05.svg?cdnVersion=fn" alt=""><br>维护分支：用于生成快速给产品发布版本。<br>这是唯一可以直接从master分支fork出来的分支。修复完成，修改应该马上合并回master分支和develop分支（当前的发布分支），master分支应该用新的版本号打好Tag。</p>
<p>Gitflow 工作流没有用超出功能分支工作流的概念和命令，而是为不同的分支分配一个很明确的角色，并定义分支之间如何和什么时候进行交互。 除了使用功能分支，在做准备、维护和记录发布也使用各自的分支。 当然你可以用上功能分支工作流所有的好处：Pull Requests 、隔离实验性开发和更高效的协作。</p>
<h1 id="Forking工作流"><a href="#Forking工作流" class="headerlink" title="Forking工作流"></a>Forking工作流</h1><p>Forking工作流是分布式工作流，充分利用了Git在分支和克隆上的优势。可以安全可靠地管理大团队的开发者（developer），并能接受不信任贡献者（contributor）的提交。</p>
<h1 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h1><h2 id="大幅度"><a href="#大幅度" class="headerlink" title="大幅度"></a>大幅度</h2><ul>
<li><a href="http://blog.jobbole.com/76867/#comment-156726" target="_blank" rel="external">Git工作流指南：Gitflow工作流</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows" target="_blank" rel="external">Comparing Workflows</a></li>
</ul>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><ul>
<li><a href="http://wiki.jikexueyuan.com/project/git-workflow-tutorial/" target="_blank" rel="external">Git 工作流指南</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/" title="成功的Git分支模型" target="_blank" rel="external">A successful Git branching model</a></li>
<li><a href="https://tech.meituan.com/improving-git-flow_squashing-commits.html" target="_blank" rel="external">改进合作 Git 工作流：自动提取、合并提交</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows" title="工作流比较" target="_blank" rel="external">Comparing Workflows</a></li>
<li><a href="https://github.com/xirong/my-git/" title="有关 git 的学习资料" target="_blank" rel="external">my-git</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;随着团队不断的壮大，业务流程迭代。代码工作流的规范是显而易见的。为了保证开发速度，我们不断改进完善这个发布流程，让这个过程更简单、高效。&lt;br&gt;这篇指南以大家在SVN中已经广为熟悉使用的集中式工作流作为起点，循序渐进地演进到其它高效的分布式工作流，还介绍了如何配合使用便利的Pull Request功能，体系地讲解了各种工作流的应用。&lt;br&gt;在阅读过程中，请记住这些工作流是指导原则，而不是具体规则。我们想向您展示什么是可能的，因此您可以混合和匹配来自不同工作流的方面，以满足您的个人需求。&lt;/p&gt;
&lt;p&gt;常见问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们以使用SVN的工作流来使用Git有什么不妥？&lt;/li&gt;
&lt;li&gt;如何控制开发版本？&lt;/li&gt;
&lt;li&gt;Git方便的branch在哪里，团队多人如何协作？冲突了怎么办？如何进行发布控制？&lt;/li&gt;
&lt;li&gt;经典的master-发布、develop-主开发、hotfix-bug修复如何避免代码不经过验证上线？&lt;/li&gt;
&lt;li&gt;如何在GitHub上面与他人一起协作，star-fork-pull request是怎样的流程？
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Git" scheme="http://luuman.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git速查手册</title>
    <link href="http://luuman.github.io/2017/08/19/Tool/Git/"/>
    <id>http://luuman.github.io/2017/08/19/Tool/Git/</id>
    <published>2017-08-19T06:11:20.000Z</published>
    <updated>2017-08-16T05:15:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>打开控制台，然后通过包管理安装，在Ubuntu上命令是：<br><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-<span class="built_in">get</span> install git-<span class="built_in">all</span></div></pre></td></tr></table></figure></p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>推荐使用git for<br>windows，它包括了图形工具以及命令行模拟器。</p>
<h2 id="OS-X"><a href="#OS-X" class="headerlink" title="OS X"></a>OS X</h2><p>最简单的方式是使用homebrew安装，命令行执行<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>git</div></pre></td></tr></table></figure></p>
<p>如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。<br><a id="more"></a></p>
<ul>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
<h1 id="Git-术语"><a href="#Git-术语" class="headerlink" title="Git 术语"></a>Git 术语</h1><table>
<thead>
<tr>
<th>术语</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>仓库（Repository）</td>
<td>一个仓库包括了所有的版本信息、所有的分支和标记信息。在Git中仓库的每份拷贝都是完整的。仓库让你可以从中取得你的工作副本。</td>
</tr>
<tr>
<td>分支（Branches）</td>
<td>一个分支意味着一个独立的、拥有自己历史信息的代码线（code line）。你可以从已有的代码中生成一个新的分支，这个分支与剩余的分支完全独立。默认的分支往往是叫master。用户可以选择一个分支，选择一个分支执行命令git checkout branch.</td>
</tr>
<tr>
<td>标记（Tags）</td>
<td>一个标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态，例如2009年1月25号在testing分支上的代码状态</td>
</tr>
<tr>
<td>提交（Commit）</td>
<td>提交代码后，仓库会创建一个新的版本。这个版本可以在后续被重新获得。每次提交都包括作者和提交者，作者和提交者可以是不同的人</td>
</tr>
<tr>
<td>修订（Revision）</td>
<td>用来表示代码的一个版本状态。Git通过用SHA1 hash算法表示的id来标识不同的版本。每一个 SHA1 id都是160位长，16进制标识的字符串.。最新的版本可以通过HEAD来获取。之前的版本可以通过”HEAD~1”来获取，以此类推。</td>
</tr>
</tbody>
</table>
<h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><h2 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在当前目录新建一个Git代码库 --&gt;</span></div><div class="line">$ git init</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个目录，将其初始化为Git代码库 --&gt;</span></div><div class="line">$ git init [project-name]</div></pre></td></tr></table></figure>
<h2 id="复制远程仓库"><a href="#复制远程仓库" class="headerlink" title="复制远程仓库"></a>复制远程仓库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 下载一个项目和它的整个代码历史 --&gt;</span></div><div class="line">$ git clone [url]</div></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="配置账号信息"><a href="#配置账号信息" class="headerlink" title="配置账号信息"></a>配置账号信息</h2><p>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 设置提交代码时的用户信息 --&gt;</div><div class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"My Name"</span></div><div class="line">$ git<span class="built_in"> config </span>--global user.email myEmail@example.com</div><div class="line"></div><div class="line">&lt;!-- 显示仓库的Git配置 --&gt;</div><div class="line">$ git<span class="built_in"> config </span>--list</div><div class="line"></div><div class="line">&lt;!-- 编辑Git配置文件 --&gt;</div><div class="line">$ git<span class="built_in"> config </span>-e [--global]</div></pre></td></tr></table></figure></p>
<p>配置好这两项，用户就能知道谁做了什么，并且一切都更有组织性了不是吗？</p>
<h3 id="生成SSH秘钥"><a href="#生成SSH秘钥" class="headerlink" title="生成SSH秘钥"></a>生成SSH秘钥</h3><p>用于上传到你对应的github账号<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C "mail@gmail.com"</div><div class="line"><span class="comment">&lt;!-- 这的密码不是我们GitHub的密码，而是Git SSH的密码 --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 打开Git生成的密码文件，将其复制到GitHub上 --&gt;</span></div><div class="line">$ vim ~/.ssh/id_rsa.pub</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 验证GitHub SSH是否成功 --&gt;</span></div><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure></p>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="提交流程"><a href="#提交流程" class="headerlink" title="提交流程"></a>提交流程</h2><p><img src="http://img.blog.csdn.net/20161219162011600?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDM0NjMwMQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="提交流程"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> git pull</span></div><div class="line"><span class="meta">$</span><span class="bash"> git start</span></div><div class="line"><span class="meta">$</span><span class="bash"> git add</span></div><div class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">""</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> git push</span></div></pre></td></tr></table></figure>
<h1 id="修改与提交"><a href="#修改与提交" class="headerlink" title="修改与提交"></a>修改与提交</h1><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 添加指定文件到暂存区 --&gt;</span></div><div class="line">$ git add [file1] [file2] ...</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加指定目录到暂存区，包括子目录 --&gt;</span></div><div class="line">$ git add [dir]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加当前目录的所有文件到暂存区 --&gt;</span></div><div class="line">$ git add .</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加每个变化前，都会要求确认 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 对于同一个文件的多处变化，可以实现分次提交 --&gt;</span></div><div class="line">$ git add -p</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除工作区文件，并且将这次删除放入暂存区 --&gt;</span></div><div class="line">$ git rm [file1] [file2] </div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 停止追踪指定文件，但该文件会保留在工作区 --&gt;</span></div><div class="line">$ git rm --cached [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 改名文件，并且将这个改名放入暂存区 --&gt;</span></div><div class="line">$ git mv [file-original] [file-renamed]</div></pre></td></tr></table></figure>
<h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 提交暂存区到仓库区 --&gt;</span></div><div class="line">$ git commit -m [message]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交暂存区的指定文件到仓库区 --&gt;</span></div><div class="line">$ git commit [file1] [file2] ... -m [message]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交工作区自上次commit之后的变化，直接到仓库区 --&gt;</span></div><div class="line">$ git commit -a</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交时显示所有diff信息 --&gt;</span></div><div class="line">$ git commit -v</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 使用一次新的commit，替代上一次提交 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 如果代码没有任何新变化，则用来改写上一次commit的提交信息 --&gt;</span></div><div class="line">$ git commit --amend -m [message]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重做上一次commit，并包括指定文件的新变化 --&gt;</span></div><div class="line">$ git commit --amend [file1] [file2]</div></pre></td></tr></table></figure>
<h1 id="分支与标签"><a href="#分支与标签" class="headerlink" title="分支与标签"></a>分支与标签</h1><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 列出所有本地分支 --&gt;</span></div><div class="line">$ git branch</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 列出所有远程分支 --&gt;</span></div><div class="line">$ git branch -r</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 列出所有本地分支和远程分支 --&gt;</span></div><div class="line">$ git branch -a</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，但依然停留在当前分支 --&gt;</span></div><div class="line">$ git branch [branch-name]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，并切换到该分支 --&gt;</span></div><div class="line">$ git checkout -b [branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，指向指定commit --&gt;</span></div><div class="line">$ git branch [branch] [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，与指定的远程分支建立追踪关系 --&gt;</span></div><div class="line">$ git branch --track [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 切换到指定分支，并更新工作区 --&gt;</span></div><div class="line">$ git checkout [branch-name]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 切换到上一个分支 --&gt;</span></div><div class="line">$ git checkout -</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 建立追踪关系，在现有分支与指定的远程分支之间 --&gt;</span></div><div class="line">$ git branch --set-upstream [branch] [remote-branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 合并指定分支到当前分支 --&gt;</span></div><div class="line">$ git merge [branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 选择一个commit，合并进当前分支 --&gt;</span></div><div class="line">$ git cherry-pick [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除分支 --&gt;</span></div><div class="line">$ git branch -d [branch-name]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除远程分支 --&gt;</span></div><div class="line">$ git push origin --delete [branch-name]</div><div class="line">$ git branch -dr [remote/branch]</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 列出所有tag --&gt;</span></div><div class="line">$ git tag</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个tag在当前commit --&gt;</span></div><div class="line">$ git tag [tag]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个tag在指定commit --&gt;</span></div><div class="line">$ git tag [tag] [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除本地tag --&gt;</span></div><div class="line">$ git tag -d [tag]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 删除远程tag --&gt;</span></div><div class="line">$ git push origin :refs/tags/[tagName]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 查看tag信息 --&gt;</span></div><div class="line">$ git show [tag]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交指定tag --&gt;</span></div><div class="line">$ git push [remote] [tag]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交所有tag --&gt;</span></div><div class="line">$ git push [remote] --tags</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个分支，指向某个tag --&gt;</span></div><div class="line">$ git checkout -b [branch] [tag]</div></pre></td></tr></table></figure>
<h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 显示有变更的文件 --&gt;</span></span></div><div class="line">$ git status</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示当前分支的版本历史 --&gt;</span></div><div class="line">$ git log</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示commit历史，以及每次commit发生变更的文件 --&gt;</span></div><div class="line">$ git log --stat</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 搜索提交历史，根据关键词 --&gt;</span></div><div class="line">$ git log -S [keyword]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某个commit之后的所有变动，每个commit占据一行 --&gt;</span></div><div class="line">$ git log [tag] HEAD --pretty=format:%s</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件 --&gt;</span></div><div class="line">$ git log [tag] HEAD --grep feature</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某个文件的版本历史，包括文件改名 --&gt;</span></div><div class="line">$ git log --follow [file]</div><div class="line">$ git whatchanged [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示指定文件相关的每一次diff --&gt;</span></div><div class="line">$ git log -p [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示1行日志 -n为n行  --&gt;</span></div><div class="line">$ git log -5</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示过去5次提交 --&gt;</span></div><div class="line">$ git log -5 --pretty --oneline</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示所有提交过的用户，按提交次数排序 --&gt;</span></div><div class="line">$ git shortlog -sn</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示指定文件是什么人在什么时间修改过 --&gt;</span></div><div class="line">$ git blame [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示暂存区和工作区的差异 --&gt;</span></div><div class="line">$ git diff</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示暂存区和上一个commit的差异 --&gt;</span></div><div class="line">$ git diff --cached [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示工作区与当前分支最新commit之间的差异 --&gt;</span></div><div class="line">$ git diff HEAD</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示两次提交之间的差异 --&gt;</span></div><div class="line">$ git diff [first-branch]...[second-branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示今天你写了多少行代码 --&gt;</span></div><div class="line">$ git diff --shortstat "@<span class="template-variable">&#123;0 day ago&#125;</span><span class="xml">"</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某次提交的元数据和内容变化 --&gt;</span></div><div class="line">$ git show [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某次提交发生变化的文件 --&gt;</span></div><div class="line">$ git show --name-only [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某次提交时，某个文件的内容 --&gt;</span></div><div class="line">$ git show [commit]:[filename]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示当前分支的最近几次提交 --&gt;</span></div><div class="line">$ git reflog</div></pre></td></tr></table></figure>
<h1 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 下载远程仓库的所有变动 --&gt;</span></div><div class="line">$ git fetch [remote]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示所有远程仓库 --&gt;</span></div><div class="line">$ git remote -v</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 显示某个远程仓库的信息 --&gt;</span></div><div class="line">$ git remote show [remote]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 增加一个新的远程仓库，并命名 --&gt;</span></div><div class="line">$ git remote add [shortname] [url]</div><div class="line"></div><div class="line">git pull <span class="tag">&lt;<span class="name">远程主机名(origin)</span>&gt;</span> <span class="tag">&lt;<span class="name">远程分支名</span>&gt;</span>:<span class="tag">&lt;<span class="name">本地分支名</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 取回远程仓库的变化，并与本地分支合并 --&gt;</span></div><div class="line">$ git pull [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 上传本地指定分支到远程仓库 --&gt;</span></div><div class="line">$ git push [remote] [branch]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 强行推送当前分支到远程仓库，即使有冲突 --&gt;</span></div><div class="line">$ git push [remote] --force</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 推送所有分支到远程仓库 --&gt;</span></div><div class="line">$ git push [remote] --all</div></pre></td></tr></table></figure>
<h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 恢复暂存区的指定文件到工作区 --&gt;</span></div><div class="line">$ git checkout [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 恢复某个commit的指定文件到暂存区和工作区 --&gt;</span></div><div class="line">$ git checkout [commit] [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 恢复暂存区的所有文件到工作区 --&gt;</span></div><div class="line">$ git checkout .</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 --&gt;</span></div><div class="line">$ git reset [file]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置暂存区与工作区，与上一次commit保持一致 --&gt;</span></div><div class="line">$ git reset --hard</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 --&gt;</span></div><div class="line">$ git reset [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 --&gt;</span></div><div class="line">$ git reset --hard [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 重置当前HEAD为指定commit，但保持暂存区和工作区不变 --&gt;</span></div><div class="line">$ git reset --keep [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 新建一个commit，用来撤销指定commit --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 后者的所有变化都将被前者抵消，并且应用到当前分支 --&gt;</span></div><div class="line">$ git revert [commit]</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 暂时将未提交的变化移除，稍后再移入 --&gt;</span></div><div class="line">$ git stash</div><div class="line">$ git stash pop</div></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 生成一个可供发布的压缩包 --&gt;</span></div><div class="line">$ git archive</div></pre></td></tr></table></figure>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><ul>
<li><a href="https://github.com/xirong/my-git" title="有关 git 的学习资料" target="_blank" rel="external">my-git</a></li>
<li><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" title="讲解过于复杂，而且还有很多广告" target="_blank" rel="external">廖雪峰Git教程</a></li>
<li><a href="http://jlord.us/git-it/" title="一位女员工写的 Git 教程" target="_blank" rel="external">Git-it - GitHub</a></li>
<li><a href="http://learngitbranching.js.org/?demo" title="是一个git仿真沙盒" target="_blank" rel="external">Learn Git Branching</a></li>
<li><a href="http://www.jianshu.com/p/da9bc509b1d2" target="_blank" rel="external">github快速入门</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git - 简明指南</a></li>
<li><a href="https://aotu.io/notes/2017/04/10/githooks/" target="_blank" rel="external">用 Git 钩子进行简单自动部署</a></li>
<li><a href="https://github.com/geeeeeeeeek/git-recipes/wiki" target="_blank" rel="external">git-recipes</a></li>
<li><a href="http://www.ui.cn/detail/20957.html" target="_blank" rel="external">专为设计师而写的GitHub快速入门教程</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
<h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><ul>
<li><a href="https://juejin.im/search?query=Git%20%E5%B7%A5%E4%BD%9C%E6%B5%81" target="_blank" rel="external">Git 工作流</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows" target="_blank" rel="external">Comparing Workflows</a></li>
<li><a href="http://blog.jobbole.com/76867/#comment-156726" target="_blank" rel="external">Git工作流指南：Gitflow工作流</a></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">A successful Git branching model</a></li>
<li><a href="https://tech.meituan.com/improving-git-flow_squashing-commits.html" target="_blank" rel="external">改进合作 Git 工作流：自动提取、合并提交</a></li>
</ul>
<h2 id="速查表"><a href="#速查表" class="headerlink" title="速查表"></a>速查表</h2><ul>
<li><a href="http://backlogtool.com/git-guide/cn/reference/" target="_blank" rel="external">Git索引</a></li>
<li><a href="https://www.git-tower.com/blog/git-cheat-sheet-cn" target="_blank" rel="external">Git指令速查表</a></li>
</ul>
<h2 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h2><ul>
<li><a href="http://backlogtool.com/git-guide/cn/" target="_blank" rel="external">猴子都能懂的Git入门</a></li>
<li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html#conventions" target="_blank" rel="external">图解Git</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h2&gt;&lt;p&gt;打开控制台，然后通过包管理安装，在Ubuntu上命令是：&lt;br&gt;&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt; install git-&lt;span class=&quot;built_in&quot;&gt;all&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h2&gt;&lt;p&gt;推荐使用git for&lt;br&gt;windows，它包括了图形工具以及命令行模拟器。&lt;/p&gt;
&lt;h2 id=&quot;OS-X&quot;&gt;&lt;a href=&quot;#OS-X&quot; class=&quot;headerlink&quot; title=&quot;OS X&quot;&gt;&lt;/a&gt;OS X&lt;/h2&gt;&lt;p&gt;最简单的方式是使用homebrew安装，命令行执行&lt;br&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;brew &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;install &lt;/span&gt;git&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果你是在是先用图形工具的话，那么推荐你使用Github desktop,Sourcetree。但我还是推荐你使用命令行，下面的内容就都是命令行的。&lt;br&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Git" scheme="http://luuman.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件探秘</title>
    <link href="http://luuman.github.io/2017/08/18/FrontFrame/Vue/VueComponents/"/>
    <id>http://luuman.github.io/2017/08/18/FrontFrame/Vue/VueComponents/</id>
    <published>2017-08-18T10:29:00.000Z</published>
    <updated>2017-08-18T07:48:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<em>**</em>文章适合有一定vue经验，只是简单介绍项目中的搭建与开发的优化之处。知识点，请自行查阅！<br><a id="more"></a></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="属性Props"><a href="#属性Props" class="headerlink" title="属性Props"></a>属性Props</h2><h1 id="探秘"><a href="#探秘" class="headerlink" title="探秘"></a>探秘</h1><h2 id="Props验证"><a href="#Props验证" class="headerlink" title="Props验证"></a>Props验证</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Vue</span><span class="selector-class">.component</span>(<span class="string">'example'</span>, &#123;</div><div class="line">  <span class="attribute">props</span>: &#123;</div><div class="line">    <span class="comment">// 基础类型检测 (`null` 意思是任何类型都可以)</span></div><div class="line">    <span class="attribute">propA</span>: Number,</div><div class="line">    <span class="comment">// 多种类型</span></div><div class="line">    <span class="attribute">propB</span>: [String, Number],</div><div class="line">    <span class="comment">// 必传且是字符串</span></div><div class="line">    <span class="attribute">propC</span>: &#123;</div><div class="line">      <span class="attribute">type</span>: String,</div><div class="line">      <span class="attribute">required</span>: true</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 数字，有默认值</span></div><div class="line">    <span class="attribute">propD</span>: &#123;</div><div class="line">      <span class="attribute">type</span>: Number,</div><div class="line">      <span class="attribute">default</span>: <span class="number">100</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 数组/对象的默认值应当由一个工厂函数返回</span></div><div class="line">    <span class="attribute">propE</span>: &#123;</div><div class="line">      <span class="attribute">type</span>: Object,</div><div class="line">      <span class="attribute">default</span>: function () &#123;</div><div class="line">        return &#123; <span class="attribute">message</span>: <span class="string">'hello'</span> &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 自定义验证函数</span></div><div class="line">    <span class="attribute">propF</span>: &#123;</div><div class="line">      <span class="attribute">validator</span>: function (value) &#123;</div><div class="line">        return value &gt; <span class="number">10</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><p>可以是下面原生构造器<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span></div><div class="line"><span class="built_in">Number</span></div><div class="line"><span class="built_in">Boolean</span></div><div class="line"><span class="built_in">Function</span></div><div class="line"><span class="built_in">Object</span></div><div class="line"><span class="built_in">Array</span></div><div class="line"><span class="built_in">Symbol</span></div></pre></td></tr></table></figure></p>
<h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on:"></a>v-on:</h2><h3 id="绑定原生事件"><a href="#绑定原生事件" class="headerlink" title="绑定原生事件"></a>绑定原生事件</h3><p>如果想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">my</span>-component v-<span class="keyword">on</span>:click.native=<span class="string">"doTheThing"</span>&gt;&lt;/<span class="keyword">my</span>-component&gt;</div></pre></td></tr></table></figure></p>
<h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>this.$emit分发事件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">v-on:myclick</span>=<span class="string">"onClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  Vue.component(<span class="string">'my-component2'</span>, &#123;</div><div class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;</span></div><div class="line">    &lt;button type="button" @click="childClick"&gt;点击我触发自定义事件&lt;/button&gt;</div><div class="line">    &lt;/div&gt;`,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      childClick () &#123;</div><div class="line">        <span class="keyword">this</span>.$emit(<span class="string">'myclick'</span>, <span class="string">'这是我暴露出去的数据'</span>, <span class="string">'这是我暴露出去的数据2'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app3'</span>,</div><div class="line">    <span class="attr">methods</span>: &#123;</div><div class="line">      onClick () &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li>组件内部方法，触发外部自定义方法</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">this.$emit('myclick', 'data1', 'data2')</div><div class="line"><span class="comment">&lt;!-- 第一个参数是自定义事件的名字 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 后面的参数是依次想要发送出去的数据 --&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>父组件利用v-on为事件绑定处理器</li>
</ol>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">my</span>-component2 v-<span class="keyword">on</span>:myclick=<span class="string">"onClick"</span>&gt;&lt;/<span class="keyword">my</span>-component2&gt;</div></pre></td></tr></table></figure>
<p>在使用v-on绑定事件处理方法时，不应该传进任何参数，而是直接写v-on:myclick=”onClick”,不然，子组件暴露出来的数据就无法获取到了</p>
<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><p>v-model是一个十分强大的指令,它可以自动让原生表单组件的值自动和你选择的值绑定</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: <span class="template-variable">&#123;&#123; message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="使用自定义事件的表单输入组件"><a href="#使用自定义事件的表单输入组件" class="headerlink" title="使用自定义事件的表单输入组件"></a>使用自定义事件的表单输入组件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="attribute">v-model</span>=<span class="string">"something"</span>&gt;</div><div class="line"></div><div class="line">&lt;input</div><div class="line">  v-bind:<span class="attribute">value</span>=<span class="string">"something"</span></div><div class="line">  v-on:<span class="attribute">input</span>=<span class="string">"something = <span class="variable">$event</span>.target.value"</span>&gt;</div></pre></td></tr></table></figure>
<p>非常简单的货币输入的自定义控件：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;currency-input v-model=<span class="string">"price"</span>&gt;&lt;/currency-input&gt;</div><div class="line"></div><div class="line">Vue.component(<span class="string">'currency-input'</span>, &#123;</div><div class="line">  template: <span class="string">'\</span></div><div class="line">    &lt;span&gt;\</div><div class="line">      $\</div><div class="line">      &lt;input\</div><div class="line">        ref="input"\</div><div class="line">        v-bind:value="value"\</div><div class="line">        v-on:input="updateValue($event.target.value)"\</div><div class="line">      &gt;\</div><div class="line">    &lt;/span&gt;\</div><div class="line">  ',</div><div class="line">  props: [<span class="string">'value'</span>],</div><div class="line">  methods: &#123;</div><div class="line">    <span class="comment">// 不是直接更新值，而是使用此方法来对输入值进行格式化和位数限制</span></div><div class="line">    updateValue: function (<span class="keyword">value</span>) &#123;</div><div class="line">      <span class="keyword">var</span> formattedValue = <span class="keyword">value</span></div><div class="line">        <span class="comment">// 删除两侧的空格符</span></div><div class="line">        .trim()</div><div class="line">        <span class="comment">// 保留 2 小数位</span></div><div class="line">        .slice(</div><div class="line">          <span class="number">0</span>,</div><div class="line">          <span class="keyword">value</span>.indexOf(<span class="string">'.'</span>) === <span class="number">-1</span></div><div class="line">            ? <span class="keyword">value</span>.length</div><div class="line">            : <span class="keyword">value</span>.indexOf(<span class="string">'.'</span>) + <span class="number">3</span></div><div class="line">        )</div><div class="line">      <span class="comment">// 如果值不统一，手动覆盖以保持一致</span></div><div class="line">      <span class="keyword">if</span> (formattedValue !== <span class="keyword">value</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.$refs.input.<span class="keyword">value</span> = formattedValue</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 通过 input 事件发出数值</span></div><div class="line">      <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, Number(formattedValue))</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 在 "change" 而不是 "input" 事件中更新 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 自动将用户的输入值转为 Number 类型 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 自动过滤用户输入的首尾空格 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app4"</span>&gt;</span></span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"text"</span> <span class="attr">v-on:input</span>=<span class="string">"changeValue($event.target.value)"</span>&gt;</span></div><div class="line">	<span class="template-variable">&#123;&#123;text&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">  <span class="keyword">new</span> Vue(&#123;</div><div class="line">    el: <span class="string">'#app4'</span>,</div><div class="line">    data: &#123;</div><div class="line">      text: <span class="string">'444'</span></div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      changeValue (value) &#123;</div><div class="line">        <span class="keyword">this</span>.text = value</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue.js component<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child-template"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">'msg'</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"notify"</span>&gt;</span>Dispatch Event<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"events-example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Messages: <span class="template-variable">&#123;&#123;messages | json&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="actionscript"></span></div><div class="line">	Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">	    template: <span class="string">'#child-template'</span>,</div><div class="line">	    data: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">	        <span class="keyword">return</span> &#123;</div><div class="line">	            msg: <span class="string">'hello'</span></div><div class="line">	        &#125;</div><div class="line">	    &#125;,</div><div class="line">	    methods: &#123;</div><div class="line">	        notify: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">	            <span class="keyword">if</span> (<span class="keyword">this</span>.msg.trim()) &#123;</div><div class="line">	                <span class="keyword">this</span>.$dispatch(<span class="string">'child-msg'</span>, <span class="keyword">this</span>.msg);</div><div class="line">	                <span class="keyword">this</span>.msg = <span class="string">''</span>;</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="keyword">var</span> parent = <span class="keyword">new</span> Vue(&#123;</div><div class="line">	    el: <span class="string">'#events-example'</span>,</div><div class="line">	    data: &#123;</div><div class="line">	        messages: [],</div><div class="line">	    &#125;,</div><div class="line">	    events: &#123;</div><div class="line">	        <span class="string">'child-msg'</span>: <span class="function"><span class="keyword">function</span> <span class="params">(msg)</span> </span>&#123;</div><div class="line">	            <span class="keyword">this</span>.messages.push(msg);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue.js component<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 子组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"child-template"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">'msg'</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"notify"</span>&gt;</span>Dispatch Event<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 父组件模板 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"events-example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Messages: <span class="template-variable">&#123;&#123;messages | json&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-on:child-msg</span>=<span class="string">"handleIt"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	Vue.component(<span class="string">'child'</span>, &#123;</div><div class="line">	    <span class="attr">template</span>: <span class="string">'#child-template'</span>,</div><div class="line">	    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	        <span class="keyword">return</span> &#123;</div><div class="line">	            <span class="attr">msg</span>: <span class="string">'hello'</span></div><div class="line">	        &#125;</div><div class="line">	    &#125;,</div><div class="line">	    <span class="attr">methods</span>: &#123;</div><div class="line">	        <span class="attr">notify</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	            <span class="keyword">if</span> (<span class="keyword">this</span>.msg.trim()) &#123;</div><div class="line">	                <span class="keyword">this</span>.$dispatch(<span class="string">'child-msg'</span>, <span class="keyword">this</span>.msg);</div><div class="line">	                <span class="keyword">this</span>.msg = <span class="string">''</span>;</div><div class="line">	            &#125;</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line"></div><div class="line">	<span class="keyword">var</span> parent = <span class="keyword">new</span> Vue(&#123;</div><div class="line">	    <span class="attr">el</span>: <span class="string">'#events-example'</span>,</div><div class="line">	    <span class="attr">data</span>: &#123;</div><div class="line">	        <span class="attr">messages</span>: [],</div><div class="line">	    &#125;,</div><div class="line">	    <span class="attr">methods</span>: &#123;</div><div class="line">	        <span class="string">'handleIt'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	            <span class="built_in">console</span>.log(<span class="string">'a'</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	&#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><a href="https://segmentfault.com/a/1190000010527064" target="_blank" rel="external">深刻理解Vue中的组件</a></li>
<li><a href="https://cn.vuejs.org/v2/guide/forms.html#绑定-value" target="_blank" rel="external">表单控件绑定</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;em&gt;**&lt;/em&gt;文章适合有一定vue经验，只是简单介绍项目中的搭建与开发的优化之处。知识点，请自行查阅！&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="Vue" scheme="http://luuman.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>深入Sass</title>
    <link href="http://luuman.github.io/2017/08/18/Induce/InduceSass/"/>
    <id>http://luuman.github.io/2017/08/18/Induce/InduceSass/</id>
    <published>2017-08-18T10:29:00.000Z</published>
    <updated>2017-08-18T07:45:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SASS</strong>是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。<br>你可以用它开发网页样式，但是没法用它编程。也就是说，CSS基本上是设计师的工具，不是程序员的工具。在程序员眼里，CSS是一件很麻烦的东西。它没有变量，也没有条件语句，只是一行行单纯的描述，写起来相当费事。<br><a id="more"></a></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="变量与选择器"><a href="#变量与选择器" class="headerlink" title="变量与选择器"></a>变量与选择器</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量的定义一般以$开头，某个变量的作用域仅限于他们定义的层级以及子层级。如果变量是定义在所有嵌套选择器之外的，那么他们可以在各处被调用。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$color1</span>: <span class="number">#aeaeae</span>;</div><div class="line"><span class="selector-class">.div1</span>&#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="variable">$color1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div1</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#aeaeae</span>;</div><div class="line">&#125;</div><div class="line">&lt;!<span class="selector-tag">--</span> <span class="comment">/*# sourceMappingURL=test.css.map */</span> <span class="selector-tag">--</span>&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>变量的作用域<br>如果希望某个在子选择器中定义的变量能够成为全局变量，可以使用!global关键字：</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#main</span> &#123;</div><div class="line">  <span class="variable">$width</span>: <span class="number">5em</span> !global;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#sidebar</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="variable">$width</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="嵌套引用"><a href="#嵌套引用" class="headerlink" title="嵌套引用"></a>嵌套引用</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$side</span>: top;</div><div class="line"><span class="variable">$radius</span>: <span class="number">10px</span>;</div><div class="line"><span class="selector-class">.round-</span>#&#123;<span class="variable">$side</span>&#125; &#123;</div><div class="line">  <span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">  -moz-<span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">  -webkit-<span class="attribute">border</span>-#&#123;<span class="variable">$side</span>&#125;-radiux: <span class="variable">$radius</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.round-top</span> &#123;</div><div class="line">  <span class="attribute">border-top-radius</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">-moz-border-top-radius</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">-webkit-border-top-radiux</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="变量计算"><a href="#变量计算" class="headerlink" title="变量计算"></a>变量计算</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$left</span>: <span class="number">20px</span>;</div><div class="line"><span class="selector-class">.div1</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>:<span class="variable">$left</span>+<span class="number">12px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>计算的类型</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">p &#123;</div><div class="line">  &lt;!-- Plain CSS, no division --&gt;</div><div class="line">  font: 10px/8px;</div><div class="line">  $width: 1000px;</div><div class="line">  &lt;!-- Uses a variable, does division --&gt;</div><div class="line">  width: $width/2;</div><div class="line">  &lt;!-- Uses a function, does division --&gt;</div><div class="line">  width: round(1.5)/2;</div><div class="line">  &lt;!-- Uses parentheses, does division --&gt;</div><div class="line">  height: (500px/2);</div><div class="line">  &lt;!-- Uses +, does division --&gt;</div><div class="line">  margin-left: 5px + 8px/2px;</div><div class="line">  &lt;!-- In a list, parentheses don't count --&gt;</div><div class="line">  font: (italic bold 10px/8px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div1</span>&#123;</div><div class="line">  <span class="selector-class">.span1</span>&#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">12px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.div2</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span>&#123;</div><div class="line">	<span class="attribute">border</span>:&#123;</div><div class="line">		color: red;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意: border后面必须加上冒号</p>
<h4 id="父元素引用"><a href="#父元素引用" class="headerlink" title="父元素引用"></a>父元素引用</h4><p>允许使用&amp;引用父元素<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.div1</span>&#123;</div><div class="line">  &amp;:hover&#123;</div><div class="line">    <span class="attribute">cursor</span>: hand;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="代码重用"><a href="#代码重用" class="headerlink" title="代码重用"></a>代码重用</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>SASS允许一个选择器，继承另一个选择器。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class1</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span>&#123;</div><div class="line">  @<span class="keyword">extend</span> .class1;</div><div class="line">  <span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class1</span>, <span class="selector-class">.class2</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span> &#123;</div><div class="line">  <span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：如果在class2后面有设置了class1的属性，那么也会影响class2</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class1</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span>&#123;</div><div class="line">    @<span class="keyword">extend</span> .class1;</div><div class="line">    <span class="attribute">color</span>:black;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class1</span>&#123;</div><div class="line">    <span class="attribute">font-weight</span>:bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">%class1&#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.class2</span>&#123;</div><div class="line">  @<span class="keyword">extend</span> %class1;</div><div class="line">  <span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.class2</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">19px</span>;</div><div class="line">  <span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="引用外部"><a href="#引用外部" class="headerlink" title="引用外部"></a>引用外部</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"_test1.scss"</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">"_test2.scss"</span>;</div><div class="line">@<span class="keyword">import</span> <span class="string">"_test3.scss"</span>;</div></pre></td></tr></table></figure>
<h3 id="Mixin-amp-Include"><a href="#Mixin-amp-Include" class="headerlink" title="Mixin&amp;Include"></a>Mixin&amp;Include</h3><p>Mixin是SASS中非常强大的特性之一。定义mixin时，需要在前面加@mixin，使用时需要添加@include来引用该mixin。</p>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> left &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">	@<span class="keyword">include</span> left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">	<span class="attribute">float</span>: left;</div><div class="line">	<span class="attribute">margin-left</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="边距设置"><a href="#边距设置" class="headerlink" title="边距设置"></a>边距设置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> common(<span class="variable">$value1</span>,<span class="variable">$value2</span>,<span class="variable">$defaultValue</span>:<span class="number">12px</span>) &#123;</div><div class="line">  <span class="attribute">display</span>:block;</div><div class="line">  <span class="attribute">margin-left</span>:<span class="variable">$value1</span>;</div><div class="line">  <span class="attribute">margin-right</span>:<span class="variable">$value2</span>;</div><div class="line">  <span class="attribute">padding</span>:<span class="variable">$defaultValue</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.class1</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</div><div class="line">  @<span class="keyword">include</span> common(<span class="number">12px</span>,<span class="number">13px</span>,<span class="number">15px</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.class2</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</div><div class="line">  @<span class="keyword">include</span> common(<span class="number">12px</span>,<span class="number">13px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="浏览器前缀设置"><a href="#浏览器前缀设置" class="headerlink" title="浏览器前缀设置"></a>浏览器前缀设置</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">mixin</span> rounded(<span class="variable">$vert</span>, <span class="variable">$horz</span>, <span class="variable">$radius</span>: 10px) &#123;</div><div class="line">	<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">	-moz-<span class="attribute">border-radius</span>-#&#123;<span class="variable">$vert</span>&#125;#&#123;<span class="variable">$horz</span>&#125;: <span class="variable">$radius</span>;</div><div class="line">	-webkit-<span class="attribute">border</span>-#&#123;<span class="variable">$vert</span>&#125;-#&#123;<span class="variable">$horz</span>&#125;-radius: <span class="variable">$radius</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#navbar</span> <span class="selector-tag">li</span> &#123;</div><div class="line">	@<span class="keyword">include</span> rounded(top, left);</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#footer</span> &#123;</div><div class="line">	@<span class="keyword">include</span> rounded(top, left, 5px);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="编程式方法"><a href="#编程式方法" class="headerlink" title="编程式方法"></a>编程式方法</h2><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><blockquote>
<p>@if</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">	@<span class="keyword">if</span> 1 + 1 == 2 &#123;</div><div class="line">		<span class="attribute">border</span>: <span class="number">1px</span> solid;</div><div class="line">	&#125;</div><div class="line">	@<span class="keyword">if</span> 5 &lt; 3 &#123;</div><div class="line">		<span class="attribute">border</span>: <span class="number">2px</span> dotted;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>@else</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">if</span> lightness(<span class="variable">$color</span>) &gt; 30% &#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#000</span>;</div><div class="line">&#125; @<span class="keyword">else</span> &#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><blockquote>
<p>for循环</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 5 &#123;</div><div class="line">  <span class="selector-class">.border-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</div><div class="line">    <span class="attribute">border</span>: #&#123;<span class="variable">$i</span>&#125;px solid blue;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* line 149, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-1</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 149, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-2</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 149, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-3</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 149, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-4</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>while循环</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$i</span>: <span class="number">1</span>;</div><div class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &lt; 5 &#123;</div><div class="line">  <span class="selector-class">.border-</span>#&#123;<span class="variable">$i</span>&#125; &#123; <span class="attribute">border</span>: #&#123;<span class="variable">$i</span>&#125;px solid blue; &#125;</div><div class="line">  <span class="variable">$i</span>: <span class="variable">$i</span> + <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* line 156, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-1</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 156, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-2</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 156, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-3</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid blue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 156, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.border-4</span> &#123;</div><div class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>each命令，作用与for类似</p>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">each</span> <span class="variable">$item</span> in add, update, remove, share &#123;</div><div class="line">  <span class="selector-class">.icon-</span>#&#123;<span class="variable">$item</span>&#125; &#123;</div><div class="line">    <span class="attribute">background-image</span>: url(<span class="string">"/image/#&#123;$item&#125;.jpg"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* line 161, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.icon-add</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/add.jpg"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 161, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.icon-update</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/update.jpg"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 161, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.icon-remove</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/remove.jpg"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* line 161, ../sass/style.scss */</span></div><div class="line"><span class="selector-class">.icon-share</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/share.jpg"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@function double(<span class="variable">$n</span>) &#123;</div><div class="line">	@return <span class="variable">$n</span> * 2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#sidebar</span> &#123;</div><div class="line">	<span class="attribute">width</span>: double(<span class="number">5px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#navbar</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="颜色函数"><a href="#颜色函数" class="headerlink" title="颜色函数"></a>颜色函数</h4><p>SASS提供了一些内置的颜色函数，以便生成系列颜色。<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">lighten(<span class="selector-id">#cc3</span>, 10%)</div><div class="line"><span class="comment">// #d6d65c</span></div><div class="line"></div><div class="line">darken(<span class="selector-id">#cc3</span>, 10%)</div><div class="line"><span class="comment">//  #a3a329</span></div><div class="line"></div><div class="line">grayscale(<span class="selector-id">#cc3</span>)</div><div class="line"><span class="comment">// #808080</span></div><div class="line"></div><div class="line">complement(<span class="selector-id">#cc3</span>)</div><div class="line"><span class="comment">// #33c</span></div></pre></td></tr></table></figure></p>
<h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><h2 id="Sass-与-SCSS-是什么关系"><a href="#Sass-与-SCSS-是什么关系" class="headerlink" title="Sass 与 SCSS 是什么关系"></a>Sass 与 SCSS 是什么关系</h2><ol>
<li>sass受Haml简洁启发，Ruby的语法，没有花括号，没有分号，具有严格的缩进<br>Sass 从来没有大写过，无论你指的是语法或者这个语言。同时， SCSS 一直是大写的。甚至有一个网站专门来提醒你这件事!</li>
</ol>
<h3 id="sass"><a href="#sass" class="headerlink" title=".sass"></a>.sass</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$def-color: #333</div><div class="line">body</div><div class="line">  font: 100%</div><div class="line">  color: $def-color</div></pre></td></tr></table></figure>
<h3 id="scss"><a href="#scss" class="headerlink" title=".scss"></a>.scss</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$def-color</span>: <span class="number">#333</span></div><div class="line">body&#123;</div><div class="line">  font: <span class="number">100%</span>；</div><div class="line">  color: <span class="variable">$def-color</span>；</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用Sass之更高级的媒体查询"><a href="#使用Sass之更高级的媒体查询" class="headerlink" title="使用Sass之更高级的媒体查询"></a>使用Sass之更高级的媒体查询</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/ _config.scss</div><div class="line">$breakpoints: (</div><div class="line">  'xs': 'only screen and ( min-width: 480px)',</div><div class="line">  'sm': 'only screen and ( min-width: 768px)',</div><div class="line">  'md': 'only screen and ( min-width: 992px)',</div><div class="line">  'lg': 'only screen and ( min-width: 1200px)',</div><div class="line">) !default;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// _mixins.scss</div><div class="line">@mixin respond-to($breakpoint) &#123;</div><div class="line">  $query: map-get($breakpoints, $breakpoint);</div><div class="line">  </div><div class="line">  @if not $query &#123;</div><div class="line">    @error 'No value found for `#&#123;$breakpoint&#125;`. Please make sure it is defined in `$breakpoints` map.';</div><div class="line">  &#125;</div><div class="line">  @media #&#123;if(type-of($query) == 'string', unquote($query), inspect($query))&#125; &#123;</div><div class="line">    @content;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// _component.scss</span></div><div class="line"><span class="selector-class">.element</span> &#123;</div><div class="line">  <span class="attribute">color</span>: hotpink;</div><div class="line">  @<span class="keyword">include</span> respond-to(sm) &#123;</div><div class="line">    <span class="attribute">color</span>: tomato;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.element</span> &#123;</div><div class="line">  <span class="attribute">color</span>: hotpink;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-class">.element</span> &#123;</div><div class="line">    <span class="attribute">color</span>: tomato;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="巧用SASS之如何遍历n个子元素并为其设置属性"><a href="#巧用SASS之如何遍历n个子元素并为其设置属性" class="headerlink" title="巧用SASS之如何遍历n个子元素并为其设置属性"></a>巧用SASS之如何遍历n个子元素并为其设置属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main-container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将背景颜色值定义成变量</span></div><div class="line"><span class="variable">$red</span> : <span class="number">#FF0000</span>;</div><div class="line"><span class="variable">$orange</span> : <span class="number">#FFA500</span>;</div><div class="line"><span class="variable">$yellow</span> : <span class="number">#FFFF00</span>;</div><div class="line"><span class="variable">$green</span> : <span class="number">#008000</span>;</div><div class="line"><span class="variable">$bluegreen</span> : <span class="number">#00FFFF</span>;</div><div class="line"><span class="variable">$blue</span> : <span class="number">#0000FF</span>;</div><div class="line"><span class="variable">$purple</span> : <span class="number">#800080</span>;</div><div class="line"></div><div class="line"><span class="comment">//将背景颜色以键值对的形式存在map中</span></div><div class="line"><span class="variable">$bgcolorlist</span> : (</div><div class="line">  <span class="number">1</span>: <span class="variable">$red</span>,</div><div class="line">  <span class="number">2</span>: <span class="variable">$orange</span>,</div><div class="line">  <span class="number">3</span>: <span class="variable">$yellow</span>,</div><div class="line">  <span class="number">4</span>: <span class="variable">$green</span>,</div><div class="line">  <span class="number">5</span>: <span class="variable">$bluegreen</span>,</div><div class="line">  <span class="number">6</span>: <span class="variable">$blue</span>,</div><div class="line">  <span class="number">7</span>: <span class="variable">$purple</span></div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// 使用SASS each语法为每一个li设置background-color</span></div><div class="line">@<span class="keyword">each</span> <span class="variable">$i</span>, <span class="variable">$color</span> in <span class="variable">$bgcolorlist</span> &#123;</div><div class="line">  <span class="selector-id">#main-container</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>:nth-child(#&#123;<span class="variable">$i</span>&#125;) &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="variable">$color</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="设置rem，控制width"><a href="#设置rem，控制width" class="headerlink" title="设置rem，控制width"></a>设置rem，控制width</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@function size(<span class="variable">$size</span>) &#123;</div><div class="line">  <span class="variable">$width</span>: <span class="number">375</span>;</div><div class="line">  <span class="variable">$scale</span>: <span class="number">10</span>;</div><div class="line">  @return (<span class="variable">$size</span> / <span class="variable">$width</span> * <span class="variable">$scale</span>) * 1rem;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="http://www.w3cplus.com/sassguide/" target="_blank" rel="external">sass入门</a></li>
<li><a href="http://sass-lang.com/" target="_blank" rel="external">sass</a></li>
<li><a href="https://www.w3ctrain.com/2015/12/02/sass-media-query/" target="_blank" rel="external">使用Sass之更高级的媒体查询</a></li>
<li><a href="http://blog.csdn.net/qishuixian/article/details/54578212" target="_blank" rel="external">学习SASS笔记</a></li>
<li><a href="https://segmentfault.com/a/1190000005942514" target="_blank" rel="external">巧用SASS之如何遍历n个子元素并为其设置属性</a></li>
<li><a href="https://www.w3ctrain.com/2016/02/21/useful-sass-mixins/" target="_blank" rel="external">几个实用的Sass mixins</a></li>
<li><p><a href="https://aotu.io/notes/2017/01/19/sass-svg/?o2src=juejin&amp;o2layout=compat" target="_blank" rel="external">sass-svg 一个内联 SVG 的 SASS 库</a></p>
</li>
<li><p><a href="&quot;&quot;"></a></p>
</li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;SASS&lt;/strong&gt;是一种CSS的开发工具，提供了许多便利的写法，大大节省了设计者的时间，使得CSS的开发，变得简单和可维护。&lt;br&gt;你可以用它开发网页样式，但是没法用它编程。也就是说，CSS基本上是设计师的工具，不是程序员的工具。在程序员眼里，CSS是一件很麻烦的东西。它没有变量，也没有条件语句，只是一行行单纯的描述，写起来相当费事。&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="Sass" scheme="http://luuman.github.io/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>keep-alive最佳实践</title>
    <link href="http://luuman.github.io/2017/08/18/FrontFrame/Vue/KeepAlive/"/>
    <id>http://luuman.github.io/2017/08/18/FrontFrame/Vue/KeepAlive/</id>
    <published>2017-08-18T10:29:00.000Z</published>
    <updated>2017-08-18T07:48:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>Vue 项目搭建：</strong>文章适合有一定vue经验，只是简单介绍项目中的搭建与开发的优化之处。知识点，请自行查阅！<br><a id="more"></a></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ol>
<li>include - 字符串，或正则表达式，或数组。匹配的组件会被缓存。</li>
<li>exclude - 字符串，或正则表达式，或数组。匹配的组件不会被缓存。</li>
</ol>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>当组件在 <keep-alive> 内被切换，它的 activated 和 deactivated 这两个生命周期钩子函数将会被对应执行。</keep-alive></p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>主要用于保留组件状态或避免重新渲染。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- comma-delimited string --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">"a,b"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- regex (use v-bind) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"/a|b/"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Array (use v-bind) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">"['a', 'b']"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"view"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="误解"><a href="#误解" class="headerlink" title="误解"></a>误解</h2><p>1.直接添加在router-view上：<br>将所有页面全部缓存，这样的内存不会卡顿？如何制定那些缓存。无法使用过滤。<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;keep-alive&gt;</span></div><div class="line">  <span class="section">&lt;router-view&gt;</span><span class="section">&lt;/router-view&gt;</span></div><div class="line"><span class="section">&lt;/keep-alive&gt;</span></div></pre></td></tr></table></figure></p>
<ol>
<li>不适用与v-for的组件上，和没有组件的内容。</li>
<li></li>
</ol>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>子路由的内容缓存，切换路由，将组建缓存，通过data，判断是否重新渲染页面内容。<br>mounted =&gt; activated =&gt; deactivated =&gt; activated =&gt; deactivated<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mounted () &#123;</div><div class="line">  <span class="comment">// 加载数据</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">activated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 是否重新加载数据</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'组件启动'</span>)</div><div class="line">&#125;,</div><div class="line"><span class="attr">deactivated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'组件缓存'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><a href="https://segmentfault.com/q/1010000006827156" target="_blank" rel="external">关于router-view上使用keep-alive的问题</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;Vue 项目搭建：&lt;/strong&gt;文章适合有一定vue经验，只是简单介绍项目中的搭建与开发的优化之处。知识点，请自行查阅！&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="Vue" scheme="http://luuman.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS低频属性</title>
    <link href="http://luuman.github.io/2017/08/18/Induce/CSS/CssLowFrequency/"/>
    <id>http://luuman.github.io/2017/08/18/Induce/CSS/CssLowFrequency/</id>
    <published>2017-08-18T10:29:00.000Z</published>
    <updated>2017-08-18T07:46:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h1 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h1><h2 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">text-indent</span>: <span class="number">25px</span>;</div></pre></td></tr></table></figure>
<h2 id="字母不换行"><a href="#字母不换行" class="headerlink" title="字母不换行"></a>字母不换行</h2><p>word-wrap: break-word;</p>
<h2 id="文字省略"><a href="#文字省略" class="headerlink" title="文字省略"></a>文字省略</h2><p>通过CSS判断，这个区域宽度</p>
<h3 id="省略"><a href="#省略" class="headerlink" title="省略"></a>省略</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 单行文本溢出 --&gt;</span></div><div class="line">text-overflow: ellipsis;</div><div class="line">white-space: nowrap;</div><div class="line">overflow: hidden;</div></pre></td></tr></table></figure>
<h3 id="一行省略"><a href="#一行省略" class="headerlink" title="一行省略"></a>一行省略</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 多行文本溢出 --&gt;</div><div class="line"><span class="attribute">display</span>: -webkit-box <span class="meta">!important</span>;</div><div class="line"><span class="attribute">overflow</span>: hidden;</div><div class="line"><span class="attribute">text-overflow</span>: ellipsis;</div><div class="line"><span class="attribute">word-break</span>: break-all;</div><div class="line">-webkit-box-orient: vertical;</div><div class="line">-webkit-line-clamp: <span class="number">2</span>;</div></pre></td></tr></table></figure>
<h2 id="首字母大写"><a href="#首字母大写" class="headerlink" title="首字母大写"></a>首字母大写</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">text-transform</span>: capitalize;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td style="text-align:left">默认。定义带有小写字母和大写字母的标准的文本。</td>
</tr>
<tr>
<td>capitalize</td>
<td style="text-align:left">文本中的每个单词以大写字母开头。</td>
</tr>
<tr>
<td>uppercase</td>
<td style="text-align:left">定义仅有大写字母。</td>
</tr>
<tr>
<td>lowercase</td>
<td style="text-align:left">定义无大写字母，仅有小写字母。</td>
</tr>
<tr>
<td>inherit</td>
<td style="text-align:left">规定应该从父元素继承 text-transform 属性的值。</td>
</tr>
</tbody>
</table>
<h2 id="will-change"><a href="#will-change" class="headerlink" title="will-change"></a>will-change</h2><p><a href="http://www.zhangxinxu.com/wordpress/2015/11/css3-will-change-improve-paint/" target="_blank" rel="external">提高页面滚动、动画等渲染性能</a></p>
<h2 id="元素可以点透"><a href="#元素可以点透" class="headerlink" title="元素可以点透"></a>元素可以点透</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">pointer</span>-events: <span class="keyword">none</span>;</div></pre></td></tr></table></figure>
<h2 id="移动端手机input输入内容自动移动"><a href="#移动端手机input输入内容自动移动" class="headerlink" title="移动端手机input输入内容自动移动"></a>移动端手机input输入内容自动移动</h2><p>该效果只限于IOS，ando<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">filter</span>: blur(-<span class="number">3px</span>);</div></pre></td></tr></table></figure></p>
<h2 id="webkit-text-size-adjust-失效"><a href="#webkit-text-size-adjust-失效" class="headerlink" title="-webkit-text-size-adjust(失效)"></a>-webkit-text-size-adjust(失效)</h2><ol>
<li>当样式表里font-size&lt;12px时，中文版chrome浏览器里字体显示仍为12px，这时可以用 html{-webkit-text-size-adjust:none;}</li>
<li>-webkit-text-size-adjust放在body上会导致页面缩放失效</li>
<li>body会继承定义在html的样式</li>
<li>用-webkit-text-size-adjust不要定义成可继承的或全局的</li>
</ol>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-<span class="built_in">text</span>-<span class="built_in">size</span>-adjust: none;</div></pre></td></tr></table></figure>
<p>以显示 10px 的字为例<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.some-small-font</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block; <span class="comment">/* Or block */</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12.5px</span>;</div><div class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0.8);</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.8);</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">12.5%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">125%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="输入框选择时无边框"><a href="#输入框选择时无边框" class="headerlink" title="输入框选择时无边框"></a>输入框选择时无边框</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">outline</span>: none;</div></pre></td></tr></table></figure>
<h2 id="可点击的元素时，覆盖显示的高亮颜色"><a href="#可点击的元素时，覆盖显示的高亮颜色" class="headerlink" title="可点击的元素时，覆盖显示的高亮颜色"></a>可点击的元素时，覆盖显示的高亮颜色</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-tap-highlight-<span class="attribute">color</span>: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<h2 id="修改chrome记住密码后自动填充表单的背景颜色"><a href="#修改chrome记住密码后自动填充表单的背景颜色" class="headerlink" title="修改chrome记住密码后自动填充表单的背景颜色"></a>修改chrome记住密码后自动填充表单的背景颜色</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">select-webkit-autofill</span>&#123;</div><div class="line">	<span class="attribute">background-color</span>: <span class="number">#FFF</span>;</div><div class="line">	<span class="attribute">background-image</span>: none;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#000</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="弹窗背景模糊"><a href="#弹窗背景模糊" class="headerlink" title="弹窗背景模糊"></a>弹窗背景模糊</h2><p>原理：使用高斯模糊，使得页面显示元素模糊，将样式加在body上，通过body的class实现的。row为指定要模糊的内容<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">	<span class="attribute">-webkit-backface-visibility</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.modal-active</span> <span class="selector-class">.row</span> &#123;</div><div class="line">	<span class="attribute">-webkit-filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">	<span class="attribute">-moz-filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">	<span class="attribute">-o-filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">	<span class="attribute">-ms-filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">	<span class="attribute">filter</span>: <span class="built_in">blur</span>(3px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li><a href="http://mao.li/css3-blur-filter-pratice/" title="描述" target="_blank" rel="external">CSS3 filter 模糊滤镜</a></li>
<li><a href="https://segmentfault.com/q/1010000000123341" title="描述" target="_blank" rel="external">如何将网页CSS背景图高斯模糊且全屏显示</a></li>
</ul>
</blockquote>
<h2 id="微信二维码无法识别"><a href="#微信二维码无法识别" class="headerlink" title="微信二维码无法识别"></a>微信二维码无法识别</h2><blockquote>
<ul>
<li><a href="https://segmentfault.com/a/1190000002985815" title="中国城投票活动页面" target="_blank" rel="external">微信内置浏览器 长按识别二维码 功能的两三个坑与解决方案</a></li>
<li><a href="https://devework.com/weixin-qrcode-bug.html" title="描述" target="_blank" rel="external">前端页面中 iOS 版微信长按识别二维码的bug 与解决</a><br>网页中使用fixed，ios扫描会偏移到网页下部。</li>
</ul>
</blockquote>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">padding</span>: size(<span class="number">240</span>) <span class="number">0</span> <span class="number">0</span> size(<span class="number">240</span>) <span class="meta">!important</span>;</div><div class="line"><span class="attribute">margin</span>: size(-<span class="number">240</span>) <span class="number">0</span> <span class="number">0</span> size(-<span class="number">240</span>) <span class="meta">!important</span>;</div><div class="line"><span class="attribute">position</span>: relative;<span class="attribute">z-index</span>: <span class="number">100</span>;</div><div class="line">-webkit-user-<span class="selector-tag">select</span>: none;</div></pre></td></tr></table></figure>
<h2 id="背景bg设置"><a href="#背景bg设置" class="headerlink" title="背景bg设置"></a>背景bg设置</h2><p>background: linear-gradient()</p>
<h2 id="安卓微信overflow失效"><a href="#安卓微信overflow失效" class="headerlink" title="安卓微信overflow失效"></a>安卓微信overflow失效</h2><h2 id="CSS-clip-path"><a href="#CSS-clip-path" class="headerlink" title="CSS clip-path"></a>CSS clip-path</h2><p><a href="http://www.cnblogs.com/coco1s/p/6992177.html" target="_blank" rel="external">http://www.cnblogs.com/coco1s/p/6992177.html</a></p>
<h2 id="Web移动端Fixed布局的解决方案"><a href="#Web移动端Fixed布局的解决方案" class="headerlink" title="Web移动端Fixed布局的解决方案"></a>Web移动端Fixed布局的解决方案</h2><p><a href="http://efe.baidu.com/blog/mobile-fixed-layout/" target="_blank" rel="external">http://efe.baidu.com/blog/mobile-fixed-layout/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Terminal配置</title>
    <link href="http://luuman.github.io/2017/08/02/Tool/Terminal/"/>
    <id>http://luuman.github.io/2017/08/02/Tool/Terminal/</id>
    <published>2017-08-02T06:11:20.000Z</published>
    <updated>2017-07-31T09:40:27.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>vim ~/.bash_profile</p>
</blockquote>
<p>a ：编辑模式<br>esc ：命令模式<br>:wq ：保存并退出</p>
<a id="more"></a>
<figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># for color</div><div class="line">export CLICOLOR=1</div><div class="line"># <span class="symbol">\h</span>:<span class="symbol">\W</span> <span class="symbol">\u</span><span class="symbol">\$</span></div><div class="line">export PS1='<span class="symbol">\[</span><span class="symbol">\0</span>33[01;33m<span class="symbol">\]</span><span class="symbol">\u</span>@<span class="symbol">\h</span><span class="symbol">\[</span><span class="symbol">\0</span>33[01;31m<span class="symbol">\]</span> <span class="symbol">\W</span><span class="symbol">\$</span><span class="symbol">\[</span><span class="symbol">\0</span>33[00m<span class="symbol">\]</span> '</div><div class="line"># grep</div><div class="line">alias grep='grep --color=always'</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">find_git_branch</span></span> () &#123;</div><div class="line">  <span class="built_in">local</span> dir=. head</div><div class="line">  until [ <span class="string">"<span class="variable">$dir</span>"</span> -ef / ]; <span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span> ]; <span class="keyword">then</span></div><div class="line">      head=$(&lt; <span class="string">"<span class="variable">$dir</span>/.git/HEAD"</span>)</div><div class="line">      <span class="keyword">if</span> [[ <span class="variable">$head</span> = ref:\ refs/heads/* ]]; <span class="keyword">then</span></div><div class="line">        git_branch=<span class="string">"&lt;<span class="variable">$&#123;head#*/*/&#125;</span>&gt;"</span></div><div class="line">      <span class="keyword">elif</span> [[ <span class="variable">$head</span> != <span class="string">''</span> ]]; <span class="keyword">then</span></div><div class="line">        git_branch=<span class="string">"&lt;(detached)&gt;"</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">        git_branch=<span class="string">"&lt;(unknow)&gt;"</span></div><div class="line">      <span class="keyword">fi</span>  </div><div class="line">      <span class="built_in">return</span></div><div class="line">    <span class="keyword">fi</span>  </div><div class="line">    dir=<span class="string">"../<span class="variable">$dir</span>"</span></div><div class="line">  <span class="keyword">done</span></div><div class="line">  git_branch=<span class="string">''</span></div><div class="line">&#125;</div><div class="line"><span class="comment"># for color</span></div><div class="line"><span class="built_in">export</span> CLICOLOR=1</div><div class="line"><span class="comment"># \h:\W \u\$</span></div><div class="line">PROMPT_COMMAND=<span class="string">"find_git_branch; <span class="variable">$PROMPT_COMMAND</span>"</span></div><div class="line"><span class="built_in">export</span> PS1=<span class="string">'\[\033[01;33m\]\u@\[\033[01;31m\]\W\[\033[00;31m\] $git_branch\[\033[01;31m\]\$\[\033[00m\] '</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;vim ~/.bash_profile&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;a ：编辑模式&lt;br&gt;esc ：命令模式&lt;br&gt;:wq ：保存并退出&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Terminal" scheme="http://luuman.github.io/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>WeChat SDK</title>
    <link href="http://luuman.github.io/2017/07/25/Induce/Weixin/JS-SDK/"/>
    <id>http://luuman.github.io/2017/07/25/Induce/Weixin/JS-SDK/</id>
    <published>2017-07-25T10:29:00.000Z</published>
    <updated>2017-08-16T08:31:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　微信作为大佬，使用他的SDK有些什么需要注意的地方！有哪些容易出错的地方。<br><a id="more"></a></p>
<h1 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h1><h2 id="H5支付"><a href="#H5支付" class="headerlink" title="H5支付"></a><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1" target="_blank" rel="external">H5支付</a></h2><p><a href="http://wxpay.wxutil.com/mch/pay/h5.v2.php" target="_blank" rel="external">微信官方体验链接</a><br>通过微信H5支付可以实现在非微信浏览器（如QQ浏览器、谷歌浏览器、Safari等）中使用微信支付的场景。</p>
<h3 id="接口流程图"><a href="#接口流程图" class="headerlink" title="接口流程图"></a>接口流程图</h3><p><img src="https://pay.weixin.qq.com/wiki/doc/api/img/chapter15_1.png" alt=""><br><a href="https://wx.tenpay.com/cgi-bin/mmpayweb-bin/checkmweb?prepay_id=wx2017081615035708f69384050585043920&amp;package=784262796" target="_blank" rel="external">获取跳转链接</a></p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_4" target="_blank" rel="external">常见问题</a></h3><h2 id="JSDK支付"><a href="#JSDK支付" class="headerlink" title="JSDK支付"></a><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1" target="_blank" rel="external">JSDK支付</a></h2><p>用户通过消息或扫描二维码在微信内打开网页时，可以调用微信支付完成下单购买的流程。<br><img src="https://pay.weixin.qq.com/wiki/doc/api/img/chapter7_4_1.png" alt=""></p>
<h3 id="微信内H5调起支付"><a href="#微信内H5调起支付" class="headerlink" title="微信内H5调起支付"></a>微信内H5调起支付</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   WeixinJSBridge.invoke(</div><div class="line">       <span class="string">'getBrandWCPayRequest'</span>, &#123;</div><div class="line">           <span class="comment">// 公众号名称，由商户传入</span></div><div class="line">           <span class="string">"appId"</span>:<span class="string">"wx2421b1c4370ec43b"</span>,</div><div class="line">           <span class="comment">// 时间戳，自1970年以来的秒数</span></div><div class="line">           <span class="string">"timeStamp"</span>:<span class="string">"1395712654"</span>,</div><div class="line">           <span class="comment">// 随机串</span></div><div class="line">           <span class="string">"nonceStr"</span>:<span class="string">"e61463f8efa94090b1f366cccfbbb444"</span>,</div><div class="line">           <span class="string">"package"</span>:<span class="string">"prepay_id=u802345jgfjsdfgsdg888"</span>,</div><div class="line">           <span class="comment">// 微信签名方式：</span></div><div class="line">           <span class="string">"signType"</span>:<span class="string">"MD5"</span>,</div><div class="line">           <span class="comment">// 微信签名</span></div><div class="line">           <span class="string">"paySign"</span>:<span class="string">"70EA570631E4BB79628FBCA90534C63FF7FADD89"</span></div><div class="line">       &#125;,</div><div class="line">       <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</div><div class="line">           <span class="keyword">if</span>(res.err_msg == <span class="string">"get_brand_wcpay_request:ok"</span> ) &#123;&#125;     <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回    ok，但并不保证它绝对可靠。 </span></div><div class="line">		&#125;</div><div class="line">   );</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"undefined"</span>)&#123;</div><div class="line">   <span class="keyword">if</span>( <span class="built_in">document</span>.addEventListener )&#123;</div><div class="line">       <span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady, <span class="literal">false</span>);</div><div class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent)&#123;</div><div class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady); </div><div class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'onWeixinJSBridgeReady'</span>, onBridgeReady);</div><div class="line">   &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">   onBridgeReady();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">wx</span><span class="selector-class">.chooseWXPay</span>(&#123;</div><div class="line">    <span class="comment">// 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符</span></div><div class="line">    <span class="attribute">timestamp</span>: <span class="number">0</span>,</div><div class="line">    <span class="comment">// 支付签名随机串，不长于 32 位</span></div><div class="line">    <span class="attribute">nonceStr</span>: <span class="string">''</span>,</div><div class="line">    <span class="comment">// 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=***）</span></div><div class="line">    <span class="attribute">package</span>: <span class="string">''</span>,</div><div class="line">    <span class="comment">// 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'</span></div><div class="line">    <span class="attribute">signType</span>: <span class="string">''</span>,</div><div class="line">    <span class="comment">// 支付签名</span></div><div class="line">    <span class="attribute">paySign</span>: <span class="string">''</span>,</div><div class="line">	<span class="comment">// 支付成功后的回调函数</span></div><div class="line">    <span class="attribute">success</span>: function (res) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="小程序支付"><a href="#小程序支付" class="headerlink" title="小程序支付"></a><a href="https://pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_3&amp;index=1" target="_blank" rel="external">小程序支付</a></h2><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="微信分享出去的链接被，打开后自动添加参数"><a href="#微信分享出去的链接被，打开后自动添加参数" class="headerlink" title="微信分享出去的链接被，打开后自动添加参数"></a>微信分享出去的链接被，打开后自动添加参数</h2><p>使用微信出去的页面，在微信中打开时就会显示。出文章在什么终端中打开的参数，添加在链接上。<br>朋友圈   from=timeline&amp;isappinstalled=0<br>微信群   from=groupmessage&amp;isappinstalled=0<br>好友分享 from=singlemessage&amp;isappinstalled=0</p>
<p>解决办法：在链接上添加？分享后打开后，微信会将？去除。<br>url =&gt; url? =&gt; url</p>
<p>vue:<br>/#/ =&gt; /?*/ =&gt; /#/</p>
<p><a href=""></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　微信作为大佬，使用他的SDK有些什么需要注意的地方！有哪些容易出错的地方。&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="WeChatSDK" scheme="http://luuman.github.io/tags/WeChatSDK/"/>
    
  </entry>
  
  <entry>
    <title>浏览器常见Bug——Canvas</title>
    <link href="http://luuman.github.io/2017/07/12/Induce/Hack/Canvas/"/>
    <id>http://luuman.github.io/2017/07/12/Induce/Hack/Canvas/</id>
    <published>2017-07-12T10:29:00.000Z</published>
    <updated>2017-08-18T07:46:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h1 id="生成图片Canvas"><a href="#生成图片Canvas" class="headerlink" title="生成图片Canvas"></a>生成图片Canvas</h1><h2 id="toDataURL"><a href="#toDataURL" class="headerlink" title="toDataURL"></a>toDataURL</h2><blockquote>
<p>Uncaught (in promise) DOMException: Failed to execute ‘toDataURL’ on ‘HTMLCanvasElement’: Tainted canvases may not be exported.</p>
</blockquote>
<p>问题原因：<br>Canvas为了安全性考虑，当绘制了外部图片后它会变成只可写不可读的状态，getImageData、toDataURL之类的试图读取数据的方法全都无法使用。理论上开启了CORS的资源应该被允许读取，只是IMG元素发起的请求默认并不带Origin字段，没能应用上CORS。</p>
<blockquote>
<p>request Headers请求头Origin:</p>
</blockquote>
<p>origin主要是用来说明最初请求是从哪里发起的；<br>origin只用于Post请求，而Referer则用于所有类型的请求；<br>origin的方式比Referer更安全点吧。</p>
<ul>
<li><a href="https://github.com/Aaaaaaaty/Blog/issues/5" target="_blank" rel="external">基于 canvas 实现的一个截图小 demo</a></li>
<li><a href="https://www.web-tinker.com/article/20687.html" target="_blank" rel="external">CORS与Canvas图片toDataURL</a></li>
</ul>
<h2 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h2><blockquote>
<p>Access to Image at ‘<a href="http://wx4.sinaimg.cn/mw690/4b4d632fgy1fieo66xwy4j20io0goq46.jpg" target="_blank" rel="external">http://wx4.sinaimg.cn/mw690/4b4d632fgy1fieo66xwy4j20io0goq46.jpg</a>‘ from origin ‘<a href="http://172.16.20.115:8780" target="_blank" rel="external">http://172.16.20.115:8780</a>‘ has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href="http://172.16.20.115:8780" target="_blank" rel="external">http://172.16.20.115:8780</a>‘ is therefore not allowed access.</p>
</blockquote>
<p>CORS解决</p>
<p><a href="https://www.w3ctrain.com/2017/07/24/gen-image-fe/" target="_blank" rel="external">前端实现’截图’效果的几种方式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="Hack" scheme="http://luuman.github.io/tags/Hack/"/>
    
  </entry>
  
  <entry>
    <title>Vuex</title>
    <link href="http://luuman.github.io/2017/04/25/FrontFrame/Vue/Vuex/"/>
    <id>http://luuman.github.io/2017/04/25/FrontFrame/Vue/Vuex/</id>
    <published>2017-04-25T10:29:00.000Z</published>
    <updated>2017-08-10T01:27:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>Vuex</strong>是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>[ ] 严格模式<br>[ ] 测试<br>[ ] 插件<br>[ ] 热重载<br>[ ]<br>[x]<br><a id="more"></a></p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>简单实用<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import Vue <span class="keyword">from</span> 'vue'</div><div class="line">import Vuex <span class="keyword">from</span> 'vuex'</div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line">const <span class="keyword">state</span> = &#123;</div><div class="line">  count: 'jljdfdf'</div><div class="line">&#125;</div><div class="line">export <span class="keyword">default</span> new Vuex.Store(&#123;</div><div class="line">  <span class="keyword">state</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="全局注入"><a href="#全局注入" class="headerlink" title="全局注入"></a>全局注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> vuex <span class="comment">--save</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">store</span> <span class="keyword">from</span> <span class="string">'./vuex/store'</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  el: <span class="string">'#app'</span>,</div><div class="line">  router,</div><div class="line">  <span class="keyword">store</span>,</div><div class="line">  <span class="keyword">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  components: &#123; App &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="仓库管理"><a href="#仓库管理" class="headerlink" title="仓库管理"></a>仓库管理</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">import</span> modules <span class="keyword">from</span> <span class="string">'./modules'</span></div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  modules</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">'API'</span>;</div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'VUEX/mutation-types'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> getters = &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> actions = &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  state,</div><div class="line">  getters,</div><div class="line">  actions,</div><div class="line">  mutations</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> COM_NAV_STATUS = <span class="string">'COM_NAV_STATUS'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> COM_HEADER_STATUS = <span class="string">'COM_HEADER_STATUS'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> COM_LOADING_STATUS = <span class="string">'COM_LOADING_STATUS'</span></div></pre></td></tr></table></figure>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>通过Getters映射，控制Actions改变状态，从而控制mutations状态控制数据变化。</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>状态自管理应用包含以下几个部分：</p>
<ol>
<li>state，驱动应用的数据源；</li>
<li>view，以声明方式将state映射到视图；</li>
<li>actions，响应在view上的用户输入导致的状态变化。</li>
</ol>
<h1 id="store-仓库"><a href="#store-仓库" class="headerlink" title="store 仓库"></a>store 仓库</h1><p>“store”基本上就是一个容器，它包含着你的应用中大部分的状态(state)。</p>
<p>Vuex和单纯的全局对象有以下两点不同：</p>
<ol>
<li>Vuex的状态存储是响应式的。当Vue组件从store中读取状态的时候，若store中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li>
<li>你不能直接改变store中的状态。改变store 中的状态的唯一途径就是显式地提交(commit) mutations。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li>
</ol>
<h2 id="数据传输方式"><a href="#数据传输方式" class="headerlink" title="数据传输方式"></a>数据传输方式</h2><p>“单向数据流”理念的极简示意</p>
<p>多个组件共享状态的缺点：</p>
<ol>
<li>传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。</li>
<li>我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</li>
</ol>
<h3 id="组件仍然保有局部状态"><a href="#组件仍然保有局部状态" class="headerlink" title="组件仍然保有局部状态"></a>组件仍然保有局部状态</h3><p>使用 Vuex 并不意味着你需要将所有的状态放入 Vuex。虽然将所有的状态放到 Vuex 会使状态变化更显式和易调试，但也会使代码变得冗长和不直观。如果有些状态严格属于单个组件，最好还是作为组件的局部状态。你应该根据你的应用开发需要进行权衡和确定。</p>
<p>this.$store.state<br>this.$store.commit(‘mutationName’)</p>
<h1 id="Getters"><a href="#Getters" class="headerlink" title="Getters"></a>Getters</h1><p>有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  doneTodosCount () &#123;</div><div class="line">    return this.<span class="variable">$store</span><span class="selector-class">.state</span><span class="selector-class">.todos</span><span class="selector-class">.filter</span>(todo =&gt; todo.done)<span class="selector-class">.length</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Vuex 允许我们在 store 中定义『getters』（可以认为是 store 的计算属性）。Getters 接受 state 作为其第一个参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  <span class="keyword">state</span>: &#123;</div><div class="line">    todos: [</div><div class="line">      &#123; id: <span class="number">1</span>, text: '...', done: true &#125;,</div><div class="line">      &#123; id: <span class="number">2</span>, text: '...', done: false &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  getters: &#123;</div><div class="line">    doneTodos: <span class="keyword">state</span> =&gt; &#123;</div><div class="line">      return <span class="keyword">state</span>.todos.filter(todo =&gt; todo.done)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>Getters 也可以接受其他 getters 作为第二个参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">getters: &#123;</div><div class="line">  // ...</div><div class="line">  doneTodosCount: (<span class="keyword">state</span>, getters) =&gt; &#123;</div><div class="line">    return getters.doneTodos.length</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="mapGetters-辅助函数"><a href="#mapGetters-辅助函数" class="headerlink" title="mapGetters 辅助函数"></a>mapGetters 辅助函数</h2><p>mapGetters 辅助函数仅仅是将 store 中的 getters 映射到局部计算属性：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">computed: &#123;</div><div class="line"><span class="comment">// 使用对象展开运算符将 getters 混入 computed 对象中</span></div><div class="line">  ...mapGetters([</div><div class="line">    <span class="string">'doneTodosCount'</span>,</div><div class="line">    <span class="string">'anotherGetter'</span>,</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  ])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你想将一个 getter 属性另取一个名字，使用对象形式：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">mapGetters</span>(&#123;</div><div class="line">  <span class="comment">// 映射 this.doneCount 为 store.getters.doneTodosCount</span></div><div class="line">  <span class="attribute">doneCount</span>: <span class="string">'doneTodosCount'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="Mutations"><a href="#Mutations" class="headerlink" title="Mutations"></a>Mutations</h1><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。</p>
<blockquote>
<p>Vuex 中的 mutations 非常类似于事件：</p>
</blockquote>
<p>每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。<br>这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  <span class="keyword">state</span>: &#123;</div><div class="line">    count: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    increment (<span class="keyword">state</span>) &#123;</div><div class="line">      // 变更状态</div><div class="line">      <span class="keyword">state</span>.count++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="提交-mutation"><a href="#提交-mutation" class="headerlink" title="提交 mutation"></a>提交 mutation</h2><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(<span class="string">'increment'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>提交载荷（Payload）</p>
</blockquote>
<p>你可以向 store.commit 传入额外的参数，即 mutation 的 载荷（payload）<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(<span class="string">'increment'</span>, <span class="number">10</span>)</div><div class="line"></div><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(<span class="string">'increment'</span>, &#123;</div><div class="line">  <span class="attribute">amount</span>: <span class="number">10</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="selector-tag">store</span><span class="selector-class">.commit</span>(&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'increment'</span>,</div><div class="line">  <span class="attribute">amount</span>: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="mapMutations-组件中提交"><a href="#mapMutations-组件中提交" class="headerlink" title="mapMutations 组件中提交"></a>mapMutations 组件中提交</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  methods: &#123;</div><div class="line">    ...mapMutations([</div><div class="line">      <span class="string">'increment'</span></div><div class="line">      <span class="regexp">//</span> 映射 <span class="keyword">this</span>.increment() 为 <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</div><div class="line">    ]),</div><div class="line">    ...mapMutations(&#123;</div><div class="line">      add: <span class="string">'increment'</span></div><div class="line">      <span class="regexp">//</span> 映射 <span class="keyword">this</span>.add() 为 <span class="keyword">this</span>.$store.commit(<span class="string">'increment'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="状态操作"><a href="#状态操作" class="headerlink" title="状态操作"></a>状态操作</h2><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const mutations = &#123;</div><div class="line">  [types.Increment] (<span class="keyword">state</span>, params) &#123;</div><div class="line">    <span class="keyword">state</span>.searchKey = params</div><div class="line">  &#125;,</div><div class="line">  increment (<span class="keyword">state</span>, params) &#123;</div><div class="line">    <span class="keyword">state</span>.searchKey = params</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用 —— 实质上任何在回调函数中进行的的状态的改变都是不可追踪的。</p>
<h2 id="下一步：Actions"><a href="#下一步：Actions" class="headerlink" title="下一步：Actions"></a>下一步：Actions</h2><p>在 mutation 中混合异步调用会导致你的程序很难调试。<br>例如，当你能调用了两个包含异步回调的 mutation 来改变状态，你怎么知道什么时候回调和哪个先回调呢？这就是为什么我们要区分这两个概念。在 Vuex 中，mutation 都是同步事务：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">store.commit(<span class="string">'increment'</span>)</div><div class="line"><span class="regexp">//</span> 任何由 <span class="string">"increment"</span> 导致的状态变更都应该在此刻完成。</div></pre></td></tr></table></figure></p>
<h1 id="Actions"><a href="#Actions" class="headerlink" title="Actions"></a>Actions</h1><p>Action 类似于 mutation，不同在于：</p>
<ol>
<li>Action 提交的是 mutation，而不是直接变更状态。</li>
<li>Action 可以包含任意异步操作。</li>
</ol>
<p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。当我们在之后介绍到 Modules 时，你就知道 context 对象为什么不是 store 实例本身了。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  increment (context) &#123;</div><div class="line">    context.commit(<span class="string">'increment'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">actions: &#123;</div><div class="line">  increment (&#123; commit &#125;) &#123;</div><div class="line">    commit(<span class="string">'increment'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="dispatch-分发-Action"><a href="#dispatch-分发-Action" class="headerlink" title="dispatch 分发 Action"></a>dispatch 分发 Action</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'getTravelsList'</span>)</div></pre></td></tr></table></figure>
<h2 id="载荷分发-Action"><a href="#载荷分发-Action" class="headerlink" title="载荷分发 Action"></a>载荷分发 Action</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以载荷形式分发</span></div><div class="line"><span class="selector-tag">store</span><span class="selector-class">.dispatch</span>(<span class="string">'incrementAsync'</span>, &#123;</div><div class="line">  <span class="attribute">amount</span>: <span class="number">10</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 以对象形式分发</span></div><div class="line"><span class="selector-tag">store</span><span class="selector-class">.dispatch</span>(&#123;</div><div class="line">  <span class="attribute">type</span>: <span class="string">'incrementAsync'</span>,</div><div class="line">  <span class="attribute">amount</span>: <span class="number">10</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="mapActions-组件分发"><a href="#mapActions-组件分发" class="headerlink" title="mapActions 组件分发"></a>mapActions 组件分发</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  ...mapActions([</div><div class="line">    <span class="string">'increment'</span> <span class="regexp">//</span> 映射 this.increment() 为 this.<span class="variable">$store</span>.dispatch(<span class="string">'increment'</span>)</div><div class="line">  ]),</div><div class="line">  ...mapActions(&#123;</div><div class="line">    add: <span class="string">'increment'</span> <span class="regexp">//</span> 映射 this.add() 为 this.<span class="variable">$store</span>.dispatch(<span class="string">'increment'</span>)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="组合-Actions"><a href="#组合-Actions" class="headerlink" title="组合 Actions"></a>组合 Actions</h2><p>一个 store.dispatch 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。<br><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  actionA (&#123; commit &#125;) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Promise(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        commit(<span class="string">'someMutation'</span>)</div><div class="line">        resolve()</div><div class="line">      &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">store.dispatch(<span class="string">'actionA'</span>).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="regexp">//</span> ...</div><div class="line">&#125;)</div><div class="line"></div><div class="line">actions: &#123;</div><div class="line">  <span class="regexp">//</span> ...</div><div class="line">  actionB (&#123; dispatch, commit &#125;) &#123;</div><div class="line">    <span class="keyword">return</span> dispatch(<span class="string">'actionA'</span>).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      commit(<span class="string">'someOtherMutation'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后，如果我们利用 async / await 这个 JavaScript 即将到来的新特性，我们可以像这样组合 action：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  <span class="function"><span class="keyword">async</span> <span class="title">actionA</span> (<span class="params">&#123; commit &#125;</span>) </span>&#123;</div><div class="line">    commit(<span class="string">'gotData'</span>, <span class="keyword">await</span> getData())</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">async</span> <span class="title">actionB</span> (<span class="params">&#123; dispatch, commit &#125;</span>) </span>&#123;</div><div class="line">    <span class="comment">// 等待 actionA 完成</span></div><div class="line">    <span class="keyword">await</span> dispatch(<span class="string">'actionA'</span>)</div><div class="line">    commit(<span class="string">'gotOtherData'</span>, <span class="keyword">await</span> getOtherData())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h1><p>使用单一状态树，导致应用的所有状态集中到一个很大的对象。但是，当应用变得很大时，store 对象会变得臃肿不堪。<br>为了解决以上问题，Vuex 允许我们将 store 分割到模块（module）。每个模块拥有自己的 state、mutation、action、getters、甚至是嵌套子模块——从上至下进行类似的分割：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  <span class="keyword">state</span>: &#123; ... &#125;,</div><div class="line">  mutations: &#123; ... &#125;,</div><div class="line">  actions: &#123; ... &#125;,</div><div class="line">  getters: &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const moduleB = &#123;</div><div class="line">  <span class="keyword">state</span>: &#123; ... &#125;,</div><div class="line">  mutations: &#123; ... &#125;,</div><div class="line">  actions: &#123; ... &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  modules: &#123;</div><div class="line">    a: moduleA,</div><div class="line">    b: moduleB</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">store.<span class="keyword">state</span>.a // -&gt; moduleA 的状态</div><div class="line">store.<span class="keyword">state</span>.b // -&gt; moduleB 的状态</div></pre></td></tr></table></figure></p>
<h2 id="模块的局部状态"><a href="#模块的局部状态" class="headerlink" title="模块的局部状态"></a>模块的局部状态</h2><p>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的局部状态。<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  <span class="keyword">state</span>: &#123; count: <span class="number">0</span> &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    increment (<span class="keyword">state</span>) &#123;</div><div class="line">      // <span class="keyword">state</span> 模块的局部状态</div><div class="line">      <span class="keyword">state</span>.count++</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  getters: &#123;</div><div class="line">    doubleCount (<span class="keyword">state</span>) &#123;</div><div class="line">      return <span class="keyword">state</span>.count * <span class="number">2</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样，对于模块内部的 action，context.state 是局部状态，根节点的状态是 context.rootState:<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  // ...</div><div class="line">  actions: &#123;</div><div class="line">    incrementIfOddOnRootSum (&#123; <span class="keyword">state</span>, commit, rootState &#125;) &#123;</div><div class="line">      if ((<span class="keyword">state</span>.count + rootState.count) % <span class="number">2</span> === <span class="number">1</span>) &#123;</div><div class="line">        commit('increment')</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于模块内部的 getter，根节点状态会作为第三个参数：<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const moduleA = &#123;</div><div class="line">  // ...</div><div class="line">  getters: &#123;</div><div class="line">    sumWithRootCount (<span class="keyword">state</span>, getters, rootState) &#123;</div><div class="line">      return <span class="keyword">state</span>.count + rootState.count</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>模块内部的 action、mutation、和 getter 现在仍然注册在全局命名空间——这样保证了多个模块能够响应同一 mutation 或 action。你可以通过添加前缀或后缀的方式隔离各模块，以避免名称冲突。你也可能希望写出一个可复用的模块，其使用环境不可控。例如，我们想创建一个 todos 模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// types.js</span></div><div class="line"></div><div class="line"><span class="comment">// 定义 getter、action、和 mutation 的名称为常量，以模块名 `todos` 为前缀</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> DONE_COUNT = <span class="string">'todos/DONE_COUNT'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_ALL = <span class="string">'todos/FETCH_ALL'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> TOGGLE_DONE = <span class="string">'todos/TOGGLE_DONE'</span></div><div class="line"><span class="comment">// modules/todos.js</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'../types'</span></div><div class="line"></div><div class="line"><span class="comment">// 使用添加了前缀的名称定义 getter、action 和 mutation</span></div><div class="line"><span class="keyword">const</span> todosModule = &#123;</div><div class="line">  <span class="attr">state</span>: &#123; <span class="attr">todos</span>: [] &#125;,</div><div class="line">  <span class="attr">getters</span>: &#123;</div><div class="line">    [types.DONE_COUNT] (state) &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">actions</span>: &#123;</div><div class="line">    [types.FETCH_ALL] (context, payload) &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">mutations</span>: &#123;</div><div class="line">    [types.TOGGLE_DONE] (state, payload) &#123;</div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="模块动态注册"><a href="#模块动态注册" class="headerlink" title="模块动态注册"></a>模块动态注册</h2><p>在 store 创建之后，你可以使用 store.registerModule 方法注册模块<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">store</span><span class="selector-class">.registerModule</span>(<span class="string">'myModule'</span>, &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="模块化-1"><a href="#模块化-1" class="headerlink" title="模块化"></a>模块化</h1><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol>
<li>问题：loading加载<br>最近浏览到篇文章，普通loading只能通过控制单一的显示，而且多次条用很容易报错。<a href="https://github.com/deboyblog/vue-vuex-loading" title="结合Vuex制作一个完美的Loading组件" target="_blank" rel="external">vue-vuex-loading</a></li>
</ol>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><ul>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/shopping-cart" target="_blank" rel="external">shopping-cart</a></li>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/counter" target="_blank" rel="external">Counter</a></li>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/counter-hot" target="_blank" rel="external">Counter with Hot Reload</a></li>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/todomvc" target="_blank" rel="external">TodoMVC</a></li>
<li><a href="https://github.com/vuejs/vuex/tree/dev/examples/chat" target="_blank" rel="external">Flux Chat</a></li>
<li><a href="https://github.com/1657413883/blog-notes/issues/8" target="_blank" rel="external">浅谈Vuex</a></li>
<li><a href="https://segmentfault.com/a/1190000007667542" title="模块拆分多余零碎" target="_blank" rel="external">Vuex下Store的模块化拆分实践</a></li>
<li><a href="http://www.jianshu.com/p/caff7b8ab2cf" target="_blank" rel="external">Vuex 通俗版教程</a></li>
<li><a href="https://tech.meituan.com/vuex-code-analysis.html" target="_blank" rel="external">Vuex框架原理与源码分析</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;Vuex&lt;/strong&gt;是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。&lt;/p&gt;
&lt;h1 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h1&gt;&lt;p&gt;[ ] 严格模式&lt;br&gt;[ ] 测试&lt;br&gt;[ ] 插件&lt;br&gt;[ ] 热重载&lt;br&gt;[ ]&lt;br&gt;[x]&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="Vue" scheme="http://luuman.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Mobile Video</title>
    <link href="http://luuman.github.io/2017/03/25/Induce/HTML/Video/"/>
    <id>http://luuman.github.io/2017/03/25/Induce/HTML/Video/</id>
    <published>2017-03-25T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>今天我们就来说一说，移动端视频Video的使用兼容问题。略测试了一下，移动端是个重灾区。<br><a id="more"></a></p>
<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>autoplay</td>
<td>自动开始播放，不会停下来等着数据载入结束。</td>
</tr>
<tr>
<td>preload</td>
<td>视频预加载</td>
</tr>
<tr>
<td>controls</td>
<td>出现控制条</td>
</tr>
<tr>
<td>loop</td>
<td>循环播放</td>
</tr>
<tr>
<td>src</td>
<td>视频URL</td>
</tr>
<tr>
<td>poster</td>
<td>用于在用户播放或者跳帧之前展示</td>
</tr>
<tr>
<td>width</td>
<td>指定视频宽度（通常在css中指定）</td>
</tr>
<tr>
<td>height</td>
<td>指定视频高度（通常在css中指定）</td>
</tr>
<tr>
<td>buffered</td>
<td>读取到哪段时间范围内的媒体被缓存了</td>
</tr>
<tr>
<td>height</td>
<td></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>play</td>
<td>视频开始播放触发的事件（触发此事件，但是视频不一定可以播放）</td>
</tr>
<tr>
<td>playing</td>
<td>视频可以播放触发的事件</td>
</tr>
<tr>
<td>timeupdate</td>
<td>音频/视频（audio/video）的播放位置发生改变时触发</td>
</tr>
<tr>
<td>pause</td>
<td>视频停止播放触发的事件</td>
</tr>
<tr>
<td>ended</td>
<td>视频播放结束或中断触发的事件</td>
</tr>
</tbody>
</table>
<p>durationchange<br>progress</p>
<h1 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h1><h2 id="ended"><a href="#ended" class="headerlink" title="ended"></a>ended</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.$refs.video.addEventListener(<span class="string">'ended'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'ended'</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="兼容问题"><a href="#兼容问题" class="headerlink" title="兼容问题"></a>兼容问题</h1><h2 id="视频截图"><a href="#视频截图" class="headerlink" title="视频截图"></a>视频截图</h2><p>没有设置poster时，由于移动端设备多样，部分浏览器不支持</p>
<h2 id="是否显示播放按钮"><a href="#是否显示播放按钮" class="headerlink" title="是否显示播放按钮"></a>是否显示播放按钮</h2><p>移动端</p>
<h2 id="Android微信端使用的是微信自带的播放器插件"><a href="#Android微信端使用的是微信自带的播放器插件" class="headerlink" title="Android微信端使用的是微信自带的播放器插件"></a>Android微信端使用的是微信自带的播放器插件</h2><p>x5-video-player-type=”h5”，播放时不适用微信的播放器。</p>
<h2 id="iOS全屏播放"><a href="#iOS全屏播放" class="headerlink" title="iOS全屏播放"></a>iOS全屏播放</h2><p>没有添加playsinline【webkit-playsinline】，点击播放会弹出iphone自带的播放器，全屏播放。</p>
<h1 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h1><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video" target="_blank" rel="external">mozilla <video></video></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats" target="_blank" rel="external">HTML的媒体支持:audio和video元素</a></li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="https://segmentfault.com/a/1190000006857675#articleHeader7" target="_blank" rel="external">html5–移动端视频video的android兼容，去除播放控件、全屏等</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;今天我们就来说一说，移动端视频Video的使用兼容问题。略测试了一下，移动端是个重灾区。&lt;br&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://luuman.github.io/categories/HTML/"/>
    
    
      <category term="Video" scheme="http://luuman.github.io/tags/Video/"/>
    
  </entry>
  
  <entry>
    <title>Vue Router</title>
    <link href="http://luuman.github.io/2017/03/25/FrontFrame/Vue/VueRouter/"/>
    <id>http://luuman.github.io/2017/03/25/FrontFrame/Vue/VueRouter/</id>
    <published>2017-03-25T10:29:00.000Z</published>
    <updated>2017-08-09T05:58:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>Vue.js通过简洁的API提供高效的数据绑定和灵活的组件系统。最近在Github上看到了不少Vue的项目，很好奇，决定尝试尝试。</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>[ ] history的后退配置<br>[ ] 路由懒加载<br>[ ] 滚动行为<br>[ ] router.beforeEach<br><a id="more"></a></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> Active <span class="keyword">from</span> <span class="string">'VIEW/active/active'</span></div><div class="line"></div><div class="line">Vue.use(Router)</div><div class="line"></div><div class="line"><span class="comment">// 通过这个这个属性（是个函数），可以让应用像浏览器的原生表现那样，在按下 后退/前进 按钮时，简单地让页面滚动到顶部或原来的位置。</span></div><div class="line"><span class="keyword">const</span> scrollBehavior = <span class="function">(<span class="params">to, <span class="keyword">from</span>, savedPosition</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span> (savedPosition) &#123;</div><div class="line">    <span class="keyword">return</span> savedPosition</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</div><div class="line">	<span class="attr">mode</span>: <span class="string">'history'</span>,</div><div class="line">	<span class="comment">// history: 依赖 HTML5 History API 和服务器配置。</span></div><div class="line">  base: __dirname,</div><div class="line">  <span class="comment">// 默认值: “/”，应用的基路径，一般就是项目的根目录，webpack中有配置好。</span></div><div class="line">  linkActiveClass:<span class="string">'link-active'</span>,</div><div class="line">  scrollBehavior,</div><div class="line">  <span class="attr">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">      <span class="attr">name</span>: <span class="string">'Active'</span>,</div><div class="line">      <span class="attr">component</span>: Active</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">new</span> <span class="selector-tag">Vue</span>(&#123;</div><div class="line">  <span class="attribute">el</span>: <span class="string">'#app'</span>,</div><div class="line">  router,</div><div class="line">  <span class="attribute">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  <span class="attribute">components</span>: &#123; App &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h2><p>在 vue-router 的路由路径中使用『动态路径参数』（dynamic segment）来达到这个效果：</p>
<h3 id="路径参数"><a href="#路径参数" class="headerlink" title="路径参数"></a>路径参数</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">path:</span> <span class="string">'/user/:username'</span>, <span class="string">component:</span> User &#125;</div><div class="line"><span class="regexp">/user/</span>evan</div><div class="line">&#123; <span class="string">path:</span> <span class="string">'/user/:username'</span>, <span class="string">component:</span> User &#125;</div><div class="line"><span class="regexp">/user/</span>evan<span class="regexp">/post/</span><span class="number">123</span></div><div class="line"></div><div class="line">参数不能不传</div></pre></td></tr></table></figure>
<h3 id="响应路由参数的变化"><a href="#响应路由参数的变化" class="headerlink" title="响应路由参数的变化"></a>响应路由参数的变化</h3><p>例如从 /user/foo 导航到 user/bar，原来的组件实例会被复用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会再被调用。<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  <span class="string">'$route'</span> (to, form) &#123;</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<h3 id="高级匹配模式"><a href="#高级匹配模式" class="headerlink" title="高级匹配模式"></a>高级匹配模式</h3><p>vue-router 使用 <a href="https://github.com/pillarjs/path-to-regexp#parameters" target="_blank" rel="external">path-to-regexp</a> 作为路径匹配引擎，所以支持很多高级的匹配模式，例如：可选的动态路径参数、匹配零个或多个、一个或多个，甚至是自定义正则匹配。查看它的 文档 学习高阶的路径匹配，还有 这个例子 展示 vue-router 怎么使用这类匹配<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/'</span> &#125;,</div><div class="line"><span class="comment">// 参数前面使用“：”表示</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/params/:foo/:bar'</span> &#125;,</div><div class="line"><span class="comment">// 添加“？”使参数作为可选择</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/optional-params/:foo?'</span> &#125;,</div><div class="line"><span class="comment">// 匹配id为数字的链接</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/params-with-regex/:id(\\d+)'</span> &#125;,</div><div class="line"><span class="comment">// * 可以匹配任何东西</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/asterisk/*'</span> &#125;,</div><div class="line"><span class="comment">// 使用括号包裹，用？让其可选择</span></div><div class="line">make part <span class="keyword">of</span> th path optional by wrapping <span class="keyword">with</span> parens and add <span class="string">"?"</span></div><div class="line">&#123; <span class="attr">path</span>: <span class="string">'/optional-group/(foo/)?bar'</span> &#125;</div><div class="line"></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>/<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/params/foo/bar"</span>&gt;</span>/params/foo/bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/optional-params"</span>&gt;</span>/optional-params<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/optional-params/foo"</span>&gt;</span>/optional-params/foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/params-with-regex/123"</span>&gt;</span>/params-with-regex/123<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/params-with-regex/abc"</span>&gt;</span>/params-with-regex/abc<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/asterisk/foo"</span>&gt;</span>/asterisk/foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/asterisk/foo/bar"</span>&gt;</span>/asterisk/foo/bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/optional-group/bar"</span>&gt;</span>/optional-group/bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div><div class="line">&lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/optional-group/foo/bar"</span>&gt;</span>/optional-group/foo/bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="匹配优先级"><a href="#匹配优先级" class="headerlink" title="匹配优先级"></a>匹配优先级</h3><p>有时候，同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：谁先定义的，谁的优先级就最高。</p>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a><a href="http://jsfiddle.net/yyx990803/L7hscd8h/" target="_blank" rel="external">嵌套路由</a></h2><p>这里的 <router-view> 是最顶层的出口，渲染最高级路由匹配到的组件。同样地，一个被渲染组件同样可以包含自己的嵌套 <router-view>。例如，在 User 组件的模板添加一个 <router-view>：<br>children 配置就是像 routes 配置一样的路由配置数组，所以呢，你可以嵌套多层路由。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/user/:id'</span>, <span class="attribute">component</span>: User,</div><div class="line">  <span class="attribute">children</span>: [</div><div class="line">  	<span class="comment">// 空的 子路由</span></div><div class="line">  	&#123; <span class="attribute">path</span>: <span class="string">''</span>, <span class="attribute">component</span>: UserHome &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// 当 /user/:id/profile 匹配成功，</span></div><div class="line">      <span class="comment">// UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中</span></div><div class="line">      <span class="attribute">path</span>: <span class="string">'profile'</span>,</div><div class="line">      <span class="attribute">component</span>: UserProfile</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="comment">// 当 /user/:id/posts 匹配成功</span></div><div class="line">      <span class="comment">// UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中</span></div><div class="line">      <span class="attribute">path</span>: <span class="string">'posts'</span>,</div><div class="line">      <span class="attribute">component</span>: UserPosts</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></router-view></router-view></router-view></p>
<p>注意：以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。</p>
<h2 id="编程式的导航"><a href="#编程式的导航" class="headerlink" title="编程式的导航"></a>编程式的导航</h2><h3 id="router-push-location"><a href="#router-push-location" class="headerlink" title="router.push(location)"></a>router.push(location)</h3><blockquote>
<p>router.push(location, onComplete?, onAbort?)</p>
</blockquote>
<p>想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p>
<table>
<thead>
<tr>
<th style="text-align:center">声明式</th>
<th style="text-align:center">编程式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td>
<td style="text-align:center">router.push(…)</td>
</tr>
</tbody>
</table>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串</span></div><div class="line"><span class="keyword">this</span>.$router.push(<span class="string">'home'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 对象</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="string">path:</span> <span class="string">'home'</span> &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 命名的路由</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="string">name:</span> <span class="string">'user'</span>, <span class="string">params:</span> &#123; <span class="string">userId:</span> <span class="number">123</span> &#125;&#125;)</div><div class="line"><span class="keyword">this</span>.$route.params.userId</div><div class="line"></div><div class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></div><div class="line"><span class="keyword">this</span>.$router.push(&#123; <span class="string">path:</span> <span class="string">'register'</span>, <span class="string">query:</span> &#123; <span class="string">plan:</span> <span class="string">'private'</span> &#125;&#125;)</div><div class="line"><span class="keyword">this</span>.$route.query.plan</div></pre></td></tr></table></figure>
<h3 id="router-replace-location"><a href="#router-replace-location" class="headerlink" title="router.replace(location)"></a>router.replace(location)</h3><blockquote>
<p>router.replace(location, onComplete?, onAbort?)</p>
</blockquote>
<p>跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</p>
<table>
<thead>
<tr>
<th style="text-align:center">声明式</th>
<th style="text-align:center">编程式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td>
<td style="text-align:center">router.replace(…)</td>
</tr>
</tbody>
</table>
<h3 id="router-go-n"><a href="#router-go-n" class="headerlink" title="router.go(n)"></a>router.go(n)</h3><p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">-1</span>)</div><div class="line"></div><div class="line"><span class="comment">// 前进 3 步记录</span></div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment">// 如果 history 记录不够用，那就默默地失败呗</span></div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">-100</span>)</div><div class="line"><span class="keyword">this</span>.$router.go(<span class="number">100</span>)</div></pre></td></tr></table></figure>
<h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>通过一个名称来标识一个路由显得更方便一些<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/user/<span class="number">123</span></div><div class="line">&lt;router-link <span class="symbol">:to=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;User&lt;/router-link&gt;</span></div><div class="line">&lt;router-link <span class="symbol">:to=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;User&lt;/router-link&gt;</span></div><div class="line">this.<span class="variable">$router</span>.push(&#123; <span class="symbol">name:</span> <span class="string">'user'</span>, <span class="symbol">params:</span> &#123; <span class="symbol">userId:</span> <span class="number">123</span> &#125;&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a><a href="https://jsfiddle.net/posva/6du90epg/" target="_blank" rel="external">命名视图</a></h2><p>有时候想同时（同级）展示多个视图，而不是嵌套展示，例如创建一个布局，有 sidebar（侧导航） 和 main（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;router-<span class="keyword">view</span> class=<span class="string">"view one"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line">&lt;router-<span class="keyword">view</span> class=<span class="string">"view two"</span> name=<span class="string">"a"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line">&lt;router-<span class="keyword">view</span> class=<span class="string">"view three"</span> name=<span class="string">"b"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line"></div><div class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  route<span class="variable">s:</span> [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/'</span>,</div><div class="line">      component<span class="variable">s:</span> &#123;</div><div class="line">        defaul<span class="variable">t:</span> Foo,</div><div class="line">        <span class="variable">a:</span> Bar,</div><div class="line">        <span class="variable">b:</span> Baz</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="重定向-和-别名"><a href="#重定向-和-别名" class="headerlink" title="重定向 和 别名"></a>重定向 和 别名</h2><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><h4 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/a'</span>, redirect: <span class="string">'/b'</span> &#125;</div></pre></td></tr></table></figure>
<h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/a'</span>, redirect: &#123; name: <span class="string">'foo'</span> &#125;&#125;</div></pre></td></tr></table></figure>
<h4 id="动态返回重定向"><a href="#动态返回重定向" class="headerlink" title="动态返回重定向"></a>动态返回重定向</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/a'</span>, redirect: to =&gt; &#123;</div><div class="line">  // 方法接收 目标路由 作为参数</div><div class="line">  // return 重定向的 字符串路径/路径对象</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>别名：的功能让你可以自由地将 UI 结构映射到任意的 URL，而不是受限于配置的嵌套路由结构。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">path</span>: <span class="string">'/a'</span>, component: A, alias: <span class="string">'/b'</span> &#125;</div></pre></td></tr></table></figure></p>
<h2 id="HTML5-History-模式"><a href="#HTML5-History-模式" class="headerlink" title="HTML5 History 模式"></a>HTML5 History 模式</h2><p>vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。<br><a href="http://localhost:8680/#/Tap/btn/Github" target="_blank" rel="external">http://localhost:8680/#/Tap/btn/Github</a><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  <span class="keyword">mode</span>: <span class="string">'history'</span>,</div><div class="line">  route<span class="variable">s:</span> [...]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>/user/:id<br>不过这种模式要玩好，还需要后台配置支持。因为我们的应用是个单页客户端应用，如果后台没有正确的配置，当用户在浏览器直接访问 <a href="http://oursite.com/user/id" target="_blank" rel="external">http://oursite.com/user/id</a> 就会返回 404，这就不好看了。</p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>正如其名，vue-router 提供的导航钩子主要用来拦截导航，让它完成跳转或取消。有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的。</p>
<h2 id="导航钩子"><a href="#导航钩子" class="headerlink" title="导航钩子"></a>导航钩子</h2><h3 id="router-beforeEach"><a href="#router-beforeEach" class="headerlink" title="router.beforeEach"></a>router.beforeEach</h3><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">to</span>: Route, from: Route, <span class="keyword">next</span>: <span class="function"><span class="keyword">Function</span></span></div><div class="line">router.beforeEach((<span class="keyword">to</span>, from, <span class="keyword">next</span>) =&gt; &#123;</div><div class="line">  // <span class="keyword">to</span> 和 from 都是 路由信息对象</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="to-Route"><a href="#to-Route" class="headerlink" title="to: Route:"></a>to: Route:</h4><p>即将要进入的目标 路由对象</p>
<h4 id="from-Route"><a href="#from-Route" class="headerlink" title="from: Route:"></a>from: Route:</h4><p>当前导航正要离开的路由</p>
<h4 id="next-Function"><a href="#next-Function" class="headerlink" title="next: Function:"></a>next: Function:</h4><p>一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。</p>
<p>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed （确认的）。</p>
<p>next(false): 中断当前的导航。如果浏览器的 URL 改变了（可能是用户手动或者浏览器后退按钮），那么 URL 地址会重置到 from 路由对应的地址。</p>
<p>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</p>
<h3 id="router-afterEach"><a href="#router-afterEach" class="headerlink" title="router.afterEach"></a>router.afterEach</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">after</span> 钩子没有 next 方法，不能改变导航：</div><div class="line">router.<span class="title">afterEach</span>(route =&gt; &#123;</div><div class="line">  // ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="某个路由独享的钩子"><a href="#某个路由独享的钩子" class="headerlink" title="某个路由独享的钩子"></a>某个路由独享的钩子</h2><p>这些钩子与全局 before 钩子的方法参数是一样的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  <span class="attr">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/foo'</span>,</div><div class="line">      <span class="attr">component</span>: Foo,</div><div class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="组件内的钩子"><a href="#组件内的钩子" class="headerlink" title="组件内的钩子"></a>组件内的钩子</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const Foo = &#123;</div><div class="line">  template: `...`,</div><div class="line">  beforeRouteEnter (to, from, <span class="keyword">next</span>) &#123;</div><div class="line">    <span class="regexp">//</span> 在渲染该组件的对应路由被 confirm 前调用</div><div class="line">    <span class="regexp">//</span> 不！能！获取组件实例 `this`</div><div class="line">    <span class="regexp">//</span> 因为当钩子执行前，组件实例还没被创建</div><div class="line">  &#125;,</div><div class="line">  beforeRouteUpdate (to, from, <span class="keyword">next</span>) &#123;</div><div class="line">    <span class="regexp">//</span> 在当前路由改变，但是该组件被复用时调用</div><div class="line">    <span class="regexp">//</span> 举例来说，对于一个带有动态参数的路径 <span class="regexp">/foo/</span>:id，在 <span class="regexp">/foo/</span><span class="number">1</span> 和 <span class="regexp">/foo/</span><span class="number">2</span> 之间跳转的时候，</div><div class="line">    <span class="regexp">//</span> 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</div><div class="line">    <span class="regexp">//</span> 可以访问组件实例 `this`</div><div class="line">  &#125;,</div><div class="line">  beforeRouteLeave (to, from, <span class="keyword">next</span>) &#123;</div><div class="line">    <span class="regexp">//</span> 导航离开该组件的对应路由时调用</div><div class="line">    <span class="regexp">//</span> 可以访问组件实例 `this`</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><blockquote>
<p>导航完成之后获取：</p>
</blockquote>
<p>先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示『加载中』之类的指示。</p>
<blockquote>
<p>导航完成之前获取：</p>
</blockquote>
<p>导航完成前，在路由的 enter 钩子中获取数据，在数据获取成功后执行导航。</p>
<h3 id="导航完成后获取数据"><a href="#导航完成后获取数据" class="headerlink" title="导航完成后获取数据"></a>导航完成后获取数据</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">post</span>"&gt;</span></div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span>="<span class="title">loading</span>" <span class="title">v</span>-<span class="title">if</span>="<span class="title">loading</span>"&gt;</span></div><div class="line">      Loading...</div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">"error"</span> <span class="class"><span class="keyword">class</span>="<span class="title">error</span>"&gt;</span></div><div class="line"></div><div class="line">    &lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">"post"</span> <span class="class"><span class="keyword">class</span>="<span class="title">content</span>"&gt;</span></div><div class="line">      &lt;h2&gt;&lt;/h2&gt;</div><div class="line">      &lt;p&gt;&lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line">export <span class="keyword">default</span> &#123;</div><div class="line">  <span class="keyword">data</span> () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      loading: <span class="literal">false</span>,</div><div class="line">      post: <span class="literal">null</span>,</div><div class="line">      error: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  created () &#123;</div><div class="line">    <span class="comment">// 组件创建完后获取数据，</span></div><div class="line">    <span class="comment">// 此时 data 已经被 observed 了</span></div><div class="line">    <span class="keyword">this</span>.fetchData()</div><div class="line">  &#125;,</div><div class="line">  watch: &#123;</div><div class="line">    <span class="comment">// 如果路由有变化，会再次执行该方法</span></div><div class="line">    <span class="string">'$route'</span>: <span class="string">'fetchData'</span></div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    fetchData () &#123;</div><div class="line">      <span class="keyword">this</span>.error = <span class="keyword">this</span>.post = <span class="literal">null</span></div><div class="line">      <span class="keyword">this</span>.loading = <span class="literal">true</span></div><div class="line">      <span class="comment">// replace getPost with your data fetching util / API wrapper</span></div><div class="line">      getPost(<span class="keyword">this</span>.$route.params.id, (err, post) =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.loading = <span class="literal">false</span></div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="keyword">this</span>.error = err.toString()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.post = post</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在导航完成前获取数据"><a href="#在导航完成前获取数据" class="headerlink" title="在导航完成前获取数据"></a>在导航完成前获取数据</h3><p>我们在导航转入新的路由前获取数据。我们可以在接下来的组件的 beforeRouteEnter 钩子中获取数据，当数据获取成功后只调用 next 方法。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      post: <span class="literal">null</span>,</div><div class="line">      error: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</div><div class="line">    getPost(to.params.id, <span class="function">(<span class="params">err, post</span>) =&gt;</span> </div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="comment">// display some global error message</span></div><div class="line">        next(<span class="literal">false</span>)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</div><div class="line">          vm.post = post</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    axios.get(api).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">      next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</div><div class="line">        vm.votes = response.data.items</div><div class="line">        vm.jsons = <span class="number">1</span></div><div class="line">      &#125;)</div><div class="line">    &#125;, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">      next(<span class="literal">false</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 路由改变前，组件就已经渲染完了</span></div><div class="line">  <span class="comment">// 逻辑稍稍不同</span></div><div class="line">  watch: &#123;</div><div class="line">	  $route () &#123;&#125;</div><div class="line">    <span class="string">'$route'</span>: () &#123;</div><div class="line">      <span class="keyword">this</span>.post = <span class="literal">null</span></div><div class="line">      getPost(<span class="keyword">this</span>.$route.params.id, <span class="function">(<span class="params">err, post</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="keyword">this</span>.error = err.toString()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">this</span>.post = post</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="滚动行为"><a href="#滚动行为" class="headerlink" title="滚动行为"></a>滚动行为</h2><p>注意: 这个功能只在 HTML5 history 模式下可用。<br>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。 vue-router 能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  routes: [...],</div><div class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</div><div class="line">    <span class="comment">// return 期望滚动到哪个的位置</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>为了提高页面首屏加载时间，将相关的路由结合分割，提高页面效率。结合Vue的异步组件和Webpack的code splitting feature,轻松实现路由组件的懒加载。<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// require.ensure 是 Webpack 的特殊语法，用来设置 code-split point</span></div><div class="line">  <span class="comment">// （代码分块）</span></div><div class="line">  <span class="built_in">require</span>.ensure([<span class="string">'./Foo.vue'</span>], <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    resolve(<span class="built_in">require</span>(<span class="string">'./Foo.vue'</span>))</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="AMD-风格的-require"><a href="#AMD-风格的-require" class="headerlink" title="AMD 风格的 require"></a>AMD 风格的 require</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'./Foo.vue'</span>], resolve)</div></pre></td></tr></table></figure>
<h3 id="把组件按组分块"><a href="#把组件按组分块" class="headerlink" title="把组件按组分块"></a>把组件按组分块</h3><p>有时候我们想把某个路由下的所有组件都打包在同个异步 chunk 中。只需要 给 chunk 命名，提供 require.ensure 第三个参数作为 chunk 的名称:</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'./Foo.vue'</span>)), <span class="string">'group-foo'</span>)</div><div class="line"><span class="keyword">const</span> Bar = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'./Bar.vue'</span>)), <span class="string">'group-foo'</span>)</div><div class="line"><span class="keyword">const</span> Baz = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], <span class="function"><span class="params">()</span> =&gt;</span> r(<span class="built_in">require</span>(<span class="string">'./Baz.vue'</span>)), <span class="string">'group-foo'</span>)</div></pre></td></tr></table></figure>
<p>Webpack 将相同 chunk 下的所有异步模块打包到一个异步块里面 —— 这也意味着我们无须明确列出 require.ensure 的依赖（传空数组就行）。</p>
<p>webpack.config.js<br><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var webpackConfig = merge(baseWebpackConfig, &#123;</div><div class="line">  <span class="attribute">module</span>: &#123;</div><div class="line">    rules: utils<span class="variable">.styleLoaders</span>(&#123;</div><div class="line">      sourceMap: config<span class="variable">.build</span><span class="variable">.productionSourceMap</span>,</div><div class="line">      extract: true</div><div class="line">    &#125;)</div><div class="line">  &#125;,</div><div class="line">  // devtool: config<span class="variable">.build</span><span class="variable">.productionSourceMap</span> ? '#source-map' : false,</div><div class="line">  output: &#123;</div><div class="line">    path: config<span class="variable">.build</span><span class="variable">.assetsRoot</span>,</div><div class="line">    filename: utils<span class="variable">.assetsPath</span>('js/[name].[chunkhash]<span class="variable">.js</span>'),</div><div class="line">    // chunkFilename: utils<span class="variable">.assetsPath</span>('js/[id].[chunkhash]<span class="variable">.js</span>')</div><div class="line">    chunkFilename: utils<span class="variable">.assetsPath</span>('js/[name].[chunkhash]<span class="variable">.min</span><span class="variable">.js</span>')</div><div class="line">  &#125;,</div></pre></td></tr></table></figure></p>
<h1 id="API文档"><a href="#API文档" class="headerlink" title="API文档"></a>API文档</h1><h2 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h2><p><code>&lt;router-link&gt;</code> 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 <code>&lt;a&gt;</code> 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。<br>也可以使用：<code>&lt;a v-link=&quot;{name: &#39;user&#39;, params: {userId: 1}&quot;&gt;This is a user whose id is 1&lt;/a&gt;</code></p>
<h2 id="Props参数"><a href="#Props参数" class="headerlink" title="Props参数"></a>Props参数</h2><h3 id="to"><a href="#to" class="headerlink" title="to"></a>to</h3><p>表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。</p>
<blockquote>
<p>字符串</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 字符串 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>表达式</p>
</blockquote>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="comment">&lt;!-- 使用 v-bind 的 JS 表达式'home' --&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span><span class="template-variable">&#123; path: 'home' &#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span><span class="template-variable">&#123; name: 'user', params: &#123; userId: 123 &#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span><span class="template-variable">&#123; path: 'register', query: &#123; plan: 'private' &#125;</span><span class="xml"><span class="tag"><span class="string">&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; path: '/abc'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">replace</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<h3 id="append-相对路径"><a href="#append-相对路径" class="headerlink" title="append 相对路径"></a>append 相对路径</h3><p>设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"</span></span></span><span class="template-variable">&#123; path: 'relative/path'&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">append</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="tag-渲染标签"><a href="#tag-渲染标签" class="headerlink" title="tag 渲染标签"></a>tag 渲染标签</h3><p>有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span> <span class="attr">tag</span>=<span class="string">"li"</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure></li></router-link></p>
<h3 id="active-class"><a href="#active-class" class="headerlink" title="active-class"></a>active-class</h3><p>设置链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;router-link active-<span class="keyword">class</span> <span class="title">replace</span> <span class="title">to</span>=<span class="string">"/Tap/btn"</span>&gt;proImg&lt;/router-link&gt;</div><div class="line"></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">	mode: <span class="string">'history'</span>,</div><div class="line">	linkActiveClass:<span class="string">'link-active'</span>,</div><div class="line">	routes: []</div><div class="line">&#125;);</div><div class="line"></div><div class="line">.link-active&#123;&#125;</div></pre></td></tr></table></figure>
<h3 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h3><p>“是否激活”默认类名的依据是inclusive match （全包含匹配）。 举个例子，如果当前的路径是 /a 开头的，那么 <code>&lt;router-link to=&quot;/a&quot;&gt;</code> 也会被设置 CSS 类名。<br><a href="https://jsfiddle.net/8xrk1n9f/" target="_blank" rel="external">Active Links</a></p>
<h3 id="events"><a href="#events" class="headerlink" title="events"></a>events</h3><p>声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组。<br>默认值: ‘click’</p>
<h2 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h2><p><code>&lt;router-view&gt;</code> 组件是一个 functional 组件，渲染路径匹配到的视图组件。<code>&lt;router-view&gt;</code> 渲染的组件还可以内嵌自己的 <code>&lt;router-view&gt;</code>，根据嵌套路径，渲染嵌套组件。</p>
<h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;router-<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"view one"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line">&lt;router-<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"view two"</span> name=<span class="string">"a"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div><div class="line">&lt;router-<span class="keyword">view</span> <span class="keyword">class</span>=<span class="string">"view three"</span> name=<span class="string">"b"</span>&gt;&lt;/router-<span class="keyword">view</span>&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>keep-alive</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;transition&gt;</span></div><div class="line">  <span class="section">&lt;keep-alive&gt;</span></div><div class="line">    <span class="section">&lt;router-view&gt;</span><span class="section">&lt;/router-view&gt;</span></div><div class="line">  <span class="section">&lt;/keep-alive&gt;</span></div><div class="line"><span class="section">&lt;/transition&gt;</span></div></pre></td></tr></table></figure>
<h2 id="路由信息对象"><a href="#路由信息对象" class="headerlink" title="路由信息对象"></a>路由信息对象</h2><p>一个 <code>route object</code>（路由信息对象） 表示当前激活的路由的状态信息，包含了当前 URL 解析得到的信息，还有 URL 匹配到的 route records（路由记录）。</p>
<h3 id="route-Watcher"><a href="#route-Watcher" class="headerlink" title="$route Watcher"></a>$route Watcher</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">  <span class="string">'$route'</span> (<span class="keyword">to</span>, <span class="keyword">from</span>) &#123;</div><div class="line">    <span class="keyword">const</span> toDepth = <span class="keyword">to</span>.path.split(<span class="string">'/'</span>)</div><div class="line">    <span class="keyword">const</span> fromDepth = <span class="keyword">from</span>.path.split(<span class="string">'/'</span>)</div><div class="line">    <span class="keyword">if</span> (toDepth.length === fromDepth.length) &#123;</div><div class="line">      <span class="keyword">if</span> (toDepth[toDepth.length - <span class="number">1</span>] === <span class="string">''</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.transitionName = <span class="string">'vux-pop-in'</span></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.transitionName = <span class="string">'vux-pop-out'</span></div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>.transitionName = toDepth &lt; fromDepth ? <span class="string">'vux-pop-in'</span> : <span class="string">'vux-pop-out'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">router.beforeEach(<span class="function"><span class="params">(to, <span class="keyword">from</span>, <span class="built_in">next</span>)</span> =&gt;</span> &#123;</div><div class="line">  // to 和 <span class="keyword">from</span> 都是 路由信息对象</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="this-route"><a href="#this-route" class="headerlink" title="this.$route"></a>this.$route</h3><h4 id="route-path-绝对路径"><a href="#route-path-绝对路径" class="headerlink" title="$route.path 绝对路径"></a>$route.path 绝对路径</h4><h4 id="route-params-路由参数"><a href="#route-params-路由参数" class="headerlink" title="$route.params 路由参数"></a>$route.params 路由参数</h4><p>关于动态片段（如/user/:username)的键值对信息,如{username: ‘paolino’}</p>
<h4 id="route-query-URL查询参数"><a href="#route-query-URL查询参数" class="headerlink" title="$route.query URL查询参数"></a>$route.query URL查询参数</h4><p>请求参数，如/foo?user=1获取到query.user = 1</p>
<h4 id="route-hash"><a href="#route-hash" class="headerlink" title="$route.hash"></a>$route.hash</h4><p>当前路由的 hash 值 (带 #) ，如果没有 hash 值，则为空字符串。</p>
<h4 id="route-fullPath"><a href="#route-fullPath" class="headerlink" title="$route.fullPath"></a>$route.fullPath</h4><p>完成解析后的 URL，包含查询参数和 hash 的完整路径。</p>
<h4 id="route-matched"><a href="#route-matched" class="headerlink" title="$route.matched"></a>$route.matched</h4><p>数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line"><span class="symbol">  routes:</span> [</div><div class="line">    <span class="comment">// 下面的对象就是 route record</span></div><div class="line">    &#123; <span class="string">path:</span> <span class="string">'/foo'</span>, <span class="string">component:</span> Foo,</div><div class="line"><span class="symbol">      children:</span> [</div><div class="line">        <span class="comment">// 这也是个 route record</span></div><div class="line">        &#123; <span class="string">path:</span> <span class="string">'bar'</span>, <span class="string">component:</span> Bar &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>当 URL 为 /foo/bar，$route.matched 将会是一个包含从上到下的所有对象（副本）。</p>
<h4 id="route-name"><a href="#route-name" class="headerlink" title="$route.name"></a>$route.name</h4><p>当前路由的名称，如果有的话<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/user/:userId'</span>,</div><div class="line">  name: <span class="string">'user'</span>,</div><div class="line">  component: User</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Router-构造配置"><a href="#Router-构造配置" class="headerlink" title="Router 构造配置"></a>Router 构造配置</h2><h3 id="routes"><a href="#routes" class="headerlink" title="routes"></a>routes</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="comment">&lt;!-- 路径 --&gt;</span></div><div class="line">  path: string;</div><div class="line">  path: '',</div><div class="line">  <span class="comment">&lt;!-- 组件 --&gt;</span></div><div class="line">  component?: Component,</div><div class="line">  <span class="comment">&lt;!-- 命名路由 --&gt;</span></div><div class="line">  name?: string;</div><div class="line">  name?: '',</div><div class="line">  <span class="comment">&lt;!-- 命名视图组件 --&gt;</span></div><div class="line">  components?: &#123; [name: string]: Component &#125;,</div><div class="line">  redirect?: string | Location | Function,</div><div class="line">  alias?: string | Array<span class="tag">&lt;<span class="name">string</span>&gt;</span>,</div><div class="line">  <span class="comment">&lt;!-- 组件 --&gt;</span></div><div class="line">  children?: Array<span class="tag">&lt;<span class="name">RouteConfig</span>&gt;</span>;</div><div class="line">  children?: [],</div><div class="line">  <span class="comment">&lt;!-- 某个路由独享的钩子 --&gt;</span></div><div class="line">  beforeEnter?: (to: Route, from: Route, next: Function) =&gt; void,</div><div class="line">  beforeEnter: (to, from, next) =&gt; &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">  <span class="comment">&lt;!-- 路由元信息 --&gt;</span></div><div class="line">  meta?: any</div><div class="line">  meta: &#123; requiresAuth: true &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">mode:</span> <span class="string">'history'</span>,</div></pre></td></tr></table></figure>
<blockquote>
<p>hash: </p>
</blockquote>
<p>使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器。</p>
<blockquote>
<p>history: </p>
</blockquote>
<p>依赖 HTML5 History API 和服务器配置。查看 HTML5 History 模式.</p>
<blockquote>
<p>abstract: </p>
</blockquote>
<p>支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式。</p>
<h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><p>应用的基路径。例如，如果整个单页应用服务在 /app/ 下，然后 base 就应该设为 “/app/“。</p>
<h3 id="linkActiveClass"><a href="#linkActiveClass" class="headerlink" title="linkActiveClass"></a>linkActiveClass</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">linkActiveClass:</span><span class="string">'link-active'</span>,</div></pre></td></tr></table></figure>
<h3 id="scrollBehavior"><a href="#scrollBehavior" class="headerlink" title="scrollBehavior"></a>scrollBehavior</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</div><div class="line">    <span class="comment">// to 和 from 都是 路由信息对象</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">const scrollBehavior = (<span class="keyword">to</span>, <span class="keyword">from</span>, savedPosition) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (savedPosition) &#123;</div><div class="line">    <span class="comment">// savedPosition is only available for popstate navigations.</span></div><div class="line">    return savedPosition</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    const <span class="built_in">position</span> = &#123;&#125;</div><div class="line">    <span class="comment">// new navigation.</span></div><div class="line">    <span class="comment">// scroll to anchor by returning the selector</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">to</span>.hash) &#123;</div><div class="line">      <span class="built_in">position</span>.selector = <span class="keyword">to</span>.hash</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// check if any matched route config has meta that requires scrolling to top</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">to</span>.matched.some(m =&gt; m.meta.scrollToTop)) &#123;</div><div class="line">      <span class="comment">// cords will be used if no selector is provided,</span></div><div class="line">      <span class="comment">// or if the selector didn't match any element.</span></div><div class="line">      <span class="built_in">position</span>.x = <span class="number">0</span></div><div class="line">      <span class="built_in">position</span>.y = <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// if the returned position is falsy or an empty object,</span></div><div class="line">    <span class="comment">// will retain current scroll position.</span></div><div class="line">    return <span class="built_in">position</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="导航钩子-1"><a href="#导航钩子-1" class="headerlink" title="导航钩子"></a>导航钩子</h3><p>增加全局的导航钩子</p>
<h4 id="router-beforeEach-guard"><a href="#router-beforeEach-guard" class="headerlink" title="router.beforeEach(guard)"></a>router.beforeEach(guard)</h4><h4 id="router-afterEach-hook"><a href="#router-afterEach-hook" class="headerlink" title="router.afterEach(hook)"></a>router.afterEach(hook)</h4><h3 id="编程式导航"><a href="#编程式导航" class="headerlink" title="编程式导航"></a>编程式导航</h3><p>动态的导航到一个新 url</p>
<h4 id="router-push-location-1"><a href="#router-push-location-1" class="headerlink" title="router.push(location)"></a>router.push(location)</h4><h4 id="router-replace-location-1"><a href="#router-replace-location-1" class="headerlink" title="router.replace(location)"></a>router.replace(location)</h4><h4 id="router-go-n-到达"><a href="#router-go-n-到达" class="headerlink" title="router.go(n) 到达"></a>router.go(n) 到达</h4><h4 id="router-back-后退"><a href="#router-back-后退" class="headerlink" title="router.back() 后退"></a>router.back() 后退</h4><h4 id="router-forward-前进"><a href="#router-forward-前进" class="headerlink" title="router.forward() 前进"></a>router.forward() 前进</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">router.getMatchedComponents(location?)</div><div class="line"></div><div class="line">返回目标位置或是当前路由匹配的组件数组（是数组的定义/构造类，不是实例）。通常在服务端渲染的数据预加载时时候。</div><div class="line"></div><div class="line">router.resolve(location, current?, append?)</div><div class="line"></div><div class="line">2.1.0+</div><div class="line"></div><div class="line">解析目标位置（格式和 &lt;router-link&gt; 的 <span class="keyword">to</span> prop 一样），返回包含如下属性的对象：</div><div class="line"></div><div class="line">&#123;</div><div class="line">  location: Location;</div><div class="line">  route:<span class="built_in"> Route;</span></div><div class="line">  href: string;</div><div class="line">&#125;</div><div class="line">router.addRoutes(routes)</div><div class="line"></div><div class="line">2.2.0+</div><div class="line"></div><div class="line">动态添加更多的路由规则。参数必须是一个符合 routes 选项要求的数组。</div><div class="line"></div><div class="line">router.onReady(callback)</div><div class="line"></div><div class="line">2.2.0+</div><div class="line"></div><div class="line">添加一个会在第一次路由跳转完成时被调用的回调函数。此方法通常用于等待异步的导航钩子完成，比如在进行服务端渲染的时候。</div></pre></td></tr></table></figure>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://router.vuejs.org/en/#" target="_blank" rel="external">router</a></li>
<li><p><a href="https://zhuanlan.zhihu.com/p/28156233" target="_blank" rel="external">vue-router总结</a></p>
</li>
<li><p><a href="&quot;&quot;"></a></p>
</li>
<li><a href="&quot;&quot;"></a></li>
<li><a href="&quot;&quot;"></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;Vue.js通过简洁的API提供高效的数据绑定和灵活的组件系统。最近在Github上看到了不少Vue的项目，很好奇，决定尝试尝试。&lt;/p&gt;
&lt;h1 id=&quot;TODO&quot;&gt;&lt;a href=&quot;#TODO&quot; class=&quot;headerlink&quot; title=&quot;TODO&quot;&gt;&lt;/a&gt;TODO&lt;/h1&gt;&lt;p&gt;[ ] history的后退配置&lt;br&gt;[ ] 路由懒加载&lt;br&gt;[ ] 滚动行为&lt;br&gt;[ ] router.beforeEach&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="Vue" scheme="http://luuman.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Mac 快捷键</title>
    <link href="http://luuman.github.io/2017/03/21/Tool/Sublime/sublimeMac/"/>
    <id>http://luuman.github.io/2017/03/21/Tool/Sublime/sublimeMac/</id>
    <published>2017-03-21T10:29:20.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><p>⌘：command<br>⌃：control<br>⌥：option<br>⇧：shift<br>↩：enter<br>⌫：delete</p>
<h3 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h3><pre><code>⌃ + ⇧ + T：打开文件夹控制台
⌘ + ⌥ + ⌃ + -&gt;：网易云下一曲
⌘ + ⌥ + ⌃ + &lt;-：网易云上一曲
⌘ + ⌥ + P：网易云暂停k
</code></pre><h3 id="通用（General）"><a href="#通用（General）" class="headerlink" title="通用（General）"></a>通用（General）</h3><pre><code>↑↓←→：上下左右移动光标，注意不是不是KJHL！
Alt：调出菜单
</code></pre><h3 id="整理（clear）"><a href="#整理（clear）" class="headerlink" title="整理（clear）"></a>整理（clear）</h3><pre><code>Tab：缩进：自动完成
Shift+Tab：去除缩进
Ctrl+KT：折叠属性
Ctrl+K0：展开所有
</code></pre><h3 id="窗口（Window）"><a href="#窗口（Window）" class="headerlink" title="窗口（Window）"></a>窗口（Window）</h3><pre><code>⌘ + 1、2、3：切换文件
</code></pre><h3 id="移动（Move）"><a href="#移动（Move）" class="headerlink" title="移动（Move）"></a>移动（Move）</h3><pre><code>⌘ + &lt;-：行首
⌘ + -&gt;：行尾
⌘ + ↑：头部
⌘ + ↓：尾部
⌘ + ⇧ + ↑：向上全选
⌘ + ⇧ + ↓：向下全选
⌘ + ⌃ + ↑/↓：移动当前行
Ctrl+←/→：进行逐词移动
</code></pre><!--     Ctrl+Shift+←/→进行逐词选择
    Ctrl+↑/↓移动当前显示区域
    Ctrl+Shift+↑/↓移动当前行
    Ctrl+D：选择当前光标所在的词并高亮该词所有出现的位置，再次Ctrl+D选择该词出现的下一个位置，在多重选词的过程中，使用Ctrl+K进行跳过，使用Ctrl+U进行回退，使用Esc退出多重
### 编辑
    Ctrl+Shift+L：将当前选中区域打散
### 文件（File）
    Ctrl+N：在当前窗口创建一个新标签
    Ctrl+O：打开文件
    Ctrl+Shift+T：打开最近关闭的文件
    Ctrl+S：保存
    Ctrl+Shift+S：另存为
    Ctrl+Shift+N：创建新窗口
    Ctrl+Shift+W：关闭窗口
    Ctrl+W：关闭当前标签，当窗口内没有标签时会关闭该窗口
### 编辑（Edit）
    Ctrl+Z：撤销
    Ctrl+Y：恢复
### 取消选择（Undo Selection）
    Ctrl+U：智能撤销
    Ctrl+ Shift+U：智能重做
    Ctrl+ Shift+V：粘贴并缩进
    Ctrl+K，Ctrl+V：
### 行（Line）
    Ctrl +]：缩进
    Ctrl +[：反缩进
    Ctrl + Shift + Up：上移一行 
    Ctrl + Shift + Down：下移一行
    Ctrl + Shift + D：复制行(加倍)
    Ctrl + Shift + K：删除行
    Ctrl + J：连接行
### 文本（Text）
    Ctrl+Shift+Enter：在当前行上面增加一行并跳至该行
    Ctrl+Alt+Enter：替换所有关键字匹配
    Ctrl+Enter：在当前行下面新增一行然后跳至该行
    Ctrl+Delete：删除单词前部
    Ctrl+Backspace：删除单词后部
    Ctrl+K，Ctrl+K：从光标处删除至行尾
    Ctrl+K+Backspace：从光标处删除至行首
    Ctrl+T：前后调转
### 注释（Comment）
    Ctrl+/：注释（如已选择内容，同“Ctrl+Shift+/”效果）
    Ctrl+Shift：/：块注释(注释已选择内容)
    Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的
### 标签（Tag）
    Alt+.：闭合当前标签
    Ctrl+Shift+A：选择标签(可重复)
    Ctrl+Shift+W：选择区域被标签包含
### （Mark）
    Ctrl+K， Alt+Space：设置记号
    Ctrl+K，Alt+A：选择到记号
    Ctrl+K，Alt+W：删除到记号
    Ctrl+K，Alt+S：交换(移动)记号
    Ctrl+K，Alt+G：移除记号
    Ctrl+K，Alt+Y：Yank
    Ctrl+K，Alt+J：取消所有折叠
### 代码折叠（Code Folding）
    Ctrl+Shift+[：折叠代码
    Ctrl+Shift+]：展开代码
    （Convert Case）
    Ctrl+K，Ctrl+U：改为大写
    Ctrl+K，Ctrl+L：改为小写
### （Wrap）
    Alt+Q：
    Ctrl+Space：显示提示
    F9：按行排序
    Ctrl+F9：按行排序(区分大小写)
### 选择（Selection）
    Ctrl+ Shift+L：分割为多光标(选择多行时)
    Ctrl+ Alt +Up：向上一行添加光标
    Ctrl+ Alt +Down：向下一行添加光标
    Escape单光标
### 扩展（Expand）
    Ctrl+A：全选
    Ctrl+L：选择整行（按住-继续选择下行）
    Ctrl+D：选词：（按住-继续选择下个相同的字符串）
    Ctrl+Shift+Space：快速选择当前作用域（Scope）的内容
    Ctrl+Shift+M：快速选择括号间的内容{}
    Ctrl+Shift+J：快速选择同缩进的内容
    Ctrl+Shift+A：选择光标位置父标签对儿
### 查找（Find）
    Ctrl+F：进行标准查找
    F3：跳至当前关键字下一个位置
    Shift+F3：跳到当前关键字上一个位置
    Ctrl +I：
    Ctrl +H：进行标准替换
    Ctrl+Shift+H：替换当前关键字
    Ctrl +F3：快速查询
    Alt +F3：选中当前关键字出现的所有位置
    Ctrl+D：快速查询下一个(多光标)
    Ctrl+K，Ctrl+D：快速查询跳过下一个(多光标)
    Ctrl+E：字
    Ctrl+Shift+E：字
    Ctrl+Shift+F：多文件搜索&替换
### 视图（View）
    Ctrl+K，Ctrl+B：侧边栏开关Side Bar
    Ctrl+`：调出控制台
    F11：切换普通全屏
    Shift+F11：切换无干扰全屏
    Alt+Shift+2：进行左右分屏
    Alt+Shift+5：进行上下左右分屏
    Alt+Shift+8：进行上下分屏。
    分屏，使用Ctrl+数字键跳转到指定屏，使用Ctrl+Shift+数字键将当前屏移动到指定屏
### 组（Group）：
    Ctrl+K，Ctrl+Up：
    Ctrl+K，Ctrl+ Shift+ Up：
    Ctrl+K，Ctrl+Down：
### 焦点小组（Focus Group）：
    Ctrl+K，Ctrl+Right：
    Ctrl+K，Ctrl+ Left：
    Ctrl+1：组间切换焦点
    Ctrl+ Shift +1：移动文件到组
    Syntax语法和文件类型、indentation缩排、Line Endings行尾结束符号
    F6：拼写检查
    Ctrl + F6：下一个错误
    Ctrl+Shift+ F6：上一个错误
### 跳转（Goto）
    Ctrl+P：跳转到指定文件
    Ctrl+R：跳转到指定符号
    Ctrl+Shift+R：
    F12：
    Ctrl+G：跳转到指定行号
    Alt+-：跳转到底部
    Alt+Shift +-：
### 文件开关（Switch File）
    Ctrl+Pagedown：下一个文件
    Ctrl+Pageup：上一个文件
    Ctrl+Tab：下一个文件(stack)
    Ctrl+Shift + Tab：上一个文件(stack)
    Alt+O：
    Alt+1：最近打开文件
### 滚动（Scroll）
    Ctrl+K，Ctrl+C：滚动到光标处
    Ctrl+Up：向上滚动一行(定光标)
    Ctrl+Down：向下滚动一行(定光标)
### 书签（Boolmarks）
    Ctrl+F2：设置书签
    F2：下一个书签
    Shift+F2：上一个书签
    Ctrl+Shift+F2：清除书签
    Alt+F2：全选书签
    Ctrl+M：在起始括号和结尾括号间切换
### 工具（Tools）
    Ctrl+Shift+P：调出命令板（Command Palette）
    Ctrl +B：
    Ctrl+Shift+B：
    Ctrl +Break：
    F4：
    Shift+ F4：
    Ctrl +Q：
    Ctrl+Shift+Q：
### 项目（Project）
    Ctrl+Alt+P：切换项目

#### 首选项（Preferences）
    Ctrl+ Keypad Plus：
    Ctrl+Shift+Keypad Plus：
    Help（帮助）


### Chrome
    ⌘ + ⌥ + J：调试工具
    ⌘ + 1、2、3：切换文件
    ⌘ + ⌥ + L：下载
    ⌘ + R：刷新

#### 标签页和窗口快捷键
    ⌘-N 打开新窗口。
    ⌘-T 打开新标签页。
    ⌘-Shift-N   在隐身模式下打开新窗口。
    按 ⌘-O，然后选择文件。   在 Chrome 浏览器中打开计算机中的文件。
    按住 ⌘ 的同时点击链接。或用鼠标中键（或鼠标滚轮）点击链接。 从后台在新标签页中打开链接。
    按住 ⌘-Shift 的同时点击链接。或按住 Shift 键的同时用鼠标中键（或鼠标滚轮）点击链接。  在新标签页中打开链接并切换到刚打开的标签页。
    按住 Shift 键的同时点击链接。  在新窗口中打开链接。
    ⌘-Shift-T   重新打开上次关闭的标签页。Chrome 浏览器可记住最近关闭的 10 个标签页。
    将标签页拖出标签栏。  在新窗口中打开标签页。
    将标签页从标签栏拖到现有窗口中。    在现有窗口中打开标签页。
    同时按 ⌘-Option 和向右箭头键。    切换到下一个标签页。
    同时按 ⌘-Option 和向左箭头键。    切换到上一个标签页。
    ⌘-W 关闭当前标签页或弹出窗口。
    ⌘-Shift-W   关闭当前窗口。
    点击并按住浏览器工具栏中的后退或前进箭头。   在新标签页中显示浏览历史记录。
    按 Delete 或 ⌘-[  转到当前标签页的上一页浏览历史记录。
    按 Shift-Delete 或 ⌘-]    转到当前标签页的下一页浏览历史记录。
    按住 Shift 键的同时点击窗口左上角的 + 按钮。 最大化窗口。
    ⌘-M 最小化窗口。
    ⌘-H 隐藏 Chrome 浏览器。
    ⌘-Option-H  隐藏其他所有窗口。
    ⌘-Q 关闭 Chrome 浏览器。

#### Chrome 浏览器功能快捷键

    ⌘-Shift-B   打开和关闭书签栏。
    ⌘-Option-B  打开书签管理器。
    ⌘-, 打开“偏好设置”对话框。
    ⌘-Y 打开“历史记录”页。
    ⌘-Shift-J   打开“下载内容”页。
    ⌘-Shift-Delete  打开“清除浏览数据”对话框。

#### 地址栏快捷键

    键入搜索字词，然后按 Enter 键。 使用默认搜索引擎进行搜索。
    键入搜索引擎关键字，按空格键，然后键入搜索字词，再按 Enter 键。 使用与关键字相关联的搜索引擎进行搜索。
    首先键入搜索引擎网址，然后在系统提示时按 Tab 键，键入搜索字词，再按 Enter 键。   使用与网址相关联的搜索引擎进行搜索。
    键入网址，然后按 ⌘-Enter。   在新后台标签页中打开网址。
    ⌘-L 突出显示网址。
    ⌘-Option-F  在地址栏中输入“?”。在问号后键入搜索字词可用默认搜索引擎执行搜索。
    同时按 Option 和向左箭头键。  将光标移到地址栏中的前一个关键字词
    同时按 Option 和向右箭头键。  在地址栏中将光标移到下一个关键字词
    同时按 Shift-Option 和向左箭头键。    在地址栏中突出显示上一关键字词
    同时按 Shift-Option 和向右箭头键。    在地址栏中突出显示下一关键字词
    ⌘-Delete    在地址栏中删除光标前的字词
    在地址栏菜单中按 Page Up 或 Page Down。   在菜单中选择上一条目或下一条目。

#### 网页快捷键

    ⌘-P 打印当前网页。
    ⌘-Shift-P   打开“网页设置”对话框。
    ⌘-S 保存当前网页。
    ⌘-Shift-I   通过电子邮件发送当前网页。
    ⌘-R 重新载入当前网页。
    ⌘-, 停止载入当前网页。
    ⌘-F 打开查找栏。
    ⌘-G 在查找栏中查找下一条与输入内容相匹配的内容。
    ⌘-Shift-G 或 Shift-Enter 在查找栏中查找上一条与输入内容相匹配的内容。
    ⌘-E 使用所选内容查找。
    ⌘-J 跳到所选内容。
    ⌘-Option-I  打开“开发人员工具”。
    ⌘-Option-J  打开“JavaScript 控制台”。
    ⌘-Option-U  打开当前网页的源代码。
    按住 Option 键，然后点击链接。 下载链接目标。
    将链接拖到书签栏中。  将链接保存为书签。
    ⌘-D 将当前网页保存为书签。
    ⌘-Shift-D   将所有打开的标签页以书签的形式保存在新文件夹中。
    ⌘-Shift-F   在全屏模式下打开网页。再按一次 ⌘-Shift-F 可退出全屏模式。
    ⌘-+ 放大网页上的所有内容。
    ⌘ 和 -   缩小网页上的所有内容。
    ⌘-0 将网页上的所有内容恢复到正常大小。
    ⌘-Shift-H   在当前标签页中打开主页。
    空格键 向下滚动网页。
    ⌘-Option-F  搜索网页。

#### 文本快捷键

    ⌘-C 将突出显示的内容复制到剪贴板中。
    ⌘-Option-C  将您正在查看的网页的网址复制到剪贴板中。
    ⌘-V 从剪贴板中粘贴内容。
    ⌘-Shift-Option-V    粘贴内容并应用周围文本的格式。
    ⌘-X 或 Shift-Delete  删除突出显示的内容并将其复制到剪贴板中。
    ⌘-Z 撤消最后一步操作。
    ⌘-Shift-Z   重复最后一步操作。
    ⌘-X 删除突出显示的内容并将其保存到剪贴板中（剪切）。
    ⌘-A 选择当前网页上的所有文本。
    ⌘-: 打开“拼写和语法”对话框。
    ⌘-; 检查当前网页上的拼写和语法。 -->]]></content>
    
    <summary type="html">
    
      来到GitHub这么长时间，才开始真真的了解GitHub，这个国外的代码托管平台，充满着大牛的身影。
    
    </summary>
    
      <category term="Tool" scheme="http://luuman.github.io/categories/Tool/"/>
    
    
      <category term="Sublime" scheme="http://luuman.github.io/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>React初探</title>
    <link href="http://luuman.github.io/2017/02/14/FrontFrame/React/React/"/>
    <id>http://luuman.github.io/2017/02/14/FrontFrame/React/React/</id>
    <published>2017-02-14T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h2><p>React 起源于 Facebook 的内部F8项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。<br>React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。<br>React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。E6语法。</p>
<h3 id="React-特点"><a href="#React-特点" class="headerlink" title="React 特点"></a>React 特点</h3><ol>
<li>声明式设计 −React采用声明范式，可以轻松描述应用。</li>
<li>高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。</li>
<li>灵活 −React可以与已知的库或框架很好地配合。</li>
<li>JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。</li>
<li>组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li>
<li>单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。</li>
</ol>
<ul>
<li><a href="http://facebook.github.io/react/" target="_blank" rel="external">官网地址</a><a id="more"></a>
</li>
</ul>
<h2 id="简单Demo"><a href="#简单Demo" class="headerlink" title="简单Demo"></a>简单Demo</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello React!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/react-0.14.7/build/react-dom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/react/browser.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="javascript"></span></div><div class="line">		ReactDOM.render(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line">		);</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>实例中我们引入了三个库： react.min.js 、react-dom.min.js 和 browser.min.js：<br>react.min.js - React 的核心库<br>react-dom.min.js - 提供与 DOM 相关的功能<br>browser.min.js - 用于将 JSX 语法转为 JavaScript 语法</p>
<h3 id="React代码"><a href="#React代码" class="headerlink" title="React代码"></a>React代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="React-JSX语法"><a href="#React-JSX语法" class="headerlink" title="React JSX语法"></a>React JSX语法</h2><p>React 使用 JSX 来替代常规的 JavaScript。JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。我们不需要一定使用 JSX，但它有以下优点：</p>
<blockquote>
<p>JSX 执行更快，因为它在编译为 JavaScript 代码后进行了优化。<br>它是类型安全的，在编译过程中就能发现错误。<br>使用 JSX 编写模板更加简单快速。</p>
</blockquote>
<h3 id="简单嵌套元素"><a href="#简单嵌套元素" class="headerlink" title="简单嵌套元素"></a>简单嵌套元素</h3><p>JSX 看起来类似 HTML ，我们可以看下实例:<br>ReactDOM.render方法接受两个参数：<br>一个虚拟 DOM 节点和一个真实 DOM 节点，作用是将虚拟 DOM 挂载到真实 DOM。</p>
<h4 id="实例：Hello-world"><a href="#实例：Hello-world" class="headerlink" title="实例：Hello, world!"></a>实例：Hello, world!</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(content,element);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,<span class="built_in">document</span>.getElementById(<span class="string">'example'</span>));</div></pre></td></tr></table></figure>
<p><a href="demo/index1.html">index1</a></p>
<h3 id="复杂嵌套元素"><a href="#复杂嵌套元素" class="headerlink" title="复杂嵌套元素"></a>复杂嵌套元素</h3><p>我们可以在以上代码中嵌套多个 HTML 标签，需要使用一个 div 元素包裹它，实例中的 p 元素添加了自定义属性 data-myattribute，添加自定义属性需要使用 data- 前缀。</p>
<h4 id="实例：文字"><a href="#实例：文字" class="headerlink" title="实例：文字"></a>实例：文字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎学习 React<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-myattribute</span> = <span class="string">"somevalue"</span>&gt;</span>这是一个很不错的 JavaScript 库!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">    mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index2.html">index2</a></p>
<h3 id="JavaScript-表达式"><a href="#JavaScript-表达式" class="headerlink" title="JavaScript 表达式"></a>JavaScript 表达式</h3><p>我们可以在 JSX 中使用 JavaScript 表达式。表达式写在花括号 {} 中。实例如下：</p>
<h4 id="实例：计算"><a href="#实例：计算" class="headerlink" title="实例：计算"></a>实例：计算</h4><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml">ReactDOM.render(</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="template-variable">&#123;1+1&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,mountNode</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index3.html">index3</a></p>
<blockquote>
<p>判断语句</p>
</blockquote>
<p>在 JSX 中不能使用 if else 语句，但可以使用 conditional (三元运算) 表达式来替代。以下实例中如果变量 i 等于 1 浏览器将输出 true, 如果修改 i 的值，则会输出 false.</p>
<h4 id="实例：判断"><a href="#实例：判断" class="headerlink" title="实例：判断"></a>实例：判断</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> i = <span class="number">1</span>;</div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;i == 1 ? 'True!' : 'False'&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,</div><div class="line">    mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index4.html">index4</a></p>
<h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><p>React 推荐使用内联样式。我们可以使用 camelCase 语法来设置内联样式. React 会在指定元素数字后自动添加 px 。以下实例演示了为 h1 元素添加 myStyle 内联样式：</p>
<h4 id="实例：CSS样式"><a href="#实例：CSS样式" class="headerlink" title="实例：CSS样式"></a>实例：CSS样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> myStyle = &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">100</span>,</div><div class="line">    <span class="attr">lineHeight</span>: <span class="string">'30px'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#FF0000'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&#123;myStyle&#125;</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,mountNode</div><div class="line">);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span> = <span class="string">&#123;&#123;fontSize:</span> <span class="attr">100</span>,<span class="attr">lineHeight:</span> '<span class="attr">30px</span>',<span class="attr">color:</span> '#<span class="attr">FF0000</span>'&#125;&#125;&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,mountNode);</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span> = <span class="string">'class_name'</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,mountNode);</div></pre></td></tr></table></figure>
<p><a href="demo/index5.html">index5</a></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释需要写在花括号中，实例如下：</p>
<h3 id="实例：注释"><a href="#实例：注释" class="headerlink" title="实例：注释"></a>实例：注释</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="xml">ReactDOM.render(</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="template-tag">&#123;/*注释<span class="name">...</span>*/&#125;</span><span class="xml"></span></div><div class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span>,mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="React-Component组件"><a href="#React-Component组件" class="headerlink" title="React.Component组件"></a>React.Component组件</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h3 id="HTML-标签-vs-React-组件"><a href="#HTML-标签-vs-React-组件" class="headerlink" title="HTML 标签 vs. React 组件"></a>HTML 标签 vs. React 组件</h3><p>React 可以渲染 HTML 标签 (strings) 或 React 组件 (classes)。要渲染 HTML 标签，只需在 JSX 里使用小写字母的标签名。<br>要渲染 React 组件，只需创建一个大写字母开头的本地变量。</p>
<h4 id="实例：创建组件"><a href="#实例：创建组件" class="headerlink" title="实例：创建组件"></a>实例：创建组件</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=<span class="string">"foo"</span>&gt;arr&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h4 id="实例：组件嵌套"><a href="#实例：组件嵌套" class="headerlink" title="实例：组件嵌套"></a>实例：组件嵌套</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;div className=<span class="string">"MyComponent"</span>&gt;arr&lt;/div&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;<span class="type">MyComponent</span> /&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<p>React 的 JSX 使用大、小写的约定来区分本地组件的类和 HTML 标签。</p>
<blockquote>
<p>注意:<br>由于 JSX 就是 JavaScript，一些标识符像 class 和 for 不建议作为 XML 属性名。作为替代，React DOM 使用 className 和 htmlFor 来做对应的属性。</p>
</blockquote>
<h4 id="实例：组件语法"><a href="#实例：组件语法" class="headerlink" title="实例：组件语法"></a>实例：组件语法</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> &lt;div className=<span class="string">"HelloMessage"</span>&gt;arr&lt;/div&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=<span class="string">"HelloMessage"</span>&gt;arr&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>React.Component方法用于生成一个组件类 HelloMessage。<hellomessage> 实例组件类并输出信息。</hellomessage></p>
<blockquote>
<p>注意：原生 HTML 元素名以小写字母开头，而自定义的 React 类名以大写字母开头，比如 HelloMessage 不能写成 helloMessage。除此之外还需要注意组件类只能包含一个顶层标签，否则也会报错。<br>如果我们需要向组件传递参数，可以使用 this.props 对象,实例如下：</p>
</blockquote>
<h4 id="实例：获取父元素的值"><a href="#实例：获取父元素的值" class="headerlink" title="实例：获取父元素的值"></a>实例：获取父元素的值</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DivElement</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=<span class="string">"foo"</span>&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">DivElement</span> name=<span class="string">"Runoob"</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<p>以上实例中 name 属性通过 this.props.name 来获取（自身的数字）。<br>注意，在添加属性时， class 属性需要写成 className ，for 属性需要写成 htmlFor ，这是因为 class 和 for 是 JavaScript 的保留字。</p>
<h3 id="复合组件"><a href="#复合组件" class="headerlink" title="复合组件"></a>复合组件</h3><p>通过创建多个组件来合成一个组件，即把组件的不同功能点进行分离。<br>以下实例我们实现了输出网站名字和网址的组件：</p>
<h4 id="实例：链接"><a href="#实例：链接" class="headerlink" title="实例：链接"></a>实例：链接</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=&#123;<span class="keyword">this</span>.props.name&#125;&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.props.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.props.site&#125; /&gt;&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> name=<span class="string">"菜鸟教程"</span> site=<span class="string">" http://www.runoob.com"</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h2 id="React-State-状态"><a href="#React-State-状态" class="headerlink" title="React State(状态)"></a>React State(状态)</h2><p>把组件看成是一个状态机（State Machines）。通过与用户的交互，实现不同状态，然后渲染 UI，让用户界面和数据保持一致。React 里，只需更新组件的 state，然后根据新的 state 重新渲染用户界面（不要操作 DOM）。</p>
<h3 id="constructor-初始状态"><a href="#constructor-初始状态" class="headerlink" title="constructor()初始状态"></a>constructor()初始状态</h3><h4 id="实例：点击喜欢-amp-不喜欢"><a href="#实例：点击喜欢-amp-不喜欢" class="headerlink" title="实例：点击喜欢&amp;不喜欢"></a>实例：点击喜欢&amp;不喜欢</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LikeButton</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state =&#123;<span class="attr">liked</span>: <span class="literal">false</span>&#125;;</div><div class="line">    &#125;</div><div class="line">    handleClick() &#123;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            <span class="attr">liked</span>: !<span class="keyword">this</span>.state.liked</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">let</span> text = <span class="keyword">this</span>.state.liked ? <span class="string">'喜欢'</span> : <span class="string">'不喜欢'</span>;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span>你<span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span>我。点我切换状态。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">LikeButton</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">handleClick = ()=&gt;&#123;</div><div class="line">    this.<span class="built_in">set</span>State(&#123;</div><div class="line">        liked: !this.<span class="keyword">state</span>.liked</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>constructor是组件的构造函数，会在创建实例时自动调用。<br>…args表示组件参数，super(…args)是 ES6 规定的写法。<br>this.state对象用来存放内部状态，这里是定义初始状态，也就是一个对象，这个对象可以通过 this.state 属性读取。当用户点击组件，导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，再次渲染组件。<br>onClick={this.handleClick.bind(this)}绑定事件，返回参数。<br>e.target.value绑定事件后的返回值。</p>
<h4 id="实例：输入文字实时显示"><a href="#实例：输入文字实时显示" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    constructor() &#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state =&#123;name: <span class="symbol">'can</span> you speek <span class="type">English</span>!'&#125;;</div><div class="line">    &#125;</div><div class="line">    handleChange(e) &#123;</div><div class="line">        let name = e.target.value;</div><div class="line">        <span class="keyword">this</span>.setState(&#123;</div><div class="line">            name: name</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">                &lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">                &lt;p&gt;luuman,&#123;<span class="keyword">this</span>.state.name&#125;&lt;/p&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">MyTitle</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h2 id="React-Props"><a href="#React-Props" class="headerlink" title="React Props"></a>React Props</h2><p>props通过组件获取数据</p>
<h3 id="基础语法-1"><a href="#基础语法-1" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="实例：数据传递"><a href="#实例：数据传递" class="headerlink" title="实例：数据传递"></a>实例：数据传递</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(</div><div class="line">	&lt;<span class="type">HelloMessage</span> name=<span class="string">"Runoob"</span> /&gt;,mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<p>实例中 name 属性通过 this.props.name 来获取。</p>
<h3 id="defaultProps默认值"><a href="#defaultProps默认值" class="headerlink" title="defaultProps默认值"></a>defaultProps默认值</h3><p>默认Props：你可以通过defaultProps()方法为props设置默认值，实例如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">HelloMessage</span>.defaultProps = &#123;</div><div class="line">    name: <span class="symbol">'Runoo</span>b'</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div className=&#123;<span class="keyword">this</span>.props.name&#125;&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.props.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.props.site&#125; /&gt;&lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">WebSite</span>.defaultProps =&#123;</div><div class="line">	name: <span class="string">"菜鸟教程"</span>,</div><div class="line">	site: <span class="string">"http://www.runoob.com"</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> /&gt;, mountNode);</div></pre></td></tr></table></figure>
<h3 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h3><h4 id="实例：点击次数"><a href="#实例：点击次数" class="headerlink" title="实例：点击次数"></a>实例：点击次数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotesList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;</span></div><div class="line">                React.Children.map(this.props.children,function(child)&#123;</div><div class="line">                    console.log(child);</div><div class="line">                    return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                &#125;)</div><div class="line">            &#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">NotesList</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">NotesList</span>&gt;</span>,</div><div class="line">    mountNode</div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="PropTypes验证"><a href="#PropTypes验证" class="headerlink" title="PropTypes验证"></a>PropTypes验证</h3><p>Props 使用propTypes，它可以保证我们的应用组件被正确使用，React.PropTypes 提供很多验证器 (validator) 来验证传入数据是否有效。当向 props 传入无效数据时，JavaScript 控制台会抛出警告。</p>
<h4 id="实例：判断组件属性title是否为字符串："><a href="#实例：判断组件属性title是否为字符串：" class="headerlink" title="实例：判断组件属性title是否为字符串："></a>实例：判断组件属性title是否为字符串：</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const name = <span class="number">123</span>;</div><div class="line">console.log(name);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span> &lt;h1&gt;<span class="type">Hello</span> &#123;<span class="keyword">this</span>.props.title&#125;&lt;/h1&gt;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="type">HelloMessage</span>.propTypes = &#123;</div><div class="line">    title: <span class="type">React</span>.<span class="type">PropTypes</span>.string</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> title=&#123;name&#125; /&gt;,mountNode);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果 title 使用数字变量，控制台会出现以下错误信息：</p>
</blockquote>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Warning: Failed prop type: Invalid prop `title` of<span class="built_in"> type </span>`number` supplied <span class="keyword">to</span> `HelloMessage`, expected `string`.</div></pre></td></tr></table></figure>
<h3 id="PropTypes属性值"><a href="#PropTypes属性值" class="headerlink" title="PropTypes属性值"></a>PropTypes属性值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">.propTypes = &#123;</div><div class="line">	<span class="comment">// 可以声明 prop 为指定的 JS 基本数据类型，默认情况，这些数据是可选的</span></div><div class="line">	optionalArray: React.PropTypes.array,</div><div class="line">	<span class="attr">optionalBool</span>: React.PropTypes.bool,</div><div class="line">	<span class="attr">optionalFunc</span>: React.PropTypes.func,</div><div class="line">	<span class="attr">optionalNumber</span>: React.PropTypes.number,</div><div class="line">	<span class="attr">optionalObject</span>: React.PropTypes.object,</div><div class="line">	<span class="attr">optionalString</span>: React.PropTypes.string,</div><div class="line">	<span class="attr">optionalSymbol</span>: React.PropTypes.symbol,</div><div class="line"></div><div class="line">	<span class="comment">// 可以被渲染的对象 numbers, strings, elements 或 array</span></div><div class="line">	optionalNode: React.PropTypes.node,</div><div class="line"></div><div class="line">	<span class="comment">//  React 元素</span></div><div class="line">	optionalElement: React.PropTypes.element,</div><div class="line"></div><div class="line">	<span class="comment">// 用 JS 的 instanceof 操作符声明 prop 为类的实例。</span></div><div class="line">	optionalMessage: React.PropTypes.instanceOf(Message),</div><div class="line"></div><div class="line">	<span class="comment">// 用 enum 来限制 prop 只接受指定的值。</span></div><div class="line">	optionalEnum: React.PropTypes.oneOf([<span class="string">'News'</span>, <span class="string">'Photos'</span>]),</div><div class="line"></div><div class="line">	<span class="comment">// 可以是多个对象类型中的一个</span></div><div class="line">	optionalUnion: React.PropTypes.oneOfType([</div><div class="line">		React.PropTypes.string,</div><div class="line">		React.PropTypes.number,</div><div class="line">		React.PropTypes.instanceOf(Message)</div><div class="line">	]),</div><div class="line"></div><div class="line">	<span class="comment">// 指定类型组成的数组</span></div><div class="line">	optionalArrayOf: React.PropTypes.arrayOf(React.PropTypes.number),</div><div class="line"></div><div class="line">	<span class="comment">// 指定类型的属性构成的对象</span></div><div class="line">	optionalObjectOf: React.PropTypes.objectOf(React.PropTypes.number),</div><div class="line"></div><div class="line">	<span class="comment">// 特定 shape 参数的对象</span></div><div class="line">	optionalObjectWithShape: React.PropTypes.shape(&#123;</div><div class="line">		<span class="attr">color</span>: React.PropTypes.string,</div><div class="line">		<span class="attr">fontSize</span>: React.PropTypes.number</div><div class="line">	&#125;),</div><div class="line"></div><div class="line">	<span class="comment">// 任意类型加上 `isRequired` 来使 prop 不可空。</span></div><div class="line">	requiredFunc: React.PropTypes.func.isRequired,</div><div class="line"></div><div class="line">	<span class="comment">// 不可空的任意类型</span></div><div class="line">	requiredAny: React.PropTypes.any.isRequired,</div><div class="line"></div><div class="line">	<span class="comment">// 自定义验证器。如果验证失败需要返回一个 Error 对象。不要直接使用 `console.warn` 或抛异常，因为这样 `oneOfType` 会失效。</span></div><div class="line">	customProp(props, propName, componentName) &#123;</div><div class="line">		<span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(props[propName])) &#123;</div><div class="line">		    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</div><div class="line">				<span class="string">'Invalid prop `'</span> + propName + <span class="string">'` supplied to'</span> +</div><div class="line">				<span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></div><div class="line">		    );</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">customArrayProp</span>: React.PropTypes.arrayOf(</div><div class="line">		<span class="function"><span class="keyword">function</span>(<span class="params">propValue, key, componentName, location, propFullName</span>) </span>&#123;</div><div class="line">			<span class="keyword">if</span> (!<span class="regexp">/matchme/</span>.test(propValue[key])) &#123;</div><div class="line">			    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</div><div class="line">					<span class="string">'Invalid prop `'</span> + propFullName + <span class="string">'` supplied to'</span> +</div><div class="line">					<span class="string">' `'</span> + componentName + <span class="string">'`. Validation failed.'</span></div><div class="line">			    );</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="state和props区别"><a href="#state和props区别" class="headerlink" title="state和props区别"></a>state和props区别</h3><p>在于props是不可变的，而子组件只能通过props来获取数据。<br>而state可以根据与用户交互来改变。这就是为什么有些容器组件需要定义state来更新和修改数据。</p>
<p>以下实例演示了如何在应用中组合使用state和props。我们可以在父组件中设置state，并通过在子组件上使用props将其传递到子组件上。在render函数中,我们设置name和site来获取父组件传递过来的数据。</p>
<h4 id="实例：链接-1"><a href="#实例：链接-1" class="headerlink" title="实例：链接"></a>实例：链接</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor(props) &#123;</div><div class="line">		<span class="keyword">super</span>(props);</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			name: <span class="string">"菜鸟教程"</span>,</div><div class="line">			site: <span class="string">"http://www.runoob.com"</span></div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;div&gt;&lt;<span class="type">Name</span> name=&#123;<span class="keyword">this</span>.state.name&#125; /&gt;&lt;<span class="type">Link</span> site=&#123;<span class="keyword">this</span>.state.site&#125; /&gt;&lt;/div&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;h1&gt;&#123;<span class="keyword">this</span>.props.name&#125;&lt;/h1&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;a href=&#123;<span class="keyword">this</span>.props.site&#125;&gt;&#123;<span class="keyword">this</span>.props.site&#125;&lt;/a&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">WebSite</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<h2 id="React-组件-API"><a href="#React-组件-API" class="headerlink" title="React 组件 API"></a>React 组件 API</h2><p>在本章节中我们将讨论 React 组件 API。</p>
<h3 id="基础语法-2"><a href="#基础语法-2" class="headerlink" title="基础语法"></a>基础语法</h3><h3 id="mixins去重"><a href="#mixins去重" class="headerlink" title="mixins去重"></a>mixins去重</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">const <span class="type">ExampleMixin</span> = &#123;</div><div class="line">    componentDidMount()&#123;</div><div class="line">        <span class="comment">// bind some event listeners here</span></div><div class="line">    &#125;</div><div class="line">    componentWillUnmount()&#123;</div><div class="line">        <span class="comment">// unbind those events here!</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	mixins: [<span class="type">ExampleMixin</span>];</div><div class="line">	render()&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnotherComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	mixins: [<span class="type">ExampleMixin</span>];</div><div class="line">	render()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- 设置状态:setState
setState(object nextState[, function callback])
参数说明
nextState，将要设置的新状态，该状态会和当前的state合并
callback，可选参数，回调函数。该函数会在setState设置成功，且组件重新渲染后调用。
合并nextState和当前state，并重新渲染组件。setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法。
关于setState
不能在组件内部通过this.state修改状态，因为该状态会在调用setState()后被替换。
setState()并不会立即改变this.state，而是创建一个即将处理的state。setState()并不一定是同步的，为了提升性能React会批量执行state和DOM渲染。
setState()总是会触发一次组件重绘，除非在shouldComponentUpdate()中实现了一些条件渲染逻辑。 -->
<h4 id="实例：点击次数-1"><a href="#实例：点击次数-1" class="headerlink" title="实例：点击次数"></a>实例：点击次数</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			clickCount: <span class="number">0</span></div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	handleClick()&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			clickCount: <span class="keyword">this</span>.state.clickCount +<span class="number">1</span></div><div class="line">		&#125;);</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span> &lt;h2 onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125;&gt;点我！点击次数为: &#123;<span class="keyword">this</span>.state.clickCount&#125;&lt;/h2&gt;;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">Counter</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<!-- 
实例中通过点击 h2 标签来使得点击计数器加 1。
替换状态：replaceState
replaceState(object nextState[, function callback])
nextState，将要设置的新状态，该状态会替换当前的state。
callback，可选参数，回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。
replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。
设置属性：setProps
setProps(object nextProps[, function callback])
nextProps，将要设置的新属性，该状态会和当前的props合并
callback，可选参数，回调函数。该函数会在setProps设置成功，且组件重新渲染后调用。
设置组件属性，并重新渲染组件。
props相当于组件的数据流，它总是会从父组件向下传递至所有的子组件中。当和一个外部的JavaScript应用集成时，我们可能会需要向组件传递数据或通知ReactDOM.render()组件需要重新渲染，可以使用setProps()。
更新组件，我可以在节点上再次调用ReactDOM.render()，也可以通过setProps()方法改变组件属性，触发组件重新渲染。
替换属性：replaceProps
replaceProps(object nextProps[, function callback])
nextProps，将要设置的新属性，该属性会替换当前的props。
callback，可选参数，回调函数。该函数会在replaceProps设置成功，且组件重新渲染后调用。
replaceProps()方法与setProps类似，但它会删除原有
props
强制更新：forceUpdate
forceUpdate([function callback])
参数说明
callback，可选参数，回调函数。该函数会在组件render()方法调用后调用。
forceUpdate()方法会使组件调用自身的render()方法重新渲染组件，组件的子组件也会调用自己的render()。但是，组件重新渲染时，依然会读取this.props和this.state，如果状态没有改变，那么React只会更新DOM。
forceUpdate()方法适用于this.props和this.state之外的组件重绘（如：修改了this.state后），通过该方法通知React需要调用render()
一般来说，应该尽量避免使用forceUpdate()，而仅从this.props和this.state中读取状态并由React触发render()调用。
获取DOM节点：findDOMNode
DOMElement findDOMNode()
返回值：DOM元素DOMElement
如果组件已经挂载到DOM中，该方法返回对应的本地浏览器 DOM 元素。当render返回null 或 false时，this.findDOMNode()也会返回null。从DOM 中读取值的时候，该方法很有用，如：获取表单字段的值和做一些 DOM 操作。
判断组件挂载状态：isMounted
bool isMounted()
返回值：true或false，表示组件是否已挂载到DOM中
isMounted()方法用于判断组件是否已挂载到DOM中。可以使用该方法保证了setState()和forceUpdate()在异步场景下的调用不会出错。
本文参考：http://itbilu.com/javascript/react/EkACBdqKe.html -->
<h2 id="React-组件生命周期"><a href="#React-组件生命周期" class="headerlink" title="React 组件生命周期"></a>React 组件生命周期</h2><blockquote>
<p>组件的生命周期可分成三个状态：Mounting、Updating、Unmounting</p>
<h3 id="Mounting：已插入真实-DOM"><a href="#Mounting：已插入真实-DOM" class="headerlink" title="Mounting：已插入真实 DOM"></a>Mounting：已插入真实 DOM</h3></blockquote>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor()"></a>constructor()</h4><h4 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount()"></a>componentWillMount()</h4><p>在渲染前调用,在客户端也在服务端。</p>
<h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><p>在渲染时调用</p>
<h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><p>在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构，可以通过this.getDOMNode()来进行访问。<br>如果你想和其他JavaScript框架一起使用，可以在这个方法中调用setTimeout, setInterval或者发送AJAX请求等操作(防止异部操作阻塞UI)。</p>
<h3 id="Updating：正在被重新渲染"><a href="#Updating：正在被重新渲染" class="headerlink" title="Updating：正在被重新渲染"></a>Updating：正在被重新渲染</h3><h4 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps()"></a>componentWillReceiveProps()</h4><p>在组件接收到一个新的prop时被调用。这个方法在初始化render时不会被调用。</p>
<h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate()"></a>shouldComponentUpdate()</h4><p>返回一个布尔值。在组件接收到新的props或者state时被调用。在初始化时或者使用forceUpdate时不被调用。<br>可以在你确认不需要更新组件时使用。</p>
<h4 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate()"></a>componentWillUpdate()</h4><p>在组件接收到新的props或者state但还没有render时被调用。在初始化时不会被调用。</p>
<h4 id="render-1"><a href="#render-1" class="headerlink" title="render()"></a>render()</h4><h4 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate()"></a>componentDidUpdate()</h4><p>在组件完成更新后立即调用。在初始化时不会被调用。</p>
<h3 id="Unmounting：已移出真实-DOM"><a href="#Unmounting：已移出真实-DOM" class="headerlink" title="Unmounting：已移出真实 DOM"></a>Unmounting：已移出真实 DOM</h3><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><p>在组件从 DOM 中移除的时候立刻被调用。</p>
<h4 id="实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染"><a href="#实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染" class="headerlink" title="实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染"></a>实例：定时器，每隔100毫秒重新设置组件的透明度，并重新渲染</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			<span class="attr">opacity</span>: <span class="number">1.0</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;</div><div class="line">		<span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">let</span> opacity = <span class="keyword">this</span>.state.opacity;</div><div class="line">			opacity -= <span class="number">.05</span>;</div><div class="line">			<span class="keyword">if</span>(opacity &lt; <span class="number">.1</span>)&#123;</div><div class="line">				opacity = <span class="number">1.0</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">this</span>.setState(&#123;</div><div class="line">				<span class="attr">opacity</span>: opacity</div><div class="line">			&#125;)</div><div class="line"></div><div class="line">		&#125;.bind(<span class="keyword">this</span>),<span class="number">100</span>)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:</span> <span class="attr">this.state.opacity</span>&#125;&#125;&gt;</span></span></div><div class="line">				Hello &#123;this.props.name&#125;</div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">"world"</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<h4 id="实例：点击效果"><a href="#实例：点击效果" class="headerlink" title="实例：点击效果"></a>实例：点击效果</h4><p>以下实例初始化 state ， setNewnumber 用于更新 state。所有生命周期在 Content 组件中。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			<span class="attr">data</span>:<span class="number">0</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	setNewNumber()&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			<span class="attr">data</span>: <span class="keyword">this</span>.state.data + <span class="number">1</span></div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.setNewNumber.bind(this)&#125;</span>&gt;</span>INCREMENT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">Content</span> <span class="attr">myNumber</span>=<span class="string">&#123;this.state.data&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	componentWillMount()&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL MOUNT!'</span>)</div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component DID MOUNT!'</span>)</div><div class="line">	&#125;</div><div class="line">	componentWillReceiveProps(newProps) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL RECEIVE PROPS!'</span>)</div><div class="line">	&#125;</div><div class="line">	shouldComponentUpdate(newProps, newState) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	componentWillUpdate(nextProps, nextState) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL UPDATE!'</span>);</div><div class="line">	&#125;</div><div class="line">	componentDidUpdate(prevProps, prevState) &#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component DID UPDATE!'</span>)</div><div class="line">	&#125;</div><div class="line">	componentWillUnmount()&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'Component WILL UNMOUNT!'</span>)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;this.props.myNumber&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Button</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure></p>
<h4 id="实例：统计时间"><a href="#实例：统计时间" class="headerlink" title="实例：统计时间"></a>实例：统计时间</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Timer</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123;<span class="attr">secondsElapsed</span>: <span class="number">0</span>&#125;;</div><div class="line">  &#125;</div><div class="line">  tick()&#123;</div><div class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</div><div class="line">      <span class="attr">secondsElapsed</span>: prevState.secondsElapsed + <span class="number">1</span></div><div class="line">    &#125;));</div><div class="line">  &#125;</div><div class="line">  componentDidMount()&#123;</div><div class="line">    <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(), <span class="number">1000</span>);</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount()&#123;</div><div class="line">    clearInterval(<span class="keyword">this</span>.interval);</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Seconds Elapsed: &#123;this.state.secondsElapsed&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Timer</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>
<h2 id="Lists-and-Keys列表遍历"><a href="#Lists-and-Keys列表遍历" class="headerlink" title="Lists and Keys列表遍历"></a>Lists and Keys列表遍历</h2><p>JSX 允许在模板中插入数组，数组会自动展开所有成员：</p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml">const arr = [</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>,</div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学的不仅是技术，更是梦想！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>,</div><div class="line">];</div><div class="line">ReactDOM.render(</div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="template-variable">&#123;arr&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>,mountNode</span></div><div class="line">);</div></pre></td></tr></table></figure>
<p><a href="demo/index6.html">index6</a></p>
<h3 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map"></a>Array.map</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">const</span> doubled = numbers.map(<span class="function">(<span class="params"><span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> * <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(doubled);</div></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">const numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">const listItems = numbers.<span class="built_in">map</span>((number,<span class="built_in">key</span>) =&gt;</div><div class="line">	&lt;<span class="built_in">li</span> <span class="built_in">key</span>=&#123;<span class="built_in">key</span>&#125;&gt;&#123;number&#125;&lt;/<span class="built_in">li</span>&gt;</div><div class="line">);</div><div class="line">console.<span class="built_in">log</span>(listItems);</div><div class="line">ReactDOM.render(&lt;ul&gt;&#123;listItems&#125;&lt;/ul&gt;,mountNode);</div><div class="line"></div><div class="line">const listItems = numbers.<span class="built_in">map</span>(function(number,keys)&#123;</div><div class="line">	<span class="built_in">return</span>(</div><div class="line">		&lt;<span class="built_in">li</span> <span class="built_in">key</span>=&#123;keys&#125;&gt;</div><div class="line">			&#123;number&#125;</div><div class="line">		&lt;/<span class="built_in">li</span>&gt;</div><div class="line">	)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Array-forEach-遍历"><a href="#Array-forEach-遍历" class="headerlink" title="Array.forEach 遍历"></a>Array.forEach 遍历</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span>.<span class="keyword">forEach</span>((e) =&gt; &#123;</div><div class="line">	alert(e);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">Array</span>.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123;</div><div class="line">	alert(e);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line"><span class="keyword">let</span> repoList = [];</div><div class="line">repos.forEach(<span class="function">(<span class="params">p,keys</span>) =&gt;</span> &#123;</div><div class="line">	<span class="keyword">let</span> item = <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;keys&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;p.html_url&#125;</span>&gt;</span>&#123;p.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(&#123;p.stargazers_count&#125; stars)<span class="tag">&lt;<span class="name">br</span> /&gt;</span>&#123;p.description&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</div><div class="line">	repoList.push(item);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">let</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line"><span class="keyword">let</span> repoList = repos.map(<span class="function"><span class="keyword">function</span>(<span class="params">repo,index</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;repo.html_url&#125;</span>&gt;</span>&#123;repo.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(&#123;repo.stargazers_count&#125; stars)<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">            &#123;repo.description&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span>   </div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="Array-splice-删除"><a href="#Array-splice-删除" class="headerlink" title="Array.splice 删除"></a>Array.splice 删除</h3><h3 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter"></a>Array.filter</h3><p>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p>
<h3 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every"></a>Array.every</h3><h3 id="Array-push"><a href="#Array-push" class="headerlink" title="Array.push"></a>Array.push</h3><h2 id="Handling-Events绑定事件"><a href="#Handling-Events绑定事件" class="headerlink" title="Handling Events绑定事件"></a>Handling Events绑定事件</h2><h2 id="Forms表单"><a href="#Forms表单" class="headerlink" title="Forms表单"></a>Forms表单</h2><h3 id="基础语法-3"><a href="#基础语法-3" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="实例：输入文字实时显示-1"><a href="#实例：输入文字实时显示-1" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	handleChange(even)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			value: even.target.value</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		let value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'tex</span>t' value=&#123;value&#125; onChange=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">				&lt;h4&gt;&#123;value&#125;&lt;/h4&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<h4 id="实例：输入文字实时显示-2"><a href="#实例：输入文字实时显示-2" class="headerlink" title="实例：输入文字实时显示"></a>实例：输入文字实时显示</h4><p>你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'tex</span>t' value=&#123;<span class="keyword">this</span>.props.myDataProp&#125; onChange=&#123;<span class="keyword">this</span>.props.updataStateProp&#125; /&gt;</div><div class="line">				&lt;h4&gt;&#123;<span class="keyword">this</span>.props.myDataProp&#125;&lt;/h4&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">	handleChange(even)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			value: even.target.value</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		let value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;<span class="type">Content</span> myDataProp=&#123;value&#125; updataStateProp=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure></p>
<h4 id="实例：点我"><a href="#实例：点我" class="headerlink" title="实例：点我"></a>实例：点我</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state=&#123;</div><div class="line">			<span class="attr">value</span>: <span class="string">'Hello World!'</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	handleChange(event)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			<span class="attr">value</span>: <span class="string">'luuman is good man!'</span></div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">let</span> value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleChange.bind(this)&#125;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<p>当你需要从子组件中更新父组件的 state 时，你需要在父组件通过创建事件句柄 (handleChange) ，并作为 prop (updateStateProp) 传递到你的子组件上。实例如下：</p>
<h4 id="实例：点我-1"><a href="#实例：点我-1" class="headerlink" title="实例：点我"></a>实例：点我</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;button onClick=&#123;<span class="keyword">this</span>.props.updateStateProp&#125;&gt;点我&lt;/button&gt;</div><div class="line">				&lt;h4&gt;&#123;<span class="keyword">this</span>.props.myDataProp&#125;&lt;/h4&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	constructor()&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			value: <span class="symbol">'Hello</span> <span class="type">World</span>!'</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	handleChange(event)&#123;</div><div class="line">		<span class="keyword">this</span>.setState(&#123;</div><div class="line">			value: <span class="symbol">'luuman</span> is good man!'</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		let value = <span class="keyword">this</span>.state.value;</div><div class="line">		<span class="keyword">return</span> &lt;div&gt;&lt;<span class="type">Content</span> myDataProp=&#123;value&#125; updateStateProp=&#123;<span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>)&#125;&gt;&lt;/<span class="type">Content</span>&gt;&lt;/div&gt;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloMessage</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<h2 id="Refs-and-the-DOM"><a href="#Refs-and-the-DOM" class="headerlink" title="Refs and the DOM"></a>Refs and the DOM</h2><h3 id="React-Refs"><a href="#React-Refs" class="headerlink" title="React Refs"></a>React Refs</h3><p>React 支持一种非常特殊的属性 Ref ，你可以用来绑定到 render() 输出的任何组件上。<br>这个特殊的属性允许你引用 render() 返回的相应的支撑实例（ backing instance ）。这样就可以确保在任何时间总是拿到正确的实例。</p>
<blockquote>
<p>使用方法：<br>绑定一个 ref 属性到 render 的返回值上：</p>
</blockquote>
<p>在其它代码中，通过 this.refs 获取支撑实例:<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">input</span> <span class="keyword">ref</span>=<span class="string">"myInput"</span> /&gt;</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="keyword">input</span> = <span class="keyword">this</span><span class="variable">.refs</span><span class="variable">.myInput</span>;</div><div class="line"><span class="keyword">var</span> inputValue = <span class="keyword">input</span><span class="variable">.value</span>;</div><div class="line"><span class="keyword">var</span> inputRect = <span class="keyword">input</span><span class="variable">.getBoundingClientRect</span>();</div></pre></td></tr></table></figure></p>
<h4 id="实例：点我输入框获取焦点"><a href="#实例：点我输入框获取焦点" class="headerlink" title="实例：点我输入框获取焦点"></a>实例：点我输入框获取焦点</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	handleClick()&#123;</div><div class="line">		<span class="keyword">this</span>.refs.myInput.focus();</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'tex</span>t' ref=<span class="symbol">'myInpu</span>t' /&gt;</div><div class="line">				&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="symbol">'butto</span>n' value='点我输入框获取焦点' onClick=&#123;<span class="keyword">this</span>.handleClick.bind(<span class="keyword">this</span>)&#125; /&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">MyComponent</span> /&gt;,mountNode);</div></pre></td></tr></table></figure>
<p>当组件插入到 DOM 后，ref属性添加一个组件的引用于到this.refs.name获取。</p>
<p>实例中，我们获取了输入框的支撑实例的引用，子点击按钮后输入框获取焦点。<br>我们也可以使用 getDOMNode()方法获取DOM元素</p>
<h2 id="React-AJAX"><a href="#React-AJAX" class="headerlink" title="React AJAX"></a>React AJAX</h2><p>React 组件的数据可以通过 componentDidMount 方法中的 Ajax 来获取，当从服务端获取数据库可以将数据存储在 state 中，再用 this.setState 方法重新渲染 UI。<br>当使用异步加载数据时，在组件卸载前使用 componentWillUnmount 来取消未完成的请求。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.get(URL,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;&#125;)</div></pre></td></tr></table></figure>
<h4 id="实例：获取-Github-用户最新-gist-共享描述"><a href="#实例：获取-Github-用户最新-gist-共享描述" class="headerlink" title="实例：获取 Github 用户最新 gist 共享描述:"></a>实例：获取 Github 用户最新 gist 共享描述:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGist</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	<span class="keyword">constructor</span>() &#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">		<span class="keyword">this</span>.state = &#123;</div><div class="line">			<span class="attr">username</span>: <span class="string">''</span>,</div><div class="line">			<span class="attr">lastGistUrl</span>: <span class="string">''</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	componentDidMount()&#123;</div><div class="line">		<span class="keyword">this</span>.serverRequest = $.get(<span class="keyword">this</span>.props.source,<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line">			<span class="keyword">let</span> lastGist = result[<span class="number">0</span>];</div><div class="line">			<span class="keyword">this</span>.setState(&#123;</div><div class="line">				<span class="attr">username</span>: lastGist.owner.login,</div><div class="line">				<span class="attr">lastGistUrl</span>: lastGist.html_url</div><div class="line">			&#125;)</div><div class="line">		&#125;.bind(<span class="keyword">this</span>))</div><div class="line">	&#125;</div><div class="line">	componentWillUnmount()&#123;</div><div class="line">		<span class="keyword">this</span>.serverRequest.abort();</div><div class="line">	&#125;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></div><div class="line">				&#123;this.state.username&#125;</div><div class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;this.state.lastGistUrl&#125;</span>&gt;</span>&#123;this.state.lastGistUrl&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">UserGist</span> <span class="attr">source</span>=<span class="string">"https://api.github.com/users/octocat/gists"</span> /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<h4 id="实例：拉取数据"><a href="#实例：拉取数据" class="headerlink" title="实例：拉取数据"></a>实例：拉取数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span>;</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</div><div class="line"><span class="keyword">const</span> mountNode = <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RipoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">            <span class="attr">loading</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">error</span>: <span class="literal">null</span>,</div><div class="line">            <span class="attr">data</span>: <span class="literal">null</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    componentDidMount()&#123;</div><div class="line">        <span class="keyword">this</span>.props.promise.then(</div><div class="line">            <span class="function"><span class="params">value</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123;</div><div class="line">                <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">data</span>: value</div><div class="line">            &#125;),</div><div class="line">            error =&gt; <span class="keyword">this</span>.setState(&#123;</div><div class="line">                <span class="attr">loading</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">error</span>: error</div><div class="line">            &#125;)</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state.loading)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.state.error != <span class="literal">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span>  <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Error: &#123;this.state.error.message&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">let</span> repos = <span class="keyword">this</span>.state.data.items;</div><div class="line">            <span class="keyword">let</span> repoList = repos.map(<span class="function"><span class="keyword">function</span>(<span class="params">repo,index</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span>(</div><div class="line">                    <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;repo.html_url&#125;</span>&gt;</span>&#123;repo.name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>(&#123;repo.stargazers_count&#125; stars)<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">                        &#123;repo.description&#125;</div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span>   </div><div class="line">                );</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span>(</div><div class="line">                <span class="xml"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span></div><div class="line">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Most Popular JavaScript Projects in Github<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;repoList&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">main</span>&gt;</span></div><div class="line">            )</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">RipoList</span> <span class="attr">promise</span>=<span class="string">&#123;$.getJSON(</span>'<span class="attr">https:</span>//<span class="attr">api.github.com</span>/<span class="attr">search</span>/<span class="attr">repositories</span>?<span class="attr">q</span>=<span class="string">javascript&amp;sort</span>=<span class="string">stars</span>')&#125; /&gt;</span>,mountNode);</span></div></pre></td></tr></table></figure>
<h2 id="Add-Ons-添加插件"><a href="#Add-Ons-添加插件" class="headerlink" title="Add-Ons 添加插件"></a>Add-Ons 添加插件</h2><h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> $ from <span class="symbol">'jquer</span>y';</div><div class="line"><span class="keyword">import</span> <span class="type">React</span> from <span class="symbol">'reac</span>t';</div><div class="line"><span class="keyword">import</span> <span class="type">ReactDOM</span> from <span class="symbol">'react</span>-dom';</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</div><div class="line">	render()&#123;</div><div class="line">		<span class="keyword">return</span>(</div><div class="line">			&lt;div&gt;<span class="type">HelloWorld</span>&lt;/div&gt;</div><div class="line">		);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">ReactDOM</span>.render(&lt;<span class="type">HelloWorld</span> /&gt;,$('#example')[<span class="number">0</span>]);</div></pre></td></tr></table></figure>
<h3 id="recharts"><a href="#recharts" class="headerlink" title="recharts"></a>recharts</h3><ul>
<li><a href="http://recharts.org/" target="_blank" rel="external">React图表组件库</a></li>
</ul>
<h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><ul>
<li><a href="https://react-bootstrap.github.io/" target="_blank" rel="external">React组件库</a></li>
</ul>
<h3 id="MarkdownEditor"><a href="#MarkdownEditor" class="headerlink" title="MarkdownEditor"></a>MarkdownEditor</h3><ul>
<li><a href="https://github.com/jonschlinkert/remarkable" title="Markdown解析器" target="_blank" rel="external">MarkDown</a></li>
</ul>
<h2 id="ReactDOM"><a href="#ReactDOM" class="headerlink" title="ReactDOM"></a>ReactDOM</h2><h3 id="render-2"><a href="#render-2" class="headerlink" title="render()"></a>render()</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ReactDOM.render(</div><div class="line"><span class="built_in">	element,</span></div><div class="line"><span class="built_in">	container,</span></div><div class="line">	[callback]</div><div class="line">)</div></pre></td></tr></table></figure>
<h3 id="unmountComponentAtNode"><a href="#unmountComponentAtNode" class="headerlink" title="unmountComponentAtNode()"></a>unmountComponentAtNode()</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ReactDOM.unmountComponentAtNode(<span class="keyword">container</span>)</div></pre></td></tr></table></figure>
<h3 id="findDOMNode"><a href="#findDOMNode" class="headerlink" title="findDOMNode()"></a>findDOMNode()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ReactDOM</span><span class="selector-class">.findDOMNode</span>(<span class="selector-tag">component</span>)</div></pre></td></tr></table></figure>
<p>### </p>
<h4 id="onkeypress"><a href="#onkeypress" class="headerlink" title="onkeypress"></a>onkeypress</h4><p>/<em> 在实例中，我们使用了支持多浏览器的方法，因为 keyCode 属性无法再 Firefox 浏览器中工作。但是 which 属性可以。<br>如果浏览器支持 event.which 则使用 event.which，否则使用 event.keyCode </em>/</p>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p><a href="http://es6.ruanyifeng.com/" title="阮一峰" target="_blank" rel="external">ECMAScript 6 入门</a></p>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。</p>
<blockquote>
<p>for循环的计数器</p>
</blockquote>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(i);</div><div class="line">//ReferenceError: i <span class="built_in">is</span> <span class="keyword">not</span> defined</div></pre></td></tr></table></figure>
<blockquote>
<p>下面的代码如果使用var，最后输出的是10</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果使用let，声明的变量仅在块级作用域内有效，最后输出的是6</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(i);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h2&gt;&lt;p&gt;React 起源于 Facebook 的内部F8项目，用来架设 Instagram 的网站，并于 2013 年 5 月开源。&lt;br&gt;React主要用于构建UI，很多人认为 React 是 MVC 中的 V（视图）。&lt;br&gt;React 拥有较高的性能，代码逻辑非常简单，越来越多的人已开始关注和使用它。E6语法。&lt;/p&gt;
&lt;h3 id=&quot;React-特点&quot;&gt;&lt;a href=&quot;#React-特点&quot; class=&quot;headerlink&quot; title=&quot;React 特点&quot;&gt;&lt;/a&gt;React 特点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;声明式设计 −React采用声明范式，可以轻松描述应用。&lt;/li&gt;
&lt;li&gt;高效 −React通过对DOM的模拟，最大限度地减少与DOM的交互。&lt;/li&gt;
&lt;li&gt;灵活 −React可以与已知的库或框架很好地配合。&lt;/li&gt;
&lt;li&gt;JSX − JSX 是 JavaScript 语法的扩展。React 开发不一定使用 JSX ，但我们建议使用它。&lt;/li&gt;
&lt;li&gt;组件 − 通过 React 构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。&lt;/li&gt;
&lt;li&gt;单向响应的数据流 − React 实现了单向响应的数据流，从而减少了重复代码，这也是它为什么比传统数据绑定更简单。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网地址&lt;/a&gt;
    
    </summary>
    
      <category term="React" scheme="http://luuman.github.io/categories/React/"/>
    
    
      <category term="React" scheme="http://luuman.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>用CSS实现元素垂直居中方案</title>
    <link href="http://luuman.github.io/2017/01/02/Induce/CSS/CSSElementAlign/"/>
    <id>http://luuman.github.io/2017/01/02/Induce/CSS/CSSElementAlign/</id>
    <published>2017-01-02T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="固定高度绝对定位"><a href="#固定高度绝对定位" class="headerlink" title="固定高度绝对定位"></a>固定高度绝对定位</h3><blockquote>
<p>使用position:absolute,设置left、top、margin-left、margin-top的属性<br>这种方法基本浏览器都能够兼容，不足之处就是需要固定宽高。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.one</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">margin-top</span>:-<span class="number">100px</span>;</div><div class="line">	<span class="attribute">margin-left</span>:-<span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>:red; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<!-- <div class="one">one</div> -->
<style type="text/css">
    .one{
        position:absolute;
        width:200px;
        height:200px;
        top:50%;
        left:50%;
        margin-top:-100px;
        margin-left:-100px;
        background:red; 
    }
</style>

<h3 id="使用position-fixed-同样设置left、top、margin-left、margin-top的属性"><a href="#使用position-fixed-同样设置left、top、margin-left、margin-top的属性" class="headerlink" title="使用position:fixed,同样设置left、top、margin-left、margin-top的属性"></a>使用position:fixed,同样设置left、top、margin-left、margin-top的属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.two</span>&#123;</div><div class="line">	<span class="attribute">position</span>:fixed;</div><div class="line">	<span class="attribute">width</span>:<span class="number">180px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">180px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">margin-top</span>:-<span class="number">90px</span>;</div><div class="line">	<span class="attribute">margin-left</span>:-<span class="number">90px</span>;</div><div class="line">	<span class="attribute">background</span>:orange;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家都知道的position:fixed,IE是不支持这个属性的</p>
<!-- <div class="two">two</div> -->
<style type="text/css">
    .two{
        position:fixed;
        width:180px;
        height:180px;
        top:50%;
        left:50%;
        margin-top:-90px;
        margin-left:-90px;
        background:orange;
    }
</style>
### 利用position:fixed属性，margin:auto这个必须不要忘记了。
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.three</span>&#123;</div><div class="line">	<span class="attribute">position</span>:fixed;</div><div class="line">	<span class="attribute">width</span>:<span class="number">160px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">160px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>:auto;</div><div class="line">	<span class="attribute">background</span>:pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="three">three</div> -->
<style type="text/css">
    .three{
        position:fixed;
        width:160px;
        height:160px;
        top:0;
        right:0;
        bottom:0;
        left:0;
        margin:auto;
        background:pink;
    }
</style>
### 利用position:absolute属性，设置top/bottom/right/left
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.four</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">140px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">140px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">margin</span>:auto;</div><div class="line">	<span class="attribute">background</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="four">four</div> -->
<style type="text/css">
    .four{
        position:absolute;
        width:140px;
        height:140px;
        top:0;
        right:0;
        bottom:0;
        left:0;
        margin:auto;
        background:black;
    }
</style>
### 文字垂直水平居中
>利用display:table-cell属性使内容垂直居中

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.five</span>&#123;</div><div class="line">	<span class="attribute">display</span>:table-cell;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">width</span>:<span class="number">120px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">120px</span>;</div><div class="line">	<span class="attribute">background</span>:purple;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="five">five</div> -->
<style type="text/css">
    .five{
        display:table-cell;
        vertical-align:middle;
        text-align:center;
        width:120px;
        height:120px;
        background:purple;
    }
</style>
### 文字垂直水平居中
>最简单的一种使行内元素居中的方法，使用line-height属性
这种方法也很实用，比如使文字垂直居中对齐

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.six</span>&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">line-height</span>:<span class="number">100px</span>;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">background</span>:gray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="six">six</div> -->
<style type="text/css">
    .six{
        width:100px;
        height:100px;
        line-height:100px;
        text-align:center;
        background:gray;
    }
</style>
### 文字垂直水平居中
>使用css3的display:-webkit-box属性，再设置-webkit-box-pack:center/-webkit-box-align:center

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.seven</span>&#123;</div><div class="line">	<span class="attribute">width</span>:<span class="number">90px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">90px</span>;</div><div class="line">	<span class="attribute">display</span>:-webkit-box;</div><div class="line">	<span class="attribute">-webkit-box-pack</span>:center;</div><div class="line">	<span class="attribute">-webkit-box-align</span>:center;</div><div class="line">	<span class="attribute">background</span>:yellow;</div><div class="line">	<span class="attribute">color</span>:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="seven">seven</div> -->
<style type="text/css">
    .seven{
        width:90px;
        height:90px;
        display:-webkit-box;
        -webkit-box-pack:center;
        -webkit-box-align:center;
        background:yellow;
        color:black;
    }
</style>
### CSS translate偏移
>使用css3的新属性transform:translate(x,y)属性
这个方法可以不需要设定固定的宽高，在移动端用的会比较多，在移动端css3兼容的比较好

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.eight</span>&#123;</div><div class="line">	<span class="attribute">position</span>:absolute;</div><div class="line">	<span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">80px</span>;</div><div class="line">	<span class="attribute">top</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</div><div class="line">	<span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">-webkit-transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">-moz-transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">-ms-transform</span>:<span class="built_in">translate</span>(-50%,-50%);</div><div class="line">	<span class="attribute">background</span>:green;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="eight">eight</div> -->
<style type="text/css">
    .eight{
        position:absolute;
        width:80px;
        height:80px;
        top:50%;
        left:50%;
        transform:translate(-50%,-50%);
        -webkit-transform:translate(-50%,-50%);
        -moz-transform:translate(-50%,-50%);
        -ms-transform:translate(-50%,-50%);
        background:green;
    }
</style>
### before元素
>最高大上的一种，使用:before元素

<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nine</span>&#123;</div><div class="line">	<span class="attribute">position</span>:fixed;</div><div class="line">	<span class="attribute">display</span>:block;</div><div class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</div><div class="line">	<span class="attribute">text-align</span>:center;</div><div class="line">	<span class="attribute">background</span>:<span class="built_in">rgba</span>(0,0,0,.5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nine</span><span class="selector-pseudo">:before</span>&#123;</div><div class="line">	<span class="attribute">content</span>:<span class="string">''</span>;</div><div class="line">	<span class="attribute">display</span>:inline-block;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">	<span class="attribute">height</span>:<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.nine</span> <span class="selector-class">.content</span>&#123;</div><div class="line">	<span class="attribute">display</span>:inline-block;</div><div class="line">	<span class="attribute">vertical-align</span>:middle;</div><div class="line">	<span class="attribute">width</span>:<span class="number">60px</span>;</div><div class="line">	<span class="attribute">height</span>:<span class="number">60px</span>;</div><div class="line">	<span class="attribute">line-height</span>:<span class="number">60px</span>;</div><div class="line">	<span class="attribute">color</span>:red;</div><div class="line">	<span class="attribute">background</span>:yellow;</div><div class="line">&#125;</div></pre></td></tr></table></figure>

<!-- <div class="nine"><div class="content">nine</div></div> -->
<style type="text/css">
    .nine{
        position:fixed;
        display:block;
        top:0;
        right:0;
        bottom:0;
        left:0;
        text-align:center;
        background:rgba(0,0,0,.1);
    }
    .nine:before{
        content:'';
        display:inline-block;
        vertical-align:middle;
        height:100%;
    }
    .nine .content{
        display:inline-block;
        vertical-align:middle;
        width:60px;
        height:60px;
        line-height:60px;
        color:red;
        background:yellow;
    }
</style>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="Induce" scheme="http://luuman.github.io/categories/Induce/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS前端代码规范</title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normCSS/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normCSS/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h2><h3 id="CSS文件的分类"><a href="#CSS文件的分类" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3><ol>
<li>公共型样式：global<br>“标签的重置和设置默认值”、“统一调用背景图和清除浮动或其他需统一处理的长样式”、“网站通用布局”、“通用模块和其扩展”、“元件和其扩展”、“功能类样式”、“皮肤类样式”。</li>
<li>特殊型样式：index<br>当某个栏目或页面的样式与网站整体差异较大或者维护率较高时，可以独立引用一个样式<br>“特殊的布局、模块和元件及扩展”、“特殊的功能、颜色和背景”，也可以是某个大型控件或模块的独立样式。</li>
<li>皮肤型样式：skin<br>如果产品需要换肤功能，那么我们需要将颜色、背景等抽离出来放在这里。</li>
</ol>
<h3 id="CSS内部的分类及其顺序"><a href="#CSS内部的分类及其顺序" class="headerlink" title="CSS内部的分类及其顺序"></a>CSS内部的分类及其顺序</h3><ol>
<li>重置（reset）和默认（base）（tags）：消除默认样式和浏览器差异，并设置部分标签的初始样式，以减少后面的重复劳动！你可以根据你的网站需求设置！</li>
<li>统一处理：建议在这个位置统一调用背景图（这里指多个布局或模块或元件共用的图）和清除浮动（这里指通用性较高的布局、模块、元件内的清除）等统一设置处理的样式！</li>
<li>布局（grid）（.g-）：将页面分割为几个大块，通常有头部、主体、主栏、侧栏、尾部等！</li>
<li>模块（module）（.m-）：通常是一个语义化的可以重复使用的较大的整体！比如导航、登录、注册、各种列表、评论、搜索等！</li>
<li>元件（unit）（.u-）：通常是一个不可再分的较为小巧的个体，通常被重复用于各种模块中！比如按钮、输入框、loading、图标等！</li>
<li>功能（function）（.f-）：为方便一些常用样式的使用，我们将这些使用率较高的样式剥离出来，按需使用，通常这些选择器具有固定样式表现，比如清除浮动等！不可滥用！</li>
<li>皮肤（skin）（.s-）：如果你需要把皮肤型的样式抽离出来，通常为文字色、背景色（图）、边框色等，非换肤型网站通常只提取文字色！非换肤型网站不可滥用此类！</li>
<li>状态（.z-）：为状态类样式加入前缀，统一标识，方便识别，她只能组合使用或作为后代出现（.u-ipt.z-dis{}，.m-list li.z-sel{}），具体详见命名规则的扩展相关项。</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 重置 */</span></div><div class="line"><span class="selector-tag">div</span>,<span class="selector-tag">p</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">li</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</div><div class="line"><span class="comment">/* 默认 */</span></div><div class="line"><span class="selector-tag">strong</span>,<span class="selector-tag">em</span>&#123;<span class="attribute">font-style</span>:normal;<span class="attribute">font-weight</span>:bold;&#125;</div><div class="line"><span class="comment">/* 统一调用背景图 */</span></div><div class="line"><span class="selector-class">.m-logo</span> <span class="selector-tag">a</span>,<span class="selector-class">.m-nav</span> <span class="selector-tag">a</span>,<span class="selector-class">.m-nav</span> <span class="selector-tag">em</span>&#123;<span class="attribute">background</span>:<span class="built_in">url</span>(images/sprite.png) no-repeat <span class="number">9999px</span> <span class="number">9999px</span>;&#125;</div><div class="line"><span class="comment">/* 统一清除浮动 */</span></div><div class="line"><span class="selector-class">.g-bdc</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.m-dimg</span> <span class="selector-tag">ul</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.u-tab</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">display</span>:block;<span class="attribute">visibility</span>:hidden;<span class="attribute">clear</span>:both;<span class="attribute">height</span>:<span class="number">0</span>;<span class="attribute">overflow</span>:hidden;<span class="attribute">content</span>:<span class="string">'.'</span>;&#125;</div><div class="line"><span class="selector-class">.g-bdc</span>,<span class="selector-class">.m-dimg</span> <span class="selector-tag">ul</span>,<span class="selector-class">.u-tab</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125;</div><div class="line"><span class="comment">/* 布局 */</span></div><div class="line"><span class="selector-class">.g-sd</span>&#123;<span class="attribute">float</span>:left;<span class="attribute">width</span>:<span class="number">300px</span>;&#125;</div><div class="line"><span class="comment">/* 模块 */</span></div><div class="line"><span class="selector-class">.m-logo</span>&#123;<span class="attribute">width</span>:<span class="number">200px</span>;<span class="attribute">height</span>:<span class="number">50px</span>;&#125;</div><div class="line"><span class="comment">/* 元件 */</span></div><div class="line"><span class="selector-class">.u-btn</span>&#123;<span class="attribute">height</span>:<span class="number">20px</span>;<span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#333</span>;&#125;</div><div class="line"><span class="comment">/* 功能 */</span></div><div class="line"><span class="selector-class">.f-tac</span>&#123;<span class="attribute">text-align</span>:center;&#125;</div><div class="line"><span class="comment">/* 皮肤 */</span></div><div class="line"><span class="selector-class">.s-fc</span>,<span class="selector-tag">a</span><span class="selector-class">.s-fc</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</div></pre></td></tr></table></figure>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><h3 id="使用类选择器，放弃ID选择器"><a href="#使用类选择器，放弃ID选择器" class="headerlink" title="使用类选择器，放弃ID选择器"></a>使用类选择器，放弃ID选择器</h3><p>ID在一个页面中的唯一性导致了如果以ID为选择器来写CSS，就无法重用。</p>
<h3 id="NEC特殊字符：”-“连字符"><a href="#NEC特殊字符：”-“连字符" class="headerlink" title="NEC特殊字符：”-“连字符"></a>NEC特殊字符：”-“连字符</h3><p>“-“在本规范中并不表示连字符的含义。<br>她只表示两种含义：分类前缀分隔符、扩展分隔符，详见以下具体规则。</p>
<h3 id="分类的命名方法：使用单个字母-”-“为前缀"><a href="#分类的命名方法：使用单个字母-”-“为前缀" class="headerlink" title="分类的命名方法：使用单个字母+”-“为前缀"></a>分类的命名方法：使用单个字母+”-“为前缀</h3><p>布局（grid）（.g-）；模块（module）（.m-）；元件（unit）（.u-）；功能（function）（.f-）；皮肤（skin）（.s-）；状态（.z-）。<br>对以上的解释详情参见：分类方法中的“CSS内部的分类及其顺序”。<br>注：在你样式中的选择器总是要以上面前五类开头，然后在里面使用后代选择器。<br>　　如果这五类不能满足你的需求，你可以另外定义一个或多个大类，但必须符合单个字母+”-“为前缀的命名规则，即 .x- 的格式。<br>　　特殊：.j-将被专用于JS获取节点，请勿使用.j-定义样式。</p>
<h3 id="后代选择器命名"><a href="#后代选择器命名" class="headerlink" title="后代选择器命名"></a>后代选择器命名</h3><p>约定不以单个字母+”-“为前缀且长度大于等于2的类选择器为后代选择器，如：.item为m-list模块里的每一个项，.text为m-list模块里的文本部分：.m-list .item{}.m-list .text{}。<br>一个语义化的标签也可以是后代选择器，比如：.m-list li{}。<br>不允许单个字母的类选择器出现，原因详见下面的“模块和元件的后代选择器的扩展类”。<br>通过使用后代选择器的方法，你不需要考虑他的命名是否已被使用，因为他只在当前模块或元件中生效，同样的样式名可以在不同的模块或元件中重复使用，互不干扰；在多人协作或者分模块协作的时候效果尤为明显！<br>后代选择器不需要完整表现结构树层级，尽量能短则短。<br>注：后代选择器不要在页面布局中使用，因为污染的可能性较大；</p>
<pre><code>/* 这里的.itm和.cnt只在.m-list中有效 */
.m-list{margin:0;padding:0;}
.m-list .itm{margin:1px;padding:1px;}
.m-list .cnt{margin-left:100px;}
/* 这里的.cnt和.num只在.m-page中有效 */
.m-page{height:20px;}
.m-page .cnt{text-align:center;}
.m-page .num{border:1px solid #ddd;}
</code></pre><h3 id="命名应简约而不失语义"><a href="#命名应简约而不失语义" class="headerlink" title="命名应简约而不失语义"></a>命名应简约而不失语义</h3><pre><code>/* 反对：表现化的或没有语义的命名 */
.m-abc .green2{}
.g-left2{}
/* 推荐：使用有语义的简短的命名 */
.m-list .wrap2{}
.g-side2{}
</code></pre><h3 id="相同语义的不同类命名"><a href="#相同语义的不同类命名" class="headerlink" title="相同语义的不同类命名"></a>相同语义的不同类命名</h3><p>方法：直接加数字或字母区分即可（如：.m-list、.m-list2、.m-list3等，都是列表模块，但是是完全不一样的模块）。<br>其他举例：.f-fw0、.f-fw1、.s-fc0、.s-fc1、.m-logo2、.m-logo3、u-btn、u-btn2等等。</p>
<h3 id="模块和元件的扩展类的命名方法"><a href="#模块和元件的扩展类的命名方法" class="headerlink" title="模块和元件的扩展类的命名方法"></a>模块和元件的扩展类的命名方法</h3><p>当A、B、C、…它们类型相同且外形相似区别不大，那么就以它们中出现率最高的做成基类，其他做成基类的扩展。<br>方法：+“-”+数字或字母（如：.m-list的扩展类为.m-list-1、.m-list-2等）。<br>补充：基类自身可以独立使用（如：class=”m-list”即可），扩展类必须基于基类使用（如：class=”m-list m-list-2”）。<br>如果你的扩展类是表示不同状态，那么你可以这样命名：u-btn-dis，u-btn-hov，m-box-sel，m-box-hov等等，然后像这样使用：class=”u-btn u-btn-dis”。<br>如果你的网站可以不兼容IE6等浏览器，那么你标识状态的方法也可以采取独立状态分类（.z-）方法：.u-btn.z-dis，.m-box.z-sel，然后像这样使用：class=”u-btn z-dis”。</p>
<h3 id="模块和元件的后代选择器的扩展类"><a href="#模块和元件的后代选择器的扩展类" class="headerlink" title="模块和元件的后代选择器的扩展类"></a>模块和元件的后代选择器的扩展类</h3><p>有时候模块内会有些类似的东西，如果你没有把它们做成元件和扩展，那么也可以使用后代选择器和扩展。<br>后代选择器：.m-login .btn{}。<br>后代选择器扩展：.m-login .btn-1{}，.m-login .btn-dis{}。<br>同样也可以采取独立状态分类（.z-）方法：.m-login .btn.z-dis{}，然后像这样使用：class=”btn z-dis”。<br>注：此方法用于类选择器，直接使用标签做为选择器的则不需要使用此命名方法。<br>注：为防止后代选择器的扩展类和大类命名规范冲突，后代选择器不允许使用单个字母。<br>　　比如：.m-list .a{}是不允许的，因为当这个.a需要扩展的时候就会变成.a-bb，这样就和大类的命名规范冲突。</p>
<h3 id="分组选择器有时可以代替扩展方法"><a href="#分组选择器有时可以代替扩展方法" class="headerlink" title="分组选择器有时可以代替扩展方法"></a>分组选择器有时可以代替扩展方法</h3><p>有时候虽然两个同类型的模块很相似，但是你希望他们之间不要有依赖关系，也就是说你不希望使用扩展的方法，那么你可以通过合并选择器来设置共性的样式。<br>使用本方法的前提是：相同类型、功能和外观都相似，写在同一片代码区域方便维护。</p>
<pre><code>/* 两个元件共性的样式 */
.u-tip1,.u-tip2{}
.u-tip1 .itm,.u-tip2 .itm{}
/* 在分别是两个元件各自的样式 */
/* tip1 */
.u-tip1{}
.u-tip1 .itm{}
/* tip2 */
.u-tip2{}
.u-tip2 .itm{}
</code></pre><h3 id="防止污染和被污染"><a href="#防止污染和被污染" class="headerlink" title="防止污染和被污染"></a>防止污染和被污染</h3><p>当模块或元件之间互相嵌套，且使用了相同的标签选择器或其他后代选择器，那么里面的选择器就会被外面相同的选择器所影响。<br>所以，如果你的模块或元件可能嵌套或被嵌套于其他模块或元件，那么要慎用标签选择器，必要时采用类选择器，并注意命名方式，可以采用.m-layer .layerxxx、.m-list2 .list2xxx的形式来降低后代选择器的污染性。</p>
<h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><p>选择器、属性和值都使用小写<br>在xhtml标准中规定了所有标签、属性和值都小写，CSS也是如此。</p>
<h3 id="单行写完一个选择器定义"><a href="#单行写完一个选择器定义" class="headerlink" title="单行写完一个选择器定义"></a>单行写完一个选择器定义</h3><p>便于选择器的寻找和阅读，也便于插入新选择器和编辑，便于模块等的识别。去除多余空格，使代码紧凑减少换行。<br>如果有嵌套定义，可以采取内部单行的形式。</p>
<pre><code>/* 单行定义一个选择器 */
.m-list li,.m-list h3{width:100px;padding:10px;border:1px solid #ddd;}
/* 这是一个有嵌套定义的选择器 */
@media all and (max-width:600px){
    .m-class1 .itm{height:17px;line-height:17px;font-size:12px;}
    .m-class2 .itm{width:100px;overflow:hidden;}
}
@-webkit-keyframes showitm{
    0%{height:0;opacity:0;}
    100%{height:100px;opacity:1;}
}
</code></pre><h3 id="最后一个值也以分号结尾"><a href="#最后一个值也以分号结尾" class="headerlink" title="最后一个值也以分号结尾"></a>最后一个值也以分号结尾</h3><p>通常在大括号结束前的值可以省略分号，但是这样做会对修改、添加和维护工作带来不必要的失误和麻烦。</p>
<h3 id="省略值为0时的单位"><a href="#省略值为0时的单位" class="headerlink" title="省略值为0时的单位"></a>省略值为0时的单位</h3><p>为节省不必要的字节同时也使阅读方便，我们将0px、0em、0%等值缩写为0。</p>
<pre><code>.m-box{margin:0 10px;background-position:50% 0;}
</code></pre><h3 id="使用单引号"><a href="#使用单引号" class="headerlink" title="使用单引号"></a>使用单引号</h3><p>省略url引用中的引号，其他需要引号的地方使用单引号。</p>
<pre><code>.m-box{background:url(bg.png);}
.m-box:after{content:&apos;.&apos;;}
</code></pre><h3 id="使用16进制表示颜色值"><a href="#使用16进制表示颜色值" class="headerlink" title="使用16进制表示颜色值"></a>使用16进制表示颜色值</h3><p>除非你需要透明度而使用rgba，否则都使用#f0f0f0这样的表示方法，并尽量缩写。</p>
<pre><code>.m-box{color:#f00;background:rgba(0,0,0,0.5);}
</code></pre><h3 id="根据属性的重要性按顺序书写"><a href="#根据属性的重要性按顺序书写" class="headerlink" title="根据属性的重要性按顺序书写"></a>根据属性的重要性按顺序书写</h3><p>只遵循横向顺序即可，先显示定位布局类属性，后盒模型等自身属性，最后是文本类及修饰类属性。</p>
<p>| → | 显示属性 | 自身属性 | 文本属性和其他修饰 |<br>| | —– |:—-:| —– |:—-:|<br>| | display | width |    font |<br>| | visibility | height |    text-align |<br>| | position | margin | text-decoration |<br>| | float | padding |    vertical-align |<br>| | clear | border |    white-space |<br>| | list-style | overflow | color |<br>| | top | min-width |    background |</p>
<pre><code>.m-box{position:relative;width:600px;margin:0 auto 10px;text-align:center;color:#000;}
</code></pre><p>如果属性间存在关联性，则不要隔开写。</p>
<pre><code>/* 这里的height和line-height有关联性 */
.m-box{position:relative;height:20px;line-height:20px;padding:5px;color:#000;}
</code></pre><h3 id="私有在前，标准在后"><a href="#私有在前，标准在后" class="headerlink" title="私有在前，标准在后"></a>私有在前，标准在后</h3><p>先写带有浏览器私有标志的，后写W3C标准的。</p>
<pre><code>.m-box{-webkit-box-shadow:0 0 0 #000;-moz-box-shadow:0 0 0 #000;box-shadow:0 0 0 #000;}
</code></pre><h3 id="注释格式：-注释文字"><a href="#注释格式：-注释文字" class="headerlink" title="注释格式：/ 注释文字 /"></a>注释格式：/<em> 注释文字 </em>/</h3><p>对选择器的注释统一写在被注释对象的上一行，对属性及值的注释写于分号后。<br>注释内容两端需空格，已确保即使在编码错误的情况下也可以正确解析样式。<br>在必要的情况下，可以使用块状注释，块状注释保持统一的缩进对齐。<br>原则上每个系列的样式都需要有一个注释，言简意赅的表明名称、用途、注意事项等。</p>
<pre><code>/* 块状注释文字
 * 块状注释文字
 * 块状注释文字
 */
.m-list{width:500px;}
.m-list li{height:20px;line-height:20px;/* 这里是对line-height的一个注释 */overflow:hidden;}
.m-list li a{color:#333;}
/* 单行注释文字 */
.m-list li em{color:#666;}
</code></pre><h3 id="原则上不允许使用Hack"><a href="#原则上不允许使用Hack" class="headerlink" title="原则上不允许使用Hack"></a>原则上不允许使用Hack</h3><p>很多不兼容问题可以通过改变方法和思路来解决，并非一定需要Hack，根据经验你完全可以绕过某些兼容问题。<br>一种合理的结构和合理的样式，是极少会碰到兼容问题的。<br>由于浏览器自身缺陷，我们无法避开的时候，可以允许使用适当的Hack。</p>
<h3 id="统一Hack方法"><a href="#统一Hack方法" class="headerlink" title="统一Hack方法"></a>统一Hack方法</h3><p>统一使用“*”和“_”分别对IE7和6进行Hack。如下代码所示：</p>
<pre><code>/* IE7会显示灰色#888，IE6会显示白色#fff，其他浏览器显示黑色#000 */
.m-list{color:#000;*color:#888;_color:#fff;}
</code></pre><h3 id="建议并适当缩写值"><a href="#建议并适当缩写值" class="headerlink" title="建议并适当缩写值"></a>建议并适当缩写值</h3><p>“建议并适当”是因为缩写总是会包含一系列的值，而有时候我们并不希望设置某一值，反而造成了麻烦，那么这时候你可以不缩写，而是分开写。</p>
<p>当然，在一切可以缩写的情况下，请务必缩写，它最大的好处就是节省了字节，便于维护，并使阅读更加一目了然。</p>
<p>缩写方法请查阅css手册。</p>
<h3 id="选择器顺序"><a href="#选择器顺序" class="headerlink" title="选择器顺序"></a>选择器顺序</h3><p>请综合考虑以下顺序依据：</p>
<ol>
<li>从大到小（以选择器的范围为准）</li>
<li>从低到高（以等级上的高低为准）</li>
<li>从先到后（以结构上的先后为准）</li>
<li>从父到子（以结构上的嵌套为准）</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">以下仅为简单示范：</div><div class="line"><span class="comment">/* 从大到小 */</span></div><div class="line"><span class="selector-class">.m-list</span> <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;&#125;</div><div class="line"><span class="selector-class">.m-list</span> <span class="selector-tag">p</span><span class="selector-class">.part</span>&#123;<span class="attribute">margin</span>:<span class="number">1px</span>;<span class="attribute">padding</span>:<span class="number">1px</span>;&#125;</div><div class="line"><span class="comment">/* 从低到高 */</span></div><div class="line"><span class="selector-class">.m-logo</span> <span class="selector-tag">a</span>&#123;<span class="attribute">color</span>:<span class="number">#f00</span>;&#125;</div><div class="line"><span class="selector-class">.m-logo</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">color</span>:<span class="number">#fff</span>;&#125;</div><div class="line"><span class="comment">/* 从先到后 */</span></div><div class="line"><span class="selector-class">.g-hd</span>&#123;<span class="attribute">height</span>:<span class="number">60px</span>;&#125;</div><div class="line"><span class="selector-class">.g-bd</span>&#123;<span class="attribute">height</span>:<span class="number">60px</span>;&#125;</div><div class="line"><span class="selector-class">.g-ft</span>&#123;<span class="attribute">height</span>:<span class="number">60px</span>;&#125;</div><div class="line"><span class="comment">/* 从父到子 */</span></div><div class="line"><span class="selector-class">.m-list</span>&#123;<span class="attribute">width</span>:<span class="number">300px</span>;&#125;</div><div class="line"><span class="selector-class">.m-list</span> <span class="selector-class">.itm</span>&#123;<span class="attribute">float</span>:left;&#125;</div></pre></td></tr></table></figure>
<h3 id="选择器等级"><a href="#选择器等级" class="headerlink" title="选择器等级"></a>选择器等级</h3><p>a = 行内样式style。<br>b = ID选择器的数量。<br>c = 类、伪类和属性选择器的数量。<br>d = 类型选择器和伪元素选择器的数量。</p>
<table>
<thead>
<tr>
<th>选择器</th>
<th style="text-align:center">等级(a,b,c,d)</th>
</tr>
</thead>
<tbody>
<tr>
<td>style=””</td>
<td style="text-align:center">1,0,0,0</td>
</tr>
<tr>
<td>#wrapper #content {}</td>
<td style="text-align:center">0,2,0,0</td>
</tr>
<tr>
<td>#content .dateposted {}</td>
<td style="text-align:center">0,1,1,0</td>
</tr>
<tr>
<td>div#content {}</td>
<td style="text-align:center">0,1,0,1</td>
</tr>
<tr>
<td>#content p {}</td>
<td style="text-align:center">0,1,0,1</td>
</tr>
<tr>
<td>#content {}</td>
<td style="text-align:center">0,1,0,0</td>
</tr>
<tr>
<td>p.comment .dateposted {}</td>
<td style="text-align:center">0,0,2,1</td>
</tr>
<tr>
<td>div.comment p {}</td>
<td style="text-align:center">0,0,1,2</td>
</tr>
<tr>
<td>.comment p {}</td>
<td style="text-align:center">0,0,1,1</td>
</tr>
<tr>
<td>p.comment {}</td>
<td style="text-align:center">0,0,1,1</td>
</tr>
<tr>
<td>.comment {}</td>
<td style="text-align:center">0,0,1,0</td>
</tr>
<tr>
<td>div p {}</td>
<td style="text-align:center">0,0,0,2</td>
</tr>
<tr>
<td>p {}</td>
<td style="text-align:center">0,0,0,1</td>
</tr>
</tbody>
</table>
<h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><h3 id="值缩写"><a href="#值缩写" class="headerlink" title="值缩写"></a>值缩写</h3><p>缩写值可以减少CSS文件大小，并增加可读性和可维护性。<br>但并非所有的值都必须缩写，因为当一个属性的值缩写时，总是会将所有项都设置一遍，而有时候我们不希望设置值里的某些项。</p>
<pre><code>/* 比如我们用下面这个样式来让某个定宽的容器水平居中，我们要的只是left和right，
 * 而top和bottom不是这个样式要关心的（如果设置了反倒会影响其他样式在这个容器上的使用），
 * 所以这时我们就不需要缩写
 */
.f-mgha{margin-left:auto;margin-right:auto;}
/* 比如下面这个模块的样式设置，我们确实需要设置padding的所有项，于是我们就可以采用缩写 */
.m-link{padding:6px 12px;}
常用的缩写方法请参见代码格式。
</code></pre><h3 id="避免耗性能的属性"><a href="#避免耗性能的属性" class="headerlink" title="避免耗性能的属性"></a>避免耗性能的属性</h3><p>以下所举列的属性可能造成渲染性能问题。不过有时候需求大于一切……</p>
<pre><code>/* expression */
.class{width:expression(this.width&gt;100?&apos;100px&apos;:&apos;auto&apos;);}
/* filter */
.class{filter:alpha(opacity=50);}
</code></pre><h3 id="选择器合并"><a href="#选择器合并" class="headerlink" title="选择器合并"></a>选择器合并</h3><p>即CSS选择器组合，可以一次定义多个选择器，为你节省很多字节和宝贵时间。<br>通常我们会将定义相同的或者有大部分属性值相同（确实是因为相关而相同）的一系列选择器组合到一起（采用逗号的方法）来统一定义。</p>
<pre><code>/* 以下对布局类选择器统一做了清除浮动的操作 */
.g-hd:after,.g-bd:after,.g-ft:after{display:block;visibility:hidden;clear:both;height:0;content:&quot;.&quot;;}
.g-hd,.g-bd,.g-ft{zoom:1;}
/* 通常background总是会占用很多字节，所以一般情况下，我们都会这样统一调用 */
.m-logo,.m-help,.m-list li,.u-tab li,.u-tab li a{background:url(../images/sprite.png) no-repeat 9999px 9999px;}
.m-logo{background-position:0 0;}
/* 以下是某个元件的写法，因为确实很多元素是联动的或相关的，所以采用了组合写法，可以方便理解和修改 */
.u-tab li,.u-tab li a{display:inline;float:left;height:30px;line-height:30px;}
.u-tab li{margin:0 3px;}
.u-tab li a{padding:0 6px;}
</code></pre><h3 id="背景图优化合并"><a href="#背景图优化合并" class="headerlink" title="背景图优化合并"></a>背景图优化合并</h3><h4 id="图片本身的优化："><a href="#图片本身的优化：" class="headerlink" title="图片本身的优化："></a>图片本身的优化：</h4><ol>
<li>图像质量要求和图像文件大小决定你用什么格式的图片，用较小的图片文件呈现较好的图像质量。</li>
<li>当图片色彩过于丰富且无透明要求时，建议采用jpg格式并保存为较高质量。</li>
<li>当图片色彩过于丰富又有透明或半透明要求或阴影效果时，建议采用png24格式，并对IE6进行png8退化（或在不得已情况下使用滤镜）。</li>
<li>当图片色彩不太丰富时无论有无透明要求，请采用png8格式，大多数情况下建议采用这种格式。</li>
<li>当图片有动画时，只能使用gif格式。</li>
<li>你可以使用工具对图片进行再次压缩，但前提是不会影响色彩和透明。</li>
</ol>
<h4 id="多张图片的合并："><a href="#多张图片的合并：" class="headerlink" title="多张图片的合并："></a>多张图片的合并：</h4><ol>
<li>单个图标之间必须保留空隙，空隙大小由容器大小及显示方式决定。这样做的好处是既考虑了“容错性”又提高了图片的可维护性。</li>
<li>图标的排列方式，也由容器大小及显示方式决定。排列方式分为以下几种：横向排列（容器宽度有限）、纵向排列（容器高度有限）、斜线排列（容器宽高不限），靠左排列（容器背景居左）、靠右排列（容器背景居右）、水平居中排列（容器背景水平居中）、垂直居中排列（容器背景垂直居中）。</li>
<li>合并后图片大小不宜超过50K，建议大小在20K-50K之间。</li>
<li>为保证多次修改后的图片质量，请保留一份PSD原始图，修改和添加都在PSD中进行，最后导出png。</li>
</ol>
<h4 id="分类合并："><a href="#分类合并：" class="headerlink" title="分类合并："></a>分类合并：</h4><p>并不是把所有的图标都合并在一张图片里就是最好的，除了要控制图片大小之外还要注意以下方法。</p>
<ol>
<li>按照图片排列方式，把排列方式一样的图片进行合并，便于样式控制。</li>
<li>按照模块或元件，把同属于一个模块或元件的图片进行合并，方便模块或元件的维护。</li>
<li>按照图片大小，把大小一致或差不多的图片进行合并，可充分利用图片空间。</li>
<li>按照图片色彩，把色彩一致或差不多的图片进行合并，保证合并后图片的色彩不过于丰富，可防止色彩失真。</li>
<li>综合以上方法进行合并。</li>
</ol>
<h4 id="Hack的避免"><a href="#Hack的避免" class="headerlink" title="Hack的避免"></a>Hack的避免</h4><ol>
<li>当避免的代价较大时，可以使用Hack而不避免，比如你需要增加很多HTML或多写很多CSS时会得不偿失。</li>
<li>丰富的实战经验可以帮助你了解那些常见问题并用多种不同的思路来避免它，所以经验和思维方法在这里显得很重要。</li>
<li>根据你自己的能力来解决Hack的问题，我们不建议你用一个自己都没有把握的方法来避免Hack，因为也许你这个方法本身存在你没有发现的问题。</li>
</ol>
<h3 id="如果CSS可以做到，就不要使用JS"><a href="#如果CSS可以做到，就不要使用JS" class="headerlink" title="如果CSS可以做到，就不要使用JS"></a>如果CSS可以做到，就不要使用JS</h3><p>让CSS做更多的事，减轻JS开发量。</p>
<ol>
<li>用CSS控制交互或视觉的变化，JS只需要更改className。</li>
<li>利用CSS一次性更改多个节点样式，避免多次渲染，提高渲染效率。</li>
<li>如果你的产品允许不兼容低版本浏览器，那么动画实现可以交给CSS。</li>
</ol>
<h3 id="便于阅读修改"><a href="#便于阅读修改" class="headerlink" title="便于阅读修改"></a>便于阅读修改</h3><p>如果你做到了“CSS规范”的所有要求，自然你也就写出了一个便于阅读和修改的漂亮的CSS。当然，代码格式和命名规则是相对重要一些的。</p>
<h3 id="清晰的CSS模块"><a href="#清晰的CSS模块" class="headerlink" title="清晰的CSS模块"></a>清晰的CSS模块</h3><p>如果你做到了命名规则的要求，你的CSS模块也就清晰可见了。用“注释”来说明每一个模块对于较大的CSS文件来说显得尤为重要。</p>
<h3 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h3><p>合理的书写CSS能很大程度上减少文件大小，完成后，在不损坏文件内容的情况下，想尽一切办法压缩你的CSS，你可以借助压缩工具把注释和多余的空格、换行去掉。压缩工具详见：“HTML/CSS工具”部分。</p>
<h3 id="其他格式优化"><a href="#其他格式优化" class="headerlink" title="其他格式优化"></a>其他格式优化</h3><p>优化方法请参见代码格式。</p>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="最佳选择器写法（模块）"><a href="#最佳选择器写法（模块）" class="headerlink" title="最佳选择器写法（模块）"></a>最佳选择器写法（模块）</h3><pre><code>/* 这是某个模块 */
.m-nav{}/* 模块容器 */
.m-nav li,.m-nav a{}/* 先共性  优化组合 */
.m-nav li{}/* 后个性  语义化标签选择器 */
.m-nav a{}/* 后个性中的共性 按结构顺序 */
.m-nav a.a1{}/* 后个性中的个性 */
.m-nav a.a2{}/* 后个性中的个性 */
.m-nav .z-crt a{}/* 交互状态变化 */
.m-nav .z-crt a.a1{}
.m-nav .z-crt a.a2{}
.m-nav .btn{}/* 典型后代选择器 */
.m-nav .btn-1{}/* 典型后代选择器扩展 */
.m-nav .btn-dis{}/* 典型后代选择器扩展（状态） */
.m-nav .btn.z-dis{}/* 作用同上，请二选一（如果可以不兼容IE6时使用） */
.m-nav .m-sch{}/* 控制内部其他模块位置 */
.m-nav .u-sel{}/* 控制内部其他元件位置 */
.m-nav-1{}/* 模块扩展 */
.m-nav-1 li{}
.m-nav-dis{}/* 模块扩展（状态） */
.m-nav.z-dis{}/* 作用同上，请二选一（如果可以不兼容IE6时使用） */
</code></pre><h3 id="统一语义理解和命名"><a href="#统一语义理解和命名" class="headerlink" title="统一语义理解和命名"></a>统一语义理解和命名</h3><h4 id="布局（-g-）"><a href="#布局（-g-）" class="headerlink" title="布局（.g-）"></a>布局（.g-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>文档</td>
<td>doc</td>
<td>doc</td>
</tr>
<tr>
<td>头部</td>
<td>head</td>
<td>hd</td>
</tr>
<tr>
<td>主体</td>
<td>body</td>
<td>bd</td>
</tr>
<tr>
<td>尾部</td>
<td>foot</td>
<td>ft</td>
</tr>
<tr>
<td>主栏</td>
<td>main</td>
<td>mn</td>
</tr>
<tr>
<td>主栏子容器</td>
<td>mainc</td>
<td>mnc</td>
</tr>
<tr>
<td>侧栏</td>
<td>side</td>
<td>sd</td>
</tr>
<tr>
<td>侧栏子容器</td>
<td>sidec</td>
<td>sdc</td>
</tr>
<tr>
<td>盒容器</td>
<td>wrap/box</td>
<td>wrap/box</td>
</tr>
</tbody>
</table>
<h4 id="模块（-m-）、元件（-u-）"><a href="#模块（-m-）、元件（-u-）" class="headerlink" title="模块（.m-）、元件（.u-）"></a>模块（.m-）、元件（.u-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>导航</td>
<td>nav</td>
<td>nav</td>
</tr>
<tr>
<td>子导航</td>
<td>subnav</td>
<td>snav</td>
</tr>
<tr>
<td>面包屑</td>
<td>crumb</td>
<td>crm</td>
</tr>
<tr>
<td>菜单</td>
<td>menu</td>
<td>menu</td>
</tr>
<tr>
<td>选项卡</td>
<td>tab</td>
<td>tab</td>
</tr>
<tr>
<td>标题区</td>
<td>head</td>
<td>title    hd/tt</td>
</tr>
<tr>
<td>内容区</td>
<td>body</td>
<td>content    bd/ct</td>
</tr>
<tr>
<td>列表</td>
<td>list</td>
<td>lst</td>
</tr>
<tr>
<td>表格</td>
<td>table</td>
<td>tb</td>
</tr>
<tr>
<td>表单</td>
<td>form</td>
<td>fm</td>
</tr>
<tr>
<td>热点</td>
<td>hot</td>
<td>hot</td>
</tr>
<tr>
<td>排行</td>
<td>top</td>
<td>top</td>
</tr>
<tr>
<td>登录</td>
<td>login</td>
<td>log</td>
</tr>
<tr>
<td>标志</td>
<td>logo</td>
<td>logo</td>
</tr>
<tr>
<td>广告</td>
<td>advertise</td>
<td>ad</td>
</tr>
<tr>
<td>搜索</td>
<td>search</td>
<td>sch</td>
</tr>
<tr>
<td>幻灯</td>
<td>slide</td>
<td>sld</td>
</tr>
<tr>
<td>提示</td>
<td>tips</td>
<td>tips</td>
</tr>
<tr>
<td>帮助</td>
<td>help</td>
<td>help</td>
</tr>
<tr>
<td>新闻</td>
<td>news</td>
<td>news</td>
</tr>
<tr>
<td>下载</td>
<td>download</td>
<td>dld</td>
</tr>
<tr>
<td>注册</td>
<td>regist</td>
<td>reg</td>
</tr>
<tr>
<td>投票</td>
<td>vote</td>
<td>vote</td>
</tr>
<tr>
<td>版权</td>
<td>copyright</td>
<td>cprt</td>
</tr>
<tr>
<td>结果</td>
<td>result</td>
<td>rst</td>
</tr>
<tr>
<td>标题</td>
<td>title</td>
<td>tt</td>
</tr>
<tr>
<td>按钮</td>
<td>button</td>
<td>btn</td>
</tr>
<tr>
<td>输入</td>
<td>input</td>
<td>ipt</td>
</tr>
</tbody>
</table>
<h4 id="功能（-f-）"><a href="#功能（-f-）" class="headerlink" title="功能（.f-）"></a>功能（.f-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>浮动清除</td>
<td>clearboth</td>
<td>cb</td>
</tr>
<tr>
<td>向左浮动</td>
<td>floatleft</td>
<td>fl</td>
</tr>
<tr>
<td>向右浮动</td>
<td>floatright</td>
<td>fr</td>
</tr>
<tr>
<td>内联块级</td>
<td>inlineblock</td>
<td>ib</td>
</tr>
<tr>
<td>文本居中</td>
<td>textaligncenter</td>
<td>tac</td>
</tr>
<tr>
<td>文本居右</td>
<td>textalignright</td>
<td>tar</td>
</tr>
<tr>
<td>文本居左</td>
<td>textalignleft</td>
<td>tal</td>
</tr>
<tr>
<td>垂直居中</td>
<td>verticalalignmiddle</td>
<td>vam</td>
</tr>
<tr>
<td>溢出隐藏</td>
<td>overflowhidden</td>
<td>oh</td>
</tr>
<tr>
<td>完全消失</td>
<td>displaynone</td>
<td>dn</td>
</tr>
<tr>
<td>字体大小</td>
<td>fontsize</td>
<td>fs</td>
</tr>
<tr>
<td>字体粗细</td>
<td>fontweight</td>
<td>fw</td>
</tr>
</tbody>
</table>
<h4 id="皮肤（-s-）"><a href="#皮肤（-s-）" class="headerlink" title="皮肤（.s-）"></a>皮肤（.s-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>字体颜色</td>
<td>fontcolor</td>
<td>fc</td>
</tr>
<tr>
<td>背景</td>
<td>background</td>
<td>bg</td>
</tr>
<tr>
<td>背景颜色</td>
<td>backgroundcolor</td>
<td>bgc</td>
</tr>
<tr>
<td>背景图片</td>
<td>backgroundimage</td>
<td>bgi</td>
</tr>
<tr>
<td>背景定位</td>
<td>backgroundposition</td>
<td>bgp</td>
</tr>
<tr>
<td>边框颜色</td>
<td>bordercolor</td>
<td>bdc</td>
</tr>
</tbody>
</table>
<h4 id="状态（-z-）"><a href="#状态（-z-）" class="headerlink" title="状态（.z-）"></a>状态（.z-）</h4><table>
<thead>
<tr>
<th>语义</th>
<th>命名</th>
<th>简写</th>
</tr>
</thead>
<tbody>
<tr>
<td>选中</td>
<td>selected</td>
<td>sel</td>
</tr>
<tr>
<td>当前</td>
<td>current</td>
<td>crt</td>
</tr>
<tr>
<td>显示</td>
<td>show</td>
<td>show</td>
</tr>
<tr>
<td>隐藏</td>
<td>hide</td>
<td>hide</td>
</tr>
<tr>
<td>打开</td>
<td>open</td>
<td>open</td>
</tr>
<tr>
<td>关闭</td>
<td>close</td>
<td>close</td>
</tr>
<tr>
<td>出错</td>
<td>error</td>
<td>err</td>
</tr>
<tr>
<td>不可用</td>
<td>disabled</td>
<td>dis</td>
</tr>
</tbody>
</table>
<h2 id="典型错误"><a href="#典型错误" class="headerlink" title="典型错误"></a>典型错误</h2><h3 id="不符合NEC规范的选择器用法"><a href="#不符合NEC规范的选择器用法" class="headerlink" title="不符合NEC规范的选择器用法"></a>不符合NEC规范的选择器用法</h3><pre><code>.class{}
</code></pre><p>不要以一个没有类别的样式作为主选择器，这样的选择器只能作为后代选择器使用，比如.m-xxx .class{}。</p>
<pre><code>.m-xxx div{}
</code></pre><p>不要以没有语义的标签作为选择器，这会造成大面积污染，除非你可以断定现在或将来你的这个选择器不会污染其他同类。</p>
<pre><code>.g-xxx .class{}
</code></pre><p>不要在页面布局中使用后代选择器，因为这个后代选择器可能会污染里面的元素。</p>
<pre><code>.g-xxx .m-yyy{}.g-xxx .u-yyy{}
</code></pre><p>不要用布局去控制模块或元件，模块和元件应与布局分离独立。</p>
<pre><code>.m-xxx .f-xxx{}.m-xxx .s-xxx{}
</code></pre><p>不要通过模块或其他类来重定义或修改或添加已经定义好的功能类选择器和皮肤类选择器。</p>
<pre><code>.m-xxx .class .class .class .class{}
</code></pre><p>不要将选择器写的过于冗长，这会额外增加文件大小并且限制了太小范围的选择器，使树形结构过于严格应用范围过于局限，建议3-4个长度之内写完。选择器并不需要完整反映结构嵌套顺序，相反，能简则简。</p>
<pre><code>.m-xxx .m-yyy .zzz{}
</code></pre><p>不要越级控制，如果.zzz是.m-yyy的后代选择器，那么不允许.m-yyy之外的选择器控制或修改.zzz。此时可以使用.m-yyy的扩展来修改.zzz，比如.m-yyy-1 .zzz{}。</p>
<h3 id="扩展类使用错误"><a href="#扩展类使用错误" class="headerlink" title="扩展类使用错误"></a>扩展类使用错误</h3><p>扩展类必须和其基类同时使用于同一个节点。</p>
<pre><code>错误：
class=&quot;g-xxx g-yyy-1&quot; 
class=&quot;m-xxx-1&quot; 
class=&quot;u-xxx u-yyy-1&quot; 
class=&quot;xxx-yyy&quot;。
正确：
class=&quot;g-xxx g-xxx-1&quot; 
class=&quot;m-xxx m-xxx-1&quot; 
class=&quot;u-yyy u-yyy-1&quot; 
class=&quot;xxx xxx-yyy&quot;。
</code></pre><p>参考资料：<br><a href="http://www.csdn.net/article/2011-12-02/308445" target="_blank" rel="external">编写出色CSS代码的13个建议</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;规范：&lt;/strong&gt;你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！&lt;br&gt;
    
    </summary>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>前端代码规范Javascript</title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normjs/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normjs/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><blockquote>
<p>JavaScript支持大小写<br>统一使用单引号<br>命名使用驼峰法则<br>开头字母大写，表示对象。</p>
</blockquote>
<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><h3 id="变量命名-1"><a href="#变量命名-1" class="headerlink" title="变量命名"></a>变量命名</h3><ol>
<li>匈牙利命名：</li>
</ol>
<p>开头字母用变量类型的缩写，其余部分用变量的英文或英文的缩写，要求单词第一个字母大写。</p>
<pre><code>For example: long lsum = 0;&quot;l&quot;是类型的缩写；
s：表示字符串。例如：sName，sHtml；
n：表示数字。例如：nPage，nTotal；
b：表示逻辑。例如：bChecked，bHasLogin；
a：表示数组。例如：aList，aGroup；
r：表示正则表达式。例如：rDomain，rEmail；
f：表示函数。例如：fGetHtml，fInit；
o：表示以上未涉及到的其他对象，例如：oButton，oDate；
g：表示全局变量，例如：gUserName，gLoginTime；
</code></pre><ol>
<li>驼峰式：</li>
</ol>
<p>第一个单词首字母小写，后面其他单词首字母大写。</p>
<pre><code>For example:  firstName 
</code></pre><h3 id="函数命名"><a href="#函数命名" class="headerlink" title="函数命名"></a>函数命名</h3><ol>
<li><p>函数命名：统一使用动词或者动词+名词形式 —- fnInit()</p>
</li>
<li><p>对象方法命名使用fn+对象类名+动词+名词形式   fnAnimateDoRun() </p>
</li>
<li><p>某事件响应函数命名方式为fn+触发事件对象名+事件名或者模块名  fnDivClick()</p>
</li>
</ol>
<p>附常用的动词列表：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">含义</th>
<th>名称</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>get</td>
<td style="text-align:center">获取</td>
<td>set</td>
<td style="text-align:center">设置</td>
</tr>
<tr>
<td>add</td>
<td style="text-align:center">增加</td>
<td>remove</td>
<td style="text-align:center">删除</td>
</tr>
<tr>
<td>create</td>
<td style="text-align:center">创建</td>
<td>destory</td>
<td style="text-align:center">移除</td>
</tr>
<tr>
<td>start</td>
<td style="text-align:center">启动</td>
<td>stop</td>
<td style="text-align:center">停止</td>
</tr>
<tr>
<td>open</td>
<td style="text-align:center">打开</td>
<td>close</td>
<td style="text-align:center">关闭</td>
</tr>
<tr>
<td>read</td>
<td style="text-align:center">读取</td>
<td>write</td>
<td style="text-align:center">写入</td>
</tr>
<tr>
<td>load</td>
<td style="text-align:center">载入</td>
<td>save</td>
<td style="text-align:center">保存</td>
</tr>
<tr>
<td>create</td>
<td style="text-align:center">创建</td>
<td>destroy</td>
<td style="text-align:center">销毁</td>
</tr>
<tr>
<td>begin</td>
<td style="text-align:center">开始</td>
<td>end</td>
<td style="text-align:center">结束</td>
</tr>
<tr>
<td>backup</td>
<td style="text-align:center">备份</td>
<td>restore</td>
<td style="text-align:center">恢复</td>
</tr>
<tr>
<td>import</td>
<td style="text-align:center">导入</td>
<td>export</td>
<td style="text-align:center">导出</td>
</tr>
<tr>
<td>split</td>
<td style="text-align:center">分割</td>
<td>merge</td>
<td style="text-align:center">合并</td>
</tr>
<tr>
<td>inject</td>
<td style="text-align:center">注入</td>
<td>extract</td>
<td style="text-align:center">提取</td>
</tr>
<tr>
<td>attach</td>
<td style="text-align:center">附着</td>
<td>detach</td>
<td style="text-align:center">脱离</td>
</tr>
<tr>
<td>bind</td>
<td style="text-align:center">绑定</td>
<td>separate</td>
<td style="text-align:center">分离</td>
</tr>
<tr>
<td>view</td>
<td style="text-align:center">查看</td>
<td>browse</td>
<td style="text-align:center">浏览</td>
</tr>
<tr>
<td>edit</td>
<td style="text-align:center">编辑</td>
<td>modify</td>
<td style="text-align:center">修改</td>
</tr>
<tr>
<td>select</td>
<td style="text-align:center">选取</td>
<td>mark</td>
<td style="text-align:center">标记</td>
</tr>
<tr>
<td>copy</td>
<td style="text-align:center">复制</td>
<td>paste</td>
<td style="text-align:center">粘贴</td>
</tr>
<tr>
<td>undo</td>
<td style="text-align:center">撤销</td>
<td>redo</td>
<td style="text-align:center">重做</td>
</tr>
<tr>
<td>insert</td>
<td style="text-align:center">插入</td>
<td>delete</td>
<td style="text-align:center">移除</td>
</tr>
<tr>
<td>add</td>
<td style="text-align:center">加入</td>
<td>append</td>
<td style="text-align:center">添加</td>
</tr>
<tr>
<td>clean</td>
<td style="text-align:center">清理</td>
<td>clear</td>
<td style="text-align:center">清除</td>
</tr>
<tr>
<td>index</td>
<td style="text-align:center">索引</td>
<td>sort</td>
<td style="text-align:center">排序</td>
</tr>
<tr>
<td>find</td>
<td style="text-align:center">查找</td>
<td>search</td>
<td style="text-align:center">搜索</td>
</tr>
<tr>
<td>increase</td>
<td style="text-align:center">增加</td>
<td>decrease</td>
<td style="text-align:center">减少</td>
</tr>
<tr>
<td>play</td>
<td style="text-align:center">播放</td>
<td>pause</td>
<td style="text-align:center">暂停</td>
</tr>
<tr>
<td>launch</td>
<td style="text-align:center">启动</td>
<td>run</td>
<td style="text-align:center">运行</td>
</tr>
<tr>
<td>compile</td>
<td style="text-align:center">编译</td>
<td>execute</td>
<td style="text-align:center">执行</td>
</tr>
<tr>
<td>debug</td>
<td style="text-align:center">调试</td>
<td>trace</td>
<td style="text-align:center">跟踪</td>
</tr>
<tr>
<td>observe</td>
<td style="text-align:center">观察</td>
<td>listen</td>
<td style="text-align:center">监听</td>
</tr>
<tr>
<td>build</td>
<td style="text-align:center">构建</td>
<td>publish</td>
<td style="text-align:center">发布</td>
</tr>
<tr>
<td>input</td>
<td style="text-align:center">输入</td>
<td>output</td>
<td style="text-align:center">输出</td>
</tr>
<tr>
<td>encode</td>
<td style="text-align:center">编码</td>
<td>decode</td>
<td style="text-align:center">解码</td>
</tr>
<tr>
<td>encrypt</td>
<td style="text-align:center">加密</td>
<td>decrypt</td>
<td style="text-align:center">解密</td>
</tr>
<tr>
<td>compress</td>
<td style="text-align:center">压缩</td>
<td>decompress</td>
<td style="text-align:center">解压缩</td>
</tr>
<tr>
<td>pack</td>
<td style="text-align:center">打包</td>
<td>unpack</td>
<td style="text-align:center">解包</td>
</tr>
<tr>
<td>parse</td>
<td style="text-align:center">解析</td>
<td>emit</td>
<td style="text-align:center">生成</td>
</tr>
<tr>
<td>connect</td>
<td style="text-align:center">连接</td>
<td>disconnect</td>
<td style="text-align:center">断开</td>
</tr>
<tr>
<td>send</td>
<td style="text-align:center">发送</td>
<td>receive</td>
<td style="text-align:center">接收</td>
</tr>
<tr>
<td>download</td>
<td style="text-align:center">下载</td>
<td>upload</td>
<td style="text-align:center">上传</td>
</tr>
<tr>
<td>refresh</td>
<td style="text-align:center">刷新</td>
<td>synchronize</td>
<td style="text-align:center">同步</td>
</tr>
<tr>
<td>update</td>
<td style="text-align:center">更新</td>
<td>revert</td>
<td style="text-align:center">复原</td>
</tr>
<tr>
<td>lock</td>
<td style="text-align:center">锁定</td>
<td>unlock</td>
<td style="text-align:center">解锁</td>
</tr>
<tr>
<td>check</td>
<td style="text-align:center">out</td>
<td>签出</td>
<td style="text-align:center">/check in 签入</td>
</tr>
<tr>
<td>submit</td>
<td style="text-align:center">提交</td>
<td>commit</td>
<td style="text-align:center">交付</td>
</tr>
<tr>
<td>push</td>
<td style="text-align:center">推</td>
<td>pull</td>
<td style="text-align:center">拉</td>
</tr>
<tr>
<td>expand</td>
<td style="text-align:center">展开</td>
<td>collapse</td>
<td style="text-align:center">折叠</td>
</tr>
<tr>
<td>begin</td>
<td style="text-align:center">起始</td>
<td>end</td>
<td style="text-align:center">结束</td>
</tr>
<tr>
<td>start</td>
<td style="text-align:center">开始</td>
<td>finish</td>
<td style="text-align:center">完成</td>
</tr>
<tr>
<td>enter</td>
<td style="text-align:center">进入</td>
<td>exit</td>
<td style="text-align:center">退出</td>
</tr>
<tr>
<td>abort</td>
<td style="text-align:center">放弃</td>
<td>quit</td>
<td style="text-align:center">离开</td>
</tr>
<tr>
<td>obsolete</td>
<td style="text-align:center">废弃</td>
<td>depreciate</td>
<td style="text-align:center">废旧</td>
</tr>
<tr>
<td>collect</td>
<td style="text-align:center">收集</td>
<td>aggregate</td>
<td style="text-align:center">聚集</td>
</tr>
</tbody>
</table>
<p>附上一段代码细细品味</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//类名</span></div><div class="line"><span class="keyword">var</span> ClassName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//私有变量</span></div><div class="line">	<span class="keyword">var</span> _FieldName = <span class="string">"Test Field"</span>;</div><div class="line">	<span class="comment">//属性</span></div><div class="line">	<span class="keyword">this</span>.PropertyName = <span class="string">"Test Property Name"</span>;</div><div class="line">	<span class="comment">//私有方法</span></div><div class="line">	<span class="keyword">var</span> functionName = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">&#125;</div><div class="line">A：加 _ 下划线前缀  </div><div class="line"></div><div class="line"><span class="keyword">this</span>.PublicFunctionName = <span class="function"><span class="keyword">function</span><span class="params">(pTestName)</span></span>&#123;<span class="comment">//公有方法 pTestName:参数</span></div><div class="line">    <span class="comment">//局部变量</span></div><div class="line">    <span class="keyword">var</span> condition = <span class="string">"condition"</span>;</div><div class="line">    <span class="comment">//判断</span></div><div class="line">    <span class="keyword">if</span>(condition)&#123;</div><div class="line">        <span class="keyword">return</span> functionName();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;&#125;</div><div class="line">    B：小写开头</div><div class="line">    <span class="comment">//数组</span></div><div class="line">    <span class="keyword">var</span> nameCol = [<span class="string">"a"</span>,<span class="string">"b"</span>]; </div><div class="line">    <span class="comment">//数组项</span></div><div class="line">    <span class="keyword">var</span> nameItem = nameCol[<span class="number">0</span>]; </div><div class="line">    <span class="comment">//循环</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nameCol.length; i++)&#123;</div><div class="line">    &#125;</div><div class="line">    C:大写开头</div><div class="line">    <span class="keyword">var</span> selectName = <span class="string">"item"</span>;</div><div class="line">    <span class="comment">//选择</span></div><div class="line">    <span class="keyword">switch</span>(selectName)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"item"</span>:</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    D：加小写p前缀</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>要避免全局变量泛滥， 可以考虑使用匿名函数， 把不需要在外部访问的变量或者函数限制在一个比较小的范围内。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">例如以下代码:</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    func1(); <span class="comment">//　自动运行</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这段代码的作用是在页面加载的时候自动执行某些操作， 并不需要被外部调用， 但是它执行过后却留下了一个全局的函数。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">像这种情况， 非常有必要使用匿名函数：</div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></span></div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">var</span> list = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;;</div><div class="line">    &#125;)(); <span class="comment">//　自动运行</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="匿名函数的格式："><a href="#匿名函数的格式：" class="headerlink" title="匿名函数的格式："></a>匿名函数的格式：</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// 代码块</span></div><div class="line">&#125;)();</div><div class="line">如果要带参数的话：</div><div class="line">(<span class="function"><span class="keyword">function</span><span class="params">(arg1, arg2, argN)</span></span>&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">&#125;)(arg1, arg2, argN);</div></pre></td></tr></table></figure>
<h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>还有另外一个方法可以减少全局变量， 那就是命名空间， 在JS中可以用”对象-属性”来模拟命名空间；</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">window</span>.com = &#123;&#125;</div><div class="line"><span class="keyword">window</span>.com.bytter = &#123;&#125;</div><div class="line"><span class="keyword">window</span>.com.bytter.hello = <span class="keyword">function</span>()&#123;</div><div class="line">    alert(<span class="string">"hello"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你要给某个已经存在的页面增加功能， 可能要增加十多个函数， 而那个页面已经存在大量的全局变量和函数， 甚至还有函数跟你新增的函数同名， 怎么办？<br>命名空间是比较好的选择， 你可以创建一个命名空间， 把你的新函数都放在那个命名空间之下， 例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"pg.check.userAcc()"</span>&gt;</span>检查用户名<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"pg.check.userAcc()"</span>&gt;</span>检查帐号<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="built_in">window</span>.pg = &#123;&#125;</div><div class="line">    <span class="built_in">window</span>.pg.check = &#123;</div><div class="line">        <span class="comment">// 检查用户名</span></div><div class="line">        userName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 检查帐号</span></div><div class="line">        userAcc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="互不干扰"><a href="#互不干扰" class="headerlink" title="互不干扰"></a>互不干扰</h3><p>结合上述的匿名函数和命名空间的使用， 可以把一个页面中自己维护的代码与其它的代码分隔开来， 将与外部代码的耦合降低到最小。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">// 页面命名空间</span></div><div class="line">    <span class="built_in">window</span>.pg = &#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 检查用户信息</span></div><div class="line">    <span class="comment">// 作者：张三</span></div><div class="line">    <span class="comment">// 最后更新： 2012.12.31</span></div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 私有变量</span></div><div class="line">        <span class="keyword">var</span> a, b, c;</div><div class="line"></div><div class="line">        <span class="comment">// 检查用户信息的相关方法</span></div><div class="line">        <span class="built_in">window</span>.pg.check = &#123;</div><div class="line">            <span class="comment">// 检查用户名</span></div><div class="line">            userName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// 检查帐号</span></div><div class="line">            userAcc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="comment">//..</span></div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    &#125;)(); <span class="comment">// end 张三的代码</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// xxx功能</span></div><div class="line">    <span class="comment">// 作者：李四</span></div><div class="line">    <span class="comment">// 最后更新： 2012.1.1</span></div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">window</span>.pg.xxx = &#123;</div><div class="line">            <span class="comment">//..</span></div><div class="line">        &#125;</div><div class="line">    &#125;)(); <span class="comment">// end 李四的代码</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>变量必须在使用前用var进行声明；<br>变量的声明应该放在代码块或者函数的头部；<br>可在一行内声明多个变量， 但要考虑美观易读；</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 银行名称, 银行帐号 </span></div><div class="line"><span class="keyword">var</span> type, acc;</div><div class="line"></div><div class="line"><span class="comment">// 银行名称, 银行帐号</span></div><div class="line"><span class="keyword">var</span> type = <span class="string">"中国银行"</span>, acc = <span class="string">"xxxxxx"</span>;</div><div class="line"><span class="keyword">var</span> type = <span class="string">"中国银行"</span>,   <span class="comment">// 银行名称</span></div><div class="line">    acc = <span class="string">"xxxxxx"</span>;      <span class="comment">// 银行帐号</span></div><div class="line">尽量使用易于理解的变量名，如：</div><div class="line"><span class="keyword">var</span> bankType = <span class="string">"中国银行"</span>,</div><div class="line">    bankAccount = <span class="string">"xxxxxx"</span>; </div><div class="line"><span class="comment">### 命名</span></div><div class="line">普通变量名和函数名采用<span class="string">"小驼峰式命名法"</span>， 如：firstName、lastName</div><div class="line">作为构造函数的函数采用<span class="string">"大驼峰式命名法"</span>， 如：</div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person();</div><div class="line">常量用大写和下划线表示，如：</div><div class="line"><span class="keyword">var</span> ROOT_PATH = <span class="string">"/v10/"</span>;</div><div class="line">分号</div><div class="line">每条语句必须使用分号结尾（特别是需要压缩的js，省略分号常常会导致压缩失败）；</div><div class="line">大括号</div><div class="line"><span class="keyword">if</span>语句、函数定义、<span class="keyword">try</span>语句等带大括号的结构， 左大括号应紧跟前面的部分：</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">//..</span></div><div class="line">&#125;</div><div class="line">使用复合语句时不要省略大括号&#123;&#125;</div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++)&#123;</div><div class="line">    <span class="keyword">list</span>.push(ary[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++)</div><div class="line">    <span class="keyword">list</span>.push(ary[i]);</div><div class="line">以提高代码可读性为前提，允许例外：</div><div class="line"><span class="keyword">if</span>(!data) <span class="keyword">return</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(row) <span class="keyword">list</span>.push(row);</div></pre></td></tr></table></figure>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>数值操作符(如, +/-/*/% 等)、比较符（大于、小于、等于）两边留空格；<br>逗号、冒号、分号后要留一个空格（如果后面还有内容的话）；<br>行尾不要有空格;<br>点号前后不要出现空格；<br>函数名末尾和左括号之间不要出现空格；<br>字符串<br>表示字符串用单引号或双引号均可， 建议统一使用双引号，<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">但表示html标签时一律使用单引号， 如：</div><div class="line">var html = '&lt;div class=<span class="string">"msg"</span> &gt;&lt;/div&gt;';</div><div class="line">数组</div><div class="line">使用简便的方式定义数组：</div><div class="line"><span class="comment">// good</span></div><div class="line">var <span class="type">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line">var <span class="type">list</span> = new Array();</div><div class="line"><span class="type">list</span>[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line"><span class="type">list</span>[<span class="number">1</span>] = <span class="number">2</span>;</div><div class="line"><span class="type">list</span>[<span class="number">2</span>] = <span class="number">3</span>;</div></pre></td></tr></table></figure></p>
<h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><pre><code>语法：
// 这是单行注释
</code></pre><p>使用方式：</p>
<blockquote>
<ol>
<li>单独一行：//(双斜线)与注释文字之间保留一个空格。</li>
<li>在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</li>
<li>注释代码：//(双斜线)与代码之间保留一个空格。</li>
</ol>
</blockquote>
<p>示例：</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">//</span> 调用了一个函数；1)单独在一行</div><div class="line"><span class="keyword">set</span>Title<span class="params">()</span>;</div><div class="line">var maxCount = 10; <span class="string">//</span> 设置最大量；2)在代码后面注释</div><div class="line"><span class="string">//</span> <span class="keyword">set</span>Name<span class="params">()</span>; <span class="string">//</span> 3)注释代码</div></pre></td></tr></table></figure>
<h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><pre><code>语法：/* 注释说明 */
</code></pre><p>使用方法：</p>
<blockquote>
<ol>
<li>若开始(/<em>)和结束(</em>/)都在一行，推荐采用单行注释。</li>
<li>若至少三行注释时，第一行为/<em>，最后行为</em>/，其他行以<em>开始，并且注释文字与</em>保留一个空格。</li>
</ol>
</blockquote>
<p>示例：</p>
<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">* 代码执行到这里后会调用<span class="keyword">set</span>Title<span class="params">()</span>函数</div><div class="line">* <span class="keyword">set</span>Title<span class="params">()</span>：设置title的值</div><div class="line">*/</div><div class="line"><span class="keyword">set</span>Title<span class="params">()</span>;</div></pre></td></tr></table></figure>
<h3 id="函数-方法-注释"><a href="#函数-方法-注释" class="headerlink" title="函数(方法)注释"></a>函数(方法)注释</h3><p>说明：函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 javadoc(百度百科)。</p>
<p>语法：</p>
<pre><code>/** 
* 函数说明 
* @关键字 
*/
</code></pre><p>常用注释关键字：(只列出一部分，并不是全部)</p>
<p>示例：</p>
<table>
<thead>
<tr>
<th style="text-align:left">注释名</th>
<th>语法</th>
<th>示例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@name</td>
<td>@name 名称</td>
<td>@name WacthClock</td>
</tr>
<tr>
<td style="text-align:left">@author</td>
<td>@author 作者 邮箱</td>
<td>@author Luuman <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#108;&#117;&#x75;&#x6d;&#x61;&#x6e;&#x73;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;">&#108;&#117;&#x75;&#x6d;&#x61;&#x6e;&#x73;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a></td>
</tr>
<tr>
<td style="text-align:left">@brief</td>
<td>@brief  描述</td>
<td>@brief this is watch for clock in canvas.</td>
</tr>
<tr>
<td style="text-align:left">@dateTime</td>
<td>@dateTime 时间</td>
<td>@dateTime 2016-11-27</td>
</tr>
<tr>
<td style="text-align:left">@moreInfo</td>
<td>@moreInfo 链接</td>
<td>@moreInfo luuman.github.io/[link]</td>
</tr>
<tr>
<td style="text-align:left">@version</td>
<td>@version XX.XX.XX</td>
<td>@version 1.0.3</td>
</tr>
<tr>
<td style="text-align:left">@param</td>
<td>@param 名 {[type]}  描述信息</td>
<td>@param name {String} 传入名称</td>
</tr>
<tr>
<td style="text-align:left">@return</td>
<td>@return {[type]} 描述信息</td>
<td>@return {Boolean} true:可执行;false:不可执行</td>
</tr>
<tr>
<td style="text-align:left">@example</td>
<td>@example 示例代码</td>
<td>@example WacthClock({});</td>
</tr>
</tbody>
</table>
<figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * <span class="meta">@name</span>     WacthClock              watch clock js</div><div class="line"> * <span class="meta">@author</span>   Luuman                  &lt;luumans<span class="meta">@qq</span>.com&gt;</div><div class="line"> * <span class="meta">@brief</span>    this is watch <span class="keyword">for</span> clock <span class="keyword">in</span> canvas.</div><div class="line"> * <span class="meta">@dateTime</span> <span class="number">2016</span>-<span class="number">11</span>-<span class="number">27</span></div><div class="line"> * <span class="meta">@moreInfo</span> luuman.github.io/[link]</div><div class="line"> * <span class="meta">@version</span>  <span class="number">1.0</span><span class="number">.0</span></div><div class="line"> * <span class="meta">@param</span>    &#123;[<span class="keyword">type</span>]&#125;</div><div class="line"> * <span class="meta">@param</span>    &#123;[<span class="keyword">type</span>]&#125;</div><div class="line"> * <span class="meta">@param</span>    &#123;[<span class="keyword">type</span>]&#125;</div><div class="line"> * <span class="meta">@return</span>   &#123;[<span class="keyword">type</span>]&#125;</div><div class="line"> * <span class="meta">@example</span> WacthClock(&#123;&#125;);</div><div class="line"> */</div></pre></td></tr></table></figure>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/<span class="symbol">*</span><span class="symbol">*</span></div><div class="line"><span class="symbol">*</span> 合并Grid的行</div><div class="line"><span class="symbol">*</span> <span class="meta">@param</span> grid &#123;Ext.Grid.Panel&#125; 需要合并的Grid</div><div class="line"><span class="symbol">*</span> <span class="meta">@param</span> cols &#123;Array&#125; 需要合并列的Index(序号)数组；从0开始计数，序号也包含。</div><div class="line"><span class="symbol">*</span> <span class="meta">@param</span> isAllSome &#123;Boolean&#125; ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样</div><div class="line"><span class="symbol">*</span> <span class="meta">@return</span> void</div><div class="line"><span class="symbol">*</span> <span class="meta">@author</span> polk6 2015/07/21 </div><div class="line"><span class="symbol">*</span> <span class="meta">@example</span></div><div class="line"><span class="symbol">*</span> _________________                             _________________</div><div class="line"><span class="symbol">*</span> |<span class="string">  年龄 </span>|<span class="string">  姓名 </span>|<span class="string">                             </span>|<span class="string">  年龄 </span>|<span class="string">  姓名 </span>|</div><div class="line"><span class="symbol">*</span> -----------------      mergeCells(grid,[0])   -----------------</div><div class="line"><span class="symbol">*</span> |<span class="string">  18   </span>|<span class="string">  张三 </span>|<span class="string">              =&gt;             </span>|<span class="string">       </span>|<span class="string">  张三 </span>|</div><div class="line"><span class="symbol">*</span> -----------------                             -  18   ---------</div><div class="line"><span class="symbol">*</span> |<span class="string">  18   </span>|<span class="string">  王五 </span>|<span class="string">                             </span>|<span class="string">       </span>|<span class="string">  王五 </span>|</div><div class="line"><span class="symbol">*</span> -----------------                             -----------------</div><div class="line"><span class="symbol">*</span>/</div><div class="line">function mergeCells(grid, cols, isAllSome) &#123;</div><div class="line">    // Do Something</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/polk6/p/4660195.html" target="_blank" rel="external">JavaScript 开发规范</a><br><a href="http://www.codeweblog.com/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/" target="_blank" rel="external">javascript学习笔记(一)基础知识</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;规范：&lt;/strong&gt;你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！&lt;br&gt;
    
    </summary>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
    
      <category term="Javascript" scheme="http://luuman.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML前端代码规范</title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normhtml/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normhtml/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><h3 id="HTML基础设施"><a href="#HTML基础设施" class="headerlink" title="HTML基础设施"></a>HTML基础设施</h3><p>文件应以“&lt;!DOCTYPE ……&gt;”首行顶格开始，推荐使用“&lt;!DOCTYPE html&gt;”。<br>必须申明文档的编码charset，且与文件本身编码保持一致，推荐使用UTF-8编码<meta charset="utf-8">。<br>根据页面内容和需求填写适当的keywords和description。<br>页面title是极为重要的不可缺少的一项。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>NEC：更好的CSS方案<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/style.css"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"img/favicon.ico"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"img/touchicon.png"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="结构顺序和视觉顺序基本保持一致"><a href="#结构顺序和视觉顺序基本保持一致" class="headerlink" title="结构顺序和视觉顺序基本保持一致"></a>结构顺序和视觉顺序基本保持一致</h3><p>按照从上至下、从左到右的视觉顺序书写HTML结构。<br>有时候为了便于搜索引擎抓取，我们也会将重要内容在HTML结构顺序上提前。<br>用div代替table布局，可以使HTML更具灵活性，也方便利用CSS控制。<br>table不建议用于布局，但表现具有明显表格形式的数据，table还是首选。<br>结构、表现、行为三者分离，避免内联<br>使用link将css文件引入，并置于head中。<br>使用script将js文件引入，并置于body底部。<br>保持良好的简洁的树形结构<br>每一个块级元素都另起一行，每一行都使用Tab缩进对齐（head和body的子元素不需要缩进）。删除冗余的行尾的空格。<br>使用4个空格代替1个Tab（大多数编辑器中可设置）。<br>对于内容较为简单的表格，建议将tr写成单行。<br>你也可以在大的模块之间用空行隔开，使模块更清晰。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 侧栏内容区 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-side"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"side"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidein"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 热门标签 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideblk"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-hd3"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"tit"</span>&gt;</span>热门标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                ...</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 最热TOP5 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideblk"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-hd3"</span>&gt;</span><span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"tit"</span>&gt;</span>最热TOP5<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"s-fc02 f-fr"</span>&gt;</span>更多»<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                ...</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /侧栏内容区 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="另外，请做到以下几点"><a href="#另外，请做到以下几点" class="headerlink" title="另外，请做到以下几点"></a>另外，请做到以下几点</h3><ol>
<li>结构上如果可以并列书写，就不要嵌套。如果可以写成<code>&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</code>那么就不要写成<code>&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
<li>如果结构已经可以满足视觉和语义的要求，那么就不要有额外的冗余的结构。比如<code>&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt;</code>已经能满足要求，那么就不要再写成<code>&lt;div&gt;&lt;div&gt;&lt;h2&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;</code></li>
<li>一个标签上引用的className不要过多，越少越好。比如不要出现这种情况：<code>&lt;div class=&quot;class1 class2 class3 class4&quot;&gt;&lt;/div&gt;</code></li>
<li>对于一个语义化的内部标签，应尽量避免使用className。比如在这样一个列表中，li标签中的itm应去除：<code>&lt;ul class=&quot;m-help&quot;&gt;&lt;li class=&quot;itm&quot;&gt;&lt;/li&gt;&lt;li class=&quot;itm&quot;&gt;&lt;/li&gt;&lt;/ul&gt;</code></li>
</ol>
<h2 id="代码格式"><a href="#代码格式" class="headerlink" title="代码格式"></a>代码格式</h2><h3 id="说明文案的注释方法"><a href="#说明文案的注释方法" class="headerlink" title="说明文案的注释方法"></a>说明文案的注释方法</h3><p>采用类似标签闭合的写法，与HTML统一格式；注释文案两头空格，与CSS注释统一格式。</p>
<p>开始注释：<!-- 注释文案 -->（文案两头空格）。<br>结束注释：<!-- /注释文案 -->（文案前加“/”符号，类似标签的闭合）。<br>允许只有开始注释！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 头部 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-hd"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- LOGO --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"m-logo"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>LOGO<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- /LOGO --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 导航 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"m-nav"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>NAV1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>NAV2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 更多导航项 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- /导航 --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /头部 --&gt;</span></div></pre></td></tr></table></figure>
<h3 id="代码本身的注释方法"><a href="#代码本身的注释方法" class="headerlink" title="代码本身的注释方法"></a>代码本身的注释方法</h3><p>单行代码的注释也保持同行，两端空格；多行代码的注释起始和结尾都另起一行并左缩进对齐。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;h1 class="m-logo"&gt;&lt;a href="#"&gt;LOGO&lt;/a&gt;&lt;/h1&gt; --&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;ul class="m-nav"&gt;</div><div class="line">    &lt;li&gt;&lt;a href="#"&gt;NAV1&lt;/a&gt;&lt;/li&gt;</div><div class="line">    &lt;li&gt;&lt;a href="#"&gt;NAV2&lt;/a&gt;&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">--&gt;</div></pre></td></tr></table></figure>
<h3 id="HTML注释在IE6中的BUG"><a href="#HTML注释在IE6中的BUG" class="headerlink" title="HTML注释在IE6中的BUG"></a>HTML注释在IE6中的BUG</h3><p>如果两个浮动元素之间存在注释，那么可能导致布局错位或文字的BUG。<br>所以，这种情况下，我们通常将注释去掉，或者索性采用模板语言（ftl、vm）的注释。</p>
<h3 id="严格的嵌套"><a href="#严格的嵌套" class="headerlink" title="严格的嵌套"></a>严格的嵌套</h3><p>尽可能以最严格的xhtml strict标准来嵌套，比如内联元素不能包含块级元素等等。<br>正确闭合标签且必须闭合。</p>
<h3 id="严格的属性"><a href="#严格的属性" class="headerlink" title="严格的属性"></a>严格的属性</h3><p>属性和值全部小写，每个属性都必须有一个值，每个值必须加双引号。<br>没有值的属性必须使用自己的名称做为值（checked、disabled、readonly、selected等等）。<br>可以省略style标签和script标签的type属性。</p>
<h3 id="常用的标签"><a href="#常用的标签" class="headerlink" title="常用的标签"></a>常用的标签</h3><table>
<thead>
<tr>
<th>标签</th>
<th>语义</th>
<th style="text-align:center">嵌套常见错误</th>
<th>常用属性（加粗的为不可缺少的或建议的）</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>超链接/锚</td>
<td style="text-align:center">a不可嵌套a</td>
<td>href,name,title,rel,target</td>
</tr>
<tr>
<td>br</td>
<td>换行</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>button</td>
<td>按钮</td>
<td style="text-align:center">不可嵌套表单元素</td>
<td>type,disabled</td>
</tr>
<tr>
<td>dd</td>
<td>定义列表中的定义（描述内容）</td>
<td style="text-align:center">只能以dl为父容器，对应一个dt</td>
<td></td>
</tr>
<tr>
<td>del</td>
<td>文本删除</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>div</td>
<td>块级容器</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>dl</td>
<td>定义列表</td>
<td style="text-align:center">只能嵌套dt和dd</td>
<td></td>
</tr>
<tr>
<td>dt</td>
<td>定义列表中的定义术语</td>
<td style="text-align:center">只能以dl为父容器，对应多个dd</td>
<td></td>
</tr>
<tr>
<td>em</td>
<td>强调文本</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>form</td>
<td>表单</td>
<td style="text-align:center">action</td>
<td>,target,method,name</td>
</tr>
<tr>
<td>h1</td>
<td>标题</td>
<td style="text-align:center">从h1到h6，不可嵌套块级元素</td>
<td></td>
</tr>
<tr>
<td>iframe</td>
<td>内嵌一个网页</td>
<td style="text-align:center">frameborder</td>
<td>,width,height,src,scrolling,name</td>
</tr>
<tr>
<td>img</td>
<td>图像</td>
<td style="text-align:center">alt</td>
<td>,src,width,height</td>
</tr>
<tr>
<td>input</td>
<td>各种表单控件</td>
<td style="text-align:center">type</td>
<td>,name,value,checked,disabled,maxlength,readonly,accesskey</td>
</tr>
<tr>
<td>label</td>
<td>标签为input元素定义标注</td>
<td style="text-align:center">for</td>
<td></td>
</tr>
<tr>
<td>li</td>
<td>列表项</td>
<td style="text-align:center">只能以ul或ol为父容器</td>
<td></td>
</tr>
<tr>
<td>link</td>
<td>引用样式或icon</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,rel,href</td>
</tr>
<tr>
<td>meta</td>
<td>文档信息</td>
<td style="text-align:center">只用于head</td>
<td>content,http-equiv,name</td>
</tr>
<tr>
<td>ol</td>
<td>有序列表</td>
<td style="text-align:center">只能嵌套li</td>
<td></td>
</tr>
<tr>
<td>option</td>
<td>select中的一个选项</td>
<td style="text-align:center">仅用于select</td>
<td>value,selected,disabled</td>
</tr>
<tr>
<td>p</td>
<td>段落</td>
<td style="text-align:center">不能嵌套块级元素</td>
<td></td>
</tr>
<tr>
<td>script</td>
<td>引用脚本</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,src</td>
</tr>
<tr>
<td>select</td>
<td>列表框或下拉框</td>
<td style="text-align:center">只能嵌套option或optgroup</td>
<td>name,disabled,multiple</td>
</tr>
<tr>
<td>span</td>
<td>内联容器</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>strong</td>
<td>强调文本</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>style</td>
<td>引用样式</td>
<td style="text-align:center">不可嵌套任何元素</td>
<td>type,media</td>
</tr>
<tr>
<td>sub</td>
<td>下标</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>sup</td>
<td>上标</td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>table</td>
<td>表格</td>
<td style="text-align:center">只可嵌套表格元素</td>
<td>width,align,background,cellpadding,cellspacing,summary,border</td>
</tr>
<tr>
<td>tbody</td>
<td>表格主体</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>td</td>
<td>表格中的单元格</td>
<td style="text-align:center">只用于tr</td>
<td>colspan,rowspan</td>
</tr>
<tr>
<td>textarea</td>
<td>多行文本输入控件</td>
<td style="text-align:center">name</td>
<td>,accesskey,disabled,readonly,rows,cols</td>
</tr>
<tr>
<td>tfoot</td>
<td>表格表尾</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>th</td>
<td>表格中的标题单元格</td>
<td style="text-align:center">只用于tr</td>
<td>colspan,rowspan</td>
</tr>
<tr>
<td>thead</td>
<td>表格表头</td>
<td style="text-align:center">只用于table</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>文档标题</td>
<td style="text-align:center">只用于head</td>
<td></td>
</tr>
<tr>
<td>tr</td>
<td>表格行</td>
<td style="text-align:center">嵌套于table或thead、tbody、tfoot</td>
<td></td>
</tr>
<tr>
<td>ul</td>
<td>无序列表</td>
<td style="text-align:center">只能嵌套li</td>
</tr>
</tbody>
</table>
<h2 id="内容语义"><a href="#内容语义" class="headerlink" title="内容语义"></a>内容语义</h2><h3 id="CSS文件的分类"><a href="#CSS文件的分类" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3><h3 id="内容类型决定使用的语义标签"><a href="#内容类型决定使用的语义标签" class="headerlink" title="内容类型决定使用的语义标签"></a>内容类型决定使用的语义标签</h3><p>在网页中某种类型的内容必定需要某种特定的HTML标签来承载，也就是我们常常提到的根据你的内容语义化HTML结构。</p>
<h3 id="加强“资源型”内容的可访问性和可用性"><a href="#加强“资源型”内容的可访问性和可用性" class="headerlink" title="加强“资源型”内容的可访问性和可用性"></a>加强“资源型”内容的可访问性和可用性</h3><p>在资源型的内容上加入描述文案，比如给img添加alt属性，在audio内加入文案和链接等等。</p>
<h3 id="加强“不可见”内容的可访问性"><a href="#加强“不可见”内容的可访问性" class="headerlink" title="加强“不可见”内容的可访问性"></a>加强“不可见”内容的可访问性</h3><p>背景图上的文字应该同时写在html中，并使用css使其不可见，有利于搜索引擎抓取你的内容，也可以在css失效的情况下看到内容。</p>
<h3 id="适当使用实体"><a href="#适当使用实体" class="headerlink" title="适当使用实体"></a>适当使用实体</h3><p>以实体代替与HTML语法相同的字符，避免浏览解析错误。</p>
<h3 id="常用HTML字符实体（建议使用实体）："><a href="#常用HTML字符实体（建议使用实体）：" class="headerlink" title="常用HTML字符实体（建议使用实体）："></a>常用HTML字符实体（建议使用实体）：</h3><table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">名称</th>
<th>实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td>“</td>
<td style="text-align:center">双引号</td>
<td>&quot;</td>
<td style="text-align:center">&#34;</td>
</tr>
<tr>
<td>&amp;</td>
<td style="text-align:center">&amp;符</td>
<td>&amp;</td>
<td style="text-align:center">&#38;</td>
</tr>
<tr>
<td>&lt;</td>
<td style="text-align:center">左尖括号（小于号）</td>
<td>&lt;</td>
<td style="text-align:center">&#60;</td>
</tr>
<tr>
<td>&gt;</td>
<td style="text-align:center">右尖括号（大于号）</td>
<td>&gt;</td>
<td style="text-align:center">&#62;</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">空格</td>
<td>&nbsp;</td>
<td style="text-align:center">&#160;</td>
</tr>
<tr>
<td></td>
<td style="text-align:center">中文全角空格</td>
<td></td>
<td style="text-align:center">&#12288;</td>
</tr>
</tbody>
</table>
<p>常用特殊字符实体（不建议使用实体）：</p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">名称</th>
<th>实体名</th>
<th style="text-align:center">实体数</th>
</tr>
</thead>
<tbody>
<tr>
<td>¥</td>
<td style="text-align:center">元</td>
<td>&yen;</td>
<td style="text-align:center">&#165;</td>
</tr>
<tr>
<td>¦</td>
<td style="text-align:center">断竖线</td>
<td>&brvbar;</td>
<td style="text-align:center">&#166;</td>
</tr>
<tr>
<td>©</td>
<td style="text-align:center">版权</td>
<td>&copy;</td>
<td style="text-align:center">&#169;</td>
</tr>
<tr>
<td>®</td>
<td style="text-align:center">注册商标R</td>
<td>&reg;</td>
<td style="text-align:center">&#174;</td>
</tr>
<tr>
<td>™</td>
<td style="text-align:center">商标TM</td>
<td>&trade;</td>
<td style="text-align:center">&#8482;</td>
</tr>
<tr>
<td>·</td>
<td style="text-align:center">间隔符</td>
<td>&middot;</td>
<td style="text-align:center">&#183;</td>
</tr>
<tr>
<td>«</td>
<td style="text-align:center">左双尖括号</td>
<td>&laquo;</td>
<td style="text-align:center">&#171;</td>
</tr>
<tr>
<td>»</td>
<td style="text-align:center">右双尖括号</td>
<td>&raquo;</td>
<td style="text-align:center">&#187;</td>
</tr>
<tr>
<td>°</td>
<td style="text-align:center">度</td>
<td>&deg;</td>
<td style="text-align:center">&#176;</td>
</tr>
<tr>
<td>×</td>
<td style="text-align:center">乘</td>
<td>&times;</td>
<td style="text-align:center">&#215;</td>
</tr>
<tr>
<td>÷</td>
<td style="text-align:center">除</td>
<td>&divide;</td>
<td style="text-align:center">&#247;</td>
</tr>
<tr>
<td>‰</td>
<td style="text-align:center">千分比</td>
<td>&permil;</td>
<td style="text-align:center">&#8240;</td>
</tr>
</tbody>
</table>
<h2 id="邮件内容"><a href="#邮件内容" class="headerlink" title="邮件内容"></a>邮件内容</h2><h3 id="邮件环境"><a href="#邮件环境" class="headerlink" title="邮件环境"></a>邮件环境</h3><p>邮件内容所在上下文或者说所在外部容器（以下简称环境）都是由邮箱服务商决定的，这就要求邮件内容需要在任何一种情况下都要正确显示。<br>这些环境可能是以下某几种情况：</p>
<ol>
<li>可能是个iframe，你的内容是被放在body里面的；可能只是个div，你的内容就被放在这个div里面。</li>
<li>可能邮箱自身设置了些css，他可能对你产生未知的影响。</li>
<li>可能根本没有申明doctype，即使申明了，也不是你想要的doctype。</li>
</ol>
<h3 id="避免被嵌套在不正确的容器里"><a href="#避免被嵌套在不正确的容器里" class="headerlink" title="避免被嵌套在不正确的容器里"></a>避免被嵌套在不正确的容器里</h3><p>惑：因为容器可能是body或div，所以，我们邮件内容不应该是一个完整的html。<br>解：所以邮件内容应该是以div为根节点的html片段。</p>
<h3 id="避免css冲突或被覆盖"><a href="#避免css冲突或被覆盖" class="headerlink" title="避免css冲突或被覆盖"></a>避免css冲突或被覆盖</h3><p>惑：因为环境中可能已经设置了css，比如一些reset、一些.class。<br>解：所以我们只能使用行内style来确保我们的效果，并且在内容根节点上设置基础style，并且尽量使用div、span等无语义标签。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 根节点 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;color:#000;font:normal 12px/15px arial,simsun;background:#fff;"</span>&gt;</span></div><div class="line">    内容区域</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 根节点-邮件内容居中 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;margin:0 auto;text-align:left;color:#000;font:normal 12px/15px arial,simsun;background:#fff;"</span>&gt;</span></div><div class="line">        内容区域</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 如果使用语义化标签，那么需要多写一些style，以避免被环境中的css覆盖 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"width:100px;height:100px;margin:0;padding:0;fong-weight:normal;font-size:12px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 而使用无语义标签，就可以省下很多style --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100px;height:100px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="避免盒模型错误"><a href="#避免盒模型错误" class="headerlink" title="避免盒模型错误"></a>避免盒模型错误</h3><p>惑：因为doctype的不确定性，我们在写style的时候，应该考虑无论doctype是什么情况，都可以正常显示，doctype影响最大的就是盒模型的解析。<br>解：所以我们要将盒模型拆分开来写，比如我们将原本要定义在某个div上的height和padding分别写到这个div和他的父元素或子元素上。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:100px;padding:20px 0;"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 上面的写法应该改成以下写法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:20px 0;"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:100px;"</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>因为只能使用行内style，所以清除浮动需要使用额外标签。<br>避免使用绝对定位，可能会被过滤。<br>避免使用js，可能会被过滤。<br>避免使用table布局，不易于修改维护。<br>背景图片或内容图片上的文字信息，必须在代码中可见。<br>如果没有特殊要求，所有a链接都要从新窗口打开，即target=”_blank”，且a标签内容不能为空。<br>所有链接必须设置使用颜色、是否下划线，即style=”text-decoration:;color:;”。<br>重点检查ie！！！</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;color:#000;font:normal 12px/15px simsun;background:#d9d9d9;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:268px;background:url(images/bg1.jpg) no-repeat;"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height:228px;"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:21px 0 0 21px;"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://yuedu.163.com/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">style</span>=<span class="string">"display:block;width:111px;height:28px;overflow:hidden;text-indent:-2000px;text-decoration:none;"</span> <span class="attr">title</span>=<span class="string">"网易阅读-随时随地品质阅读"</span>&gt;</span>网易阅读-随时随地品质阅读<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">"margin:0;padding:0;width:0;height:0;overflow:hidden;text-indent:-2000px;"</span>&gt;</span>你的iPad够有料吗？iPad不等于愤怒的小鸟！不等于切水果！下载网易阅读，给你的iPad添点料，打造你独一无二的iPad！<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding:0 0 0 35px;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://itunes.apple.com/cn/app/id421092396?mt=8"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">style</span>=<span class="string">"color:#f00;text-decoration:none;"</span> <span class="attr">title</span>=<span class="string">"下载网易阅读"</span>&gt;</span>下载网易阅读<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="发现的问题及解决方案"><a href="#发现的问题及解决方案" class="headerlink" title="发现的问题及解决方案"></a>发现的问题及解决方案</h3><p>问题：部分智能手机的邮件客户端可能会有只显示部分的bug（宽度被截）。<br>解决：在外面套一个同宽的table即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;table width=<span class="string">"600"</span> cellpadding=<span class="string">"0"</span> cellspacing=<span class="string">"0"</span> border=<span class="string">"0"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;color:#000;font:normal 12px/15px simsun;background:#d9d9d9;"</span>&gt;</span></div><div class="line">        ......</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="使用框架"><a href="#使用框架" class="headerlink" title="使用框架"></a>使用框架</h3><p>推荐使用 email框架 来创建邮件内容。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;font:12px/15px simsun;color:#000;background:#fff;"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 水平居左的邮件 --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">style</span>=<span class="string">"margin:0 auto;"</span>&gt;</span><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:600px;text-align:left;font:12px/15px simsun;color:#000;background:#fff;"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 水平居中的邮件 --&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/8d291d823cc0#" title="web前端规范" target="_blank" rel="external">web前端规范</a><br><a href="https://github.com/mishe/blog/issues/125" title="前端开发 @ 资邦集团（上海）" target="_blank" rel="external">新公司的前端开发规范（初稿） #125</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;规范：&lt;/strong&gt;你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！&lt;br&gt;
    
    </summary>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
    
      <category term="CSS" scheme="http://luuman.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>前端开发代码规范</title>
    <link href="http://luuman.github.io/2016/12/31/Skill/norm/normdev/"/>
    <id>http://luuman.github.io/2016/12/31/Skill/norm/normdev/</id>
    <published>2016-12-31T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>规范：</strong>你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！<br><a id="more"></a></p>
<h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><h3 id="了解产品和设计"><a href="#了解产品和设计" class="headerlink" title="了解产品和设计"></a>了解产品和设计</h3><ol>
<li>参加需求、交互、视觉会议，了解产品设计和项目成员。</li>
<li>了解产品面向的设备和平台。</li>
<li>了解产品对兼容性的要求以及是否采用响应式设计等。</li>
<li>了解产品要使用的技术（WEB技术、桌面技术、APP技术、模板语言、混合模式等）。</li>
</ol>
<h3 id="提出疑问和见解"><a href="#提出疑问和见解" class="headerlink" title="提出疑问和见解"></a>提出疑问和见解</h3><ol>
<li>在交互或视觉会议中结合技术要求，提出疑问和见解。</li>
<li>提出可能存在的问题（技术实现问题、性能问题等），协商解决方案（如优雅退化）并达成共识。</li>
<li>提出已有新技术可能在产品中的应用场景，协助产品创新。</li>
</ol>
<h3 id="技术调研和培训"><a href="#技术调研和培训" class="headerlink" title="技术调研和培训"></a>技术调研和培训</h3><ol>
<li>是否需要技术调研，提出可能存在的风险。</li>
<li>进行技术调研，产出技术demo，展示demo，反馈调研结果。</li>
<li>技术调研的内容可以先咨询经验丰富的前端工程师或前端技术组。</li>
<li>经验不足或新入职员工，可提出培训申请。</li>
<li>你可以把难以解决的技术问题提交给NEC，NEC将帮助你解决问题。</li>
<li>了解NEC，特别是代码规范和技术demo。</li>
</ol>
<h3 id="预算人力和时间"><a href="#预算人力和时间" class="headerlink" title="预算人力和时间"></a>预算人力和时间</h3><ol>
<li>根据项目时间要求及工作量，预算人力和时间。</li>
<li>预算开发周期和阶段性产出。</li>
<li>提醒需求方在项目管理平台中创建项目并加入项目成员，创建SVN并设置成员权限。</li>
</ol>
<h2 id="开发准备-1"><a href="#开发准备-1" class="headerlink" title="开发准备"></a>开发准备</h2><h3 id="CSS文件的分类"><a href="#CSS文件的分类" class="headerlink" title="CSS文件的分类"></a>CSS文件的分类</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;规范：&lt;/strong&gt;你是否常常碰到以下问题：你总是看不懂他写的代码，或者读起来很吃力；你需要改他的代码却无从下手，或总是要去问他这里是什么改了会不会影响其他代码；你和他一起开发一个产品，你总是怕代码和他有冲突或互相影响；你的代码在多次维护任务之后变得越来越臃肿，越来越难以维护。解决以上问题只需一种方法——读我们的规范！&lt;br&gt;
    
    </summary>
    
      <category term="Norm" scheme="http://luuman.github.io/categories/Norm/"/>
    
    
      <category term="Development" scheme="http://luuman.github.io/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>React Native Text</title>
    <link href="http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCText/"/>
    <id>http://luuman.github.io/2016/12/27/FrontFrame/ReactNative/Components/RNCText/</id>
    <published>2016-12-27T10:29:00.000Z</published>
    <updated>2017-07-28T10:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　<strong>自用笔记：</strong>本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why<br><a id="more"></a></p>
<h3 id="Text"><a href="#Text" class="headerlink" title="Text"></a>Text</h3><p>按官方文档的话来说，Text它也支持嵌套，样式和触摸处理。</p>
<h4 id="Props属性"><a href="#Props属性" class="headerlink" title="Props属性"></a>Props属性</h4><h5 id="accessible-bool"><a href="#accessible-bool" class="headerlink" title="accessible bool"></a>accessible bool</h5><p>文本可以显示的行数<br>clip is working only for iOS</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">accessible</span>=&#123;<span class="literal">true</span>&#125;</div></pre></td></tr></table></figure>
<h5 id="numberOfLines-number"><a href="#numberOfLines-number" class="headerlink" title="numberOfLines number"></a>numberOfLines number</h5><p>文本可以显示的行数</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">numberOfLines</span>=&#123;<span class="number">1</span>&#125;</div></pre></td></tr></table></figure>
<h5 id="onLayout-function"><a href="#onLayout-function" class="headerlink" title="onLayout function"></a>onLayout function</h5><p>布局发生变化时调用</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attribute">nativeEvent</span>: &#123;layout: &#123;x, y, width, height&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<h5 id="onLongPress-function"><a href="#onLongPress-function" class="headerlink" title="onLongPress function"></a>onLongPress function</h5><p>长按事件</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">onLongPress</span>=&#123;this.increaseSize&#125;&gt;</div></pre></td></tr></table></figure>
<h5 id="onPress-function"><a href="#onPress-function" class="headerlink" title="onPress function"></a>onPress function</h5><p>按下或者点击事件</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onPress=&#123;<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'1st'</span>)&#125;</div></pre></td></tr></table></figure>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="嵌套："><a href="#嵌套：" class="headerlink" title="嵌套："></a>嵌套：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleNested</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span></span></div><div class="line">        TitleNested地方</div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontWeight:</span> '<span class="attr">bold</span>', <span class="attr">fontSize:</span> <span class="attr">20</span>&#125;&#125;&gt;</span></div><div class="line">          I am bold地方</div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> '<span class="attr">red</span>'&#125;&#125;&gt;</span></div><div class="line">            and red地方</div><div class="line">          <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'TitleNested'</span>, () =&gt; TitleNested);</div></pre></td></tr></table></figure>
<h4 id="简书："><a href="#简书：" class="headerlink" title="简书："></a>简书：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleStyle</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.title_view&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title_text&#125;</span>&gt;</span>简书<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">numberOfLines</span>=<span class="string">&#123;1&#125;</span> <span class="attr">style</span>=<span class="string">&#123;styles.content_title_text&#125;</span>&gt;</span>不想过低配的人生，请先看看这本书<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.source_view&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.source_text&#125;</span>&gt;</span>余小鱼MsYu<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.source_text&#125;</span>&gt;</span>阅读7975<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">accessibilityLabel</span>=<span class="string">&#123;</span>'<span class="attr">Tap</span> <span class="attr">me</span>!'&#125; <span class="attr">accessible</span>=<span class="string">&#123;true&#125;</span> <span class="attr">numberOfLines</span>=<span class="string">&#123;2&#125;</span> <span class="attr">style</span>=<span class="string">&#123;styles.content_title_text&#125;</span>&gt;</span>我们熟悉的两种人生姿势：“飞黄腾达”和“赖在地上”。雾满拦江告诉你第三种：两脚不离大地，拼命向上生长。 ——《我不过低配的人生》<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.content_text&#125;</span>&gt;</span>作者是雾满拦江。乍一看，这名字很熟，似乎在哪里见过或听过，但具体不太了解。随即翻开简介，了解到：著名作家，“心学讲武堂”创始人，幽默写史领军人物。他写历史、职场，也写百态人情。其人特立独行、学识颇丰，其文辛辣生猛、犀利幽默，读之可以下酒。代表作有《神奇圣人王阳明》《别笑，这是大清正史》《民国就是这么生猛》《推背图中的历史》等。<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">backgroundColor</span>:<span class="string">'#FFF'</span>,</div><div class="line">  &#125;,</div><div class="line">   <span class="attr">title_view</span>:&#123;</div><div class="line">    <span class="attr">flexDirection</span>:<span class="string">'row'</span>,</div><div class="line">    <span class="attr">height</span>:<span class="number">50</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#E45E46'</span>,</div><div class="line">  &#125;,</div><div class="line">   <span class="attr">title_text</span>:&#123;</div><div class="line">    <span class="attr">color</span>:<span class="string">'#FFF'</span>,</div><div class="line">    <span class="attr">fontSize</span>:<span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>:<span class="string">'center'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">source_view</span>:&#123;</div><div class="line">    <span class="attr">flexDirection</span>:<span class="string">'row'</span>,</div><div class="line">    <span class="attr">height</span>:<span class="number">20</span>,</div><div class="line">    <span class="attr">marginTop</span>:<span class="number">10</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'space-between'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>:<span class="string">'#FFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">source_text</span>:&#123;</div><div class="line">    <span class="attr">color</span>:<span class="string">'#b1b1b1'</span>,</div><div class="line">    <span class="attr">fontSize</span>:<span class="number">14</span>,</div><div class="line">    <span class="attr">marginLeft</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">marginRight</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">textAlign</span>:<span class="string">'center'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">content_title_text</span>:&#123;</div><div class="line">    <span class="attr">color</span>:<span class="string">'#343434'</span>,</div><div class="line">    <span class="attr">fontSize</span>:<span class="number">20</span>,</div><div class="line">    <span class="attr">marginTop</span>:<span class="number">8</span>,</div><div class="line">    <span class="attr">marginLeft</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">marginRight</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">textAlign</span>:<span class="string">'left'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">content_text</span>:&#123;</div><div class="line">    <span class="attr">color</span>:<span class="string">'#b2b2b2'</span>,</div><div class="line">    <span class="attr">fontSize</span>:<span class="number">14</span>,</div><div class="line">    <span class="attr">lineHeight</span>: <span class="number">22</span>,</div><div class="line">    <span class="attr">marginTop</span>:<span class="number">12</span>,</div><div class="line">    <span class="attr">marginLeft</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">marginRight</span>:<span class="number">25</span>,</div><div class="line">    <span class="attr">textAlign</span>:<span class="string">'left'</span></div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent(<span class="string">'TitleStyle'</span>, () =&gt; TitleStyle);</div></pre></td></tr></table></figure>
<h4 id="新浪："><a href="#新浪：" class="headerlink" title="新浪："></a>新浪：</h4><p>header.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  PixelRatio,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Header</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.flexs&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.wangyi&#125;</span>&gt;</span>网易<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.xinwen&#125;</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span>&gt;</span>有态度"<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">flexs</span>:&#123;</div><div class="line">    <span class="attr">marginTop</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">borderBottomWidth</span>: <span class="number">3</span>/PixelRatio.get(),</div><div class="line">    <span class="attr">borderBottomColor</span>: <span class="string">'#EF2D36'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">title</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">25</span>,</div><div class="line">    <span class="attr">fontWeight</span>: <span class="string">'bold'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">wangyi</span>:&#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'#CD1D1C'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">xinwen</span>:&#123;</div><div class="line">    <span class="attr">color</span>: <span class="string">'#FFF'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#CD1D1C'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Header;</div></pre></td></tr></table></figure></p>
<p>index.android.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  PixelRatio,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="comment">// const Header = require('./header');</span></div><div class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./header'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.listItem&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.listItemFont&#125;</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImportantNews</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  show(title)&#123;</div><div class="line">    alert(title);</div><div class="line">    <span class="built_in">console</span>.log(title);</div><div class="line">  &#125;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">var</span> news = [];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span>.props.news)&#123;</div><div class="line">      <span class="keyword">var</span> text=(</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Text</span></span></span></div><div class="line">          <span class="attr">onPress</span>=<span class="string">&#123;this.show.bind(this,this.props.news[i])&#125;</span></div><div class="line">          <span class="attr">numberOfLines</span>=<span class="string">&#123;1&#125;</span></div><div class="line">          <span class="attr">style</span>=<span class="string">&#123;styles.newsItem&#125;</span></div><div class="line">          <span class="attr">key</span>=<span class="string">&#123;i&#125;</span></div><div class="line">        &gt;&#123;this.props.news[i]&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      );</div><div class="line">      news.push(text);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.flexs&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.newsTitle&#125;</span>&gt;</span>今日要闻<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        &#123;news&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">luumans</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">return</span>(</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.flexs&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">title</span>=<span class="string">'这些 Android 技术会很火'</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">title</span>=<span class="string">'为什么整个互联网行业都缺前端工程师？'</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">title</span>=<span class="string">'Android 开发中的日常积累'</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">List</span> <span class="attr">title</span>=<span class="string">'一个神奇的控件'</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ImportantNews</span></span></div><div class="line">          <span class="attr">news</span>=<span class="string">&#123;[</span></div><div class="line">            '找到问题了 注解框架没有获取到控件<span class="attr">id</span> <span class="attr">:sweat:</span>',</div><div class="line">            '我之前也遇到过，可能是一个<span class="attr">bug</span>吧，不知道怎么解决',</div><div class="line">            '非常喜欢。准备看着你的打一遍，能看懂，但是自己就敲不出来了，谢谢分享',</div><div class="line">            '不知道怎么上的首页',</div><div class="line">          ]&#125;&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">ImportantNews</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">flexs</span>:&#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">listItem</span>:&#123;</div><div class="line">    <span class="attr">height</span>: <span class="number">40</span>,</div><div class="line">    <span class="attr">marginLeft</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">marginRight</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">borderBottomWidth</span>: <span class="number">3</span>/PixelRatio.get(),</div><div class="line">    <span class="attr">borderBottomColor</span>: <span class="string">'#DDD'</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">listItemFont</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">16</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">newsTitle</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">fontWeight</span>: <span class="string">'bold'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#CD1D1C'</span>,</div><div class="line">    <span class="attr">marginLeft</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">marginTop</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">newsItem</span>:&#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">15</span>,</div><div class="line">    <span class="attr">lineHeight</span>: <span class="number">40</span>,</div><div class="line">    <span class="attr">marginLeft</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">marginRight</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'luumans'</span>, () =&gt; luumans);</div></pre></td></tr></table></figure></p>
<!-- #### StyleSheet样式
##### color color
##### fontFamily ReactPropTypes.string
##### fontSize ReactPropTypes.number
##### fontStyle ReactPropTypes.oneOf(['normal', 'italic'])
##### fontWeight ReactPropTypes.oneOf(
    ['normal' /*default*/, 'bold','100', '200', '300', '400', '500', '600', '700', '800', '900']
)
##### Specifies font weight. The values 'normal' and 'bold' are supported for most fonts. Not all fonts have a variant for each of the numeric values, in that case the ##### closest one is chosen.

##### lineHeight ReactPropTypes.number
##### textAlign ReactPropTypes.oneOf(
    ['auto' /*default*/, 'left', 'right', 'center', 'justify']
)
##### Specifies text alignment. The value 'justify' is only supported on iOS and fallbacks to left on Android.

##### textDecorationLine ReactPropTypes.oneOf(
    ['none' /*default*/, 'underline', 'line-through', 'underline line-through']
)
##### textShadowColor color
##### textShadowOffset ReactPropTypes.shape(
    {width: ReactPropTypes.number, height: ReactPropTypes.number}
)
##### textShadowRadius ReactPropTypes.number
##### androidtextAlignVertical ReactPropTypes.oneOf(
    ['auto' /*default*/, 'top', 'bottom', 'center']
)
##### iosfontVariant ReactPropTypes.arrayOf(
    ReactPropTypes.oneOf([
      'small-caps',
      'oldstyle-nums',
      'lining-nums',
      'tabular-nums',
      'proportional-nums',
    ])
)
##### iosletterSpacing ReactPropTypes.number
##### iostextDecorationColor color
##### iostextDecorationStyle ReactPropTypes.oneOf(
    ['solid' /*default*/, 'double', 'dotted','dashed']
)
##### ioswritingDirection ReactPropTypes.oneOf(
    ['auto' /*default*/, 'ltr', 'rtl']
) -->
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　&lt;strong&gt;自用笔记：&lt;/strong&gt;本文属于自用笔记，不做详解，仅供参考。在此记录自己已理解并开始遵循的前端代码规范。What How Why&lt;br&gt;
    
    </summary>
    
      <category term="FrontFrame" scheme="http://luuman.github.io/categories/FrontFrame/"/>
    
    
      <category term="ReactNative" scheme="http://luuman.github.io/tags/ReactNative/"/>
    
  </entry>
  
</feed>
